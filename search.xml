<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cartographer 记录</title>
    <url>/2024/11/08/Cartographer%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="cartographer-记录"><a class="markdownIt-Anchor" href="#cartographer-记录"></a> Cartographer 记录</h1>
<h2 id="一-安装记录"><a class="markdownIt-Anchor" href="#一-安装记录"></a> 一、安装记录</h2>
<ol>
<li>
<p>遇到abseil安装失败的情况下</p>
<p>到/usr/local/lib  lib/pkgconfig  /usr/local/stow/absl 下把absl相关的文件全部删除</p>
<p>再重新安装</p>
</li>
<li>
<p>使用脚本自动安装和carto里面的script是一致的</p>
</li>
</ol>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/Cartographer/image.png"
                        alt="image.png" 
                 ></p>
<h2 id="二-运行记录"><a class="markdownIt-Anchor" href="#二-运行记录"></a> 二、 运行记录</h2>
<ol>
<li>
<p>运行纯laser scan建图</p>
<p>首先编写launch文件 其中加载configuration_files路径下的lua配置文件</p>
<p>其中的remap中的to话题需要更改为bag中的laser的topic</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;launch&gt;</span><br><span class="line">  &lt;!-- bag的地址与名称 --&gt;</span><br><span class="line">  &lt;!-- &lt;arg name=<span class="string">&quot;bag_filename&quot;</span> default=<span class="string">&quot;<span class="subst">$(env HOME)</span>/bagfiles/rslidar-outdoor-gps-notf.bag&quot;</span>/&gt; --&gt;</span><br><span class="line">  &lt;arg name=<span class="string">&quot;bag_filename&quot;</span> default=<span class="string">&quot;<span class="subst">$(env HOME)</span>/bagfiles/slam-filtered.bag&quot;</span>/&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;param name=<span class="string">&quot;/use_sim_time&quot;</span> value=<span class="string">&quot;true&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;node name=<span class="string">&quot;cartographer_node&quot;</span> pkg=<span class="string">&quot;cartographer_ros&quot;</span></span><br><span class="line">      <span class="built_in">type</span>=<span class="string">&quot;cartographer_node&quot;</span> args=<span class="string">&quot;</span></span><br><span class="line"><span class="string">          -configuration_directory <span class="subst">$(find cartographer_ros)</span>/configuration_files</span></span><br><span class="line"><span class="string">          -configuration_basename sz.lua&quot;</span></span><br><span class="line">      output=<span class="string">&quot;screen&quot;</span>&gt;</span><br><span class="line">    &lt;remap from=<span class="string">&quot;scan&quot;</span> to=<span class="string">&quot;front_scan&quot;</span> /&gt;</span><br><span class="line">  &lt;/node&gt;</span><br><span class="line"></span><br><span class="line">  &lt;node name=<span class="string">&quot;cartographer_occupancy_grid_node&quot;</span> pkg=<span class="string">&quot;cartographer_ros&quot;</span></span><br><span class="line">      <span class="built_in">type</span>=<span class="string">&quot;cartographer_occupancy_grid_node&quot;</span> args=<span class="string">&quot;-resolution 0.05&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;node name=<span class="string">&quot;rviz&quot;</span> pkg=<span class="string">&quot;rviz&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;rviz&quot;</span> required=<span class="string">&quot;true&quot;</span></span><br><span class="line">      args=<span class="string">&quot;-d <span class="subst">$(find cartographer_ros)</span>/configuration_files/demo_2d.rviz&quot;</span> /&gt;</span><br><span class="line">  &lt;node name=<span class="string">&quot;playbag&quot;</span> pkg=<span class="string">&quot;rosbag&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;play&quot;</span></span><br><span class="line">      args=<span class="string">&quot;--clock <span class="subst">$(arg bag_filename)</span>&quot;</span> /&gt;</span><br><span class="line">&lt;/launch&gt;</span><br></pre></td></tr></table></figure>
<p>然后是编写lua配置文件</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">include <span class="string">&quot;map_builder.lua&quot;</span></span><br><span class="line">include <span class="string">&quot;trajectory_builder.lua&quot;</span></span><br><span class="line"></span><br><span class="line">options = &#123;</span><br><span class="line">  map_builder = MAP_BUILDER,</span><br><span class="line">  trajectory_builder = TRAJECTORY_BUILDER,</span><br><span class="line">  map_frame = <span class="string">&quot;map&quot;</span>,</span><br><span class="line">  tracking_frame = <span class="string">&quot;front_laser&quot;</span>,</span><br><span class="line">  published_frame = <span class="string">&quot;front_laser&quot;</span>,</span><br><span class="line">  odom_frame = <span class="string">&quot;odom&quot;</span>,</span><br><span class="line">  provide_odom_frame = <span class="literal">true</span>,</span><br><span class="line">  publish_frame_projected_to_2d = <span class="literal">false</span>,</span><br><span class="line">  use_pose_extrapolator = <span class="literal">true</span>,</span><br><span class="line">  use_odometry = <span class="literal">false</span>,</span><br><span class="line">  use_nav_sat = <span class="literal">false</span>,</span><br><span class="line">  use_landmarks = <span class="literal">false</span>,</span><br><span class="line">  num_laser_scans = 1,</span><br><span class="line">  num_multi_echo_laser_scans = 0,</span><br><span class="line">  num_subdivisions_per_laser_scan = 1,</span><br><span class="line">  num_point_clouds = 0,</span><br><span class="line">  lookup_transform_timeout_sec = 0.2,</span><br><span class="line">  submap_publish_period_sec = 0.3,</span><br><span class="line">  pose_publish_period_sec = 5e-3,</span><br><span class="line">  trajectory_publish_period_sec = 30e-3,</span><br><span class="line">  rangefinder_sampling_ratio = 1.,</span><br><span class="line">  odometry_sampling_ratio = 1.,</span><br><span class="line">  fixed_frame_pose_sampling_ratio = 1.,</span><br><span class="line">  imu_sampling_ratio = 1.,</span><br><span class="line">  landmarks_sampling_ratio = 1.,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MAP_BUILDER.use_trajectory_builder_2d = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">TRAJECTORY_BUILDER_2D.submaps.num_range_data = 35</span><br><span class="line">TRAJECTORY_BUILDER_2D.min_range = 0.3</span><br><span class="line">TRAJECTORY_BUILDER_2D.max_range = 8.</span><br><span class="line">TRAJECTORY_BUILDER_2D.missing_data_ray_length = 1.</span><br><span class="line">TRAJECTORY_BUILDER_2D.use_imu_data = <span class="literal">false</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.use_online_correlative_scan_matching = <span class="literal">true</span></span><br><span class="line">TRAJECTORY_BUILDER_2D.real_time_correlative_scan_matcher.linear_search_window = 0.1</span><br><span class="line">TRAJECTORY_BUILDER_2D.real_time_correlative_scan_matcher.translation_delta_cost_weight = 10.</span><br><span class="line">TRAJECTORY_BUILDER_2D.real_time_correlative_scan_matcher.rotation_delta_cost_weight = 1e-1</span><br><span class="line"></span><br><span class="line">POSE_GRAPH.optimization_problem.huber_scale = 1e2</span><br><span class="line">POSE_GRAPH.optimize_every_n_nodes = 35</span><br><span class="line">POSE_GRAPH.constraint_builder.min_score = 0.65</span><br><span class="line"></span><br><span class="line"><span class="built_in">return</span> options</span><br></pre></td></tr></table></figure>
<p>其中tracking_frame 指的是全部转到这个坐标系下，因为这里使用的是纯laser建图，如果有imu的话可以改成imu的frame_id，一般是imu_link</p>
<p>published_frame指的是发布的话题tf: map -&gt; front_laser</p>
</li>
</ol>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/Cartographer/image%201.png"
                        alt="image.png" 
                 ></p>
<p>附：</p>
<p>lua参数解析</p>
<p><a class="link"   href="https://blog.csdn.net/YiYeZhiNian/article/details/131774720" >https://blog.csdn.net/YiYeZhiNian/article/details/131774720<i class="fas fa-external-link-alt"></i></a></p>
<p>坐标系转换，rosbag</p>
<p><a class="link"   href="https://blog.51cto.com/u_14355665/6099741" >https://blog.51cto.com/u_14355665/6099741<i class="fas fa-external-link-alt"></i></a></p>
<p>cartographer保存2d地图</p>
<p><a class="link"   href="https://blog.csdn.net/jiesunliu3215/article/details/124359333" >https://blog.csdn.net/jiesunliu3215/article/details/124359333<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>SLAM</tag>
        <tag>Cartographer</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下软件打包</title>
    <url>/2024/10/30/Linux%E4%B8%8B%E8%BD%AF%E4%BB%B6%E6%89%93%E5%8C%85/</url>
    <content><![CDATA[<h2 id="linux-将qt程序打包为appimage包"><a class="markdownIt-Anchor" href="#linux-将qt程序打包为appimage包"></a> Linux 将Qt程序打包为AppImage包</h2>
<p><a class="link"   href="https://blog.csdn.net/no_say_you_know/article/details/134212620" >https://blog.csdn.net/no_say_you_know/article/details/134212620<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="1-使用linuxdeployqt工具打包qt"><a class="markdownIt-Anchor" href="#1-使用linuxdeployqt工具打包qt"></a> 1. 使用Linuxdeployqt工具打包qt</h3>
<p><a class="link"   href="https://github.com/probonopd/linuxdeployqt" >https://github.com/probonopd/linuxdeployqt<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="2-修改配置"><a class="markdownIt-Anchor" href="#2-修改配置"></a> 2. 修改配置</h3>
<h3 id="3-打包成appimage"><a class="markdownIt-Anchor" href="#3-打包成appimage"></a> 3. 打包成appimage</h3>
<p><a class="link"   href="https://github.com/AppImage/AppImageKit" >https://github.com/AppImage/AppImageKit<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>AppImage</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu20.04+noetic+ORB_SLAM2安装记录</title>
    <url>/2022/02/21/Ubuntu20-04-noetic-ORB-SLAM2%E5%AE%89%E8%A3%85%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="ubuntu2004-安装-noetic"><a class="markdownIt-Anchor" href="#ubuntu2004-安装-noetic"></a> Ubuntu20.04 安装 noetic</h2>
<p>本段教程参考于 <a class="link"   href="https://www.guyuehome.com/12640" >https://www.guyuehome.com/12640<i class="fas fa-external-link-alt"></i></a></p>
<ol>
<li>
<p>安装过程与ROS官网一致，网络无法连接时可以换个服务器,或使用国内镜像<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/choose_best_server.png"
                        alt="选择最快的服务器" 
                 ><br />
安装完成后可以跑以下小乌龟的例子看一下是否ok</p>
</li>
<li>
<p>安装完成后需要 sudo rosdep init ,提示website may be down ,总之在浏览器中可以打开这个网址，但终端中不能访问到，复制代码，新建文件，手动放到目录/etc/ros/rosdep/sources.list.d下</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo rosdep init</span><br><span class="line">rosdep update</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/raw_githubcontent_rosdep_init.png"
                        alt="" 
                 ></p>
<pre><code><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /etc/ros/rosdep/sources.list.d</span><br><span class="line"><span class="built_in">cd</span> /etc/ros/rosdep/sources.list.d</span><br><span class="line">sudo gedit 20-default.list</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># os-specific listings first</span></span><br><span class="line">yaml https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/osx-homebrew.yaml osx</span><br><span class="line"></span><br><span class="line"><span class="comment"># generic</span></span><br><span class="line">yaml https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/base.yaml</span><br><span class="line">yaml https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/python.yaml</span><br><span class="line">yaml https://raw.githubusercontent.com/ros/rosdistro/master/rosdep/ruby.yaml</span><br><span class="line">gbpdistro https://raw.githubusercontent.com/ros/rosdistro/master/releases/fuerte.yaml fuerte</span><br><span class="line"></span><br><span class="line"><span class="comment"># newer distributions (Groovy, Hydro, ...) must not be listed anymore, they are being fetched from the rosdistro index.yaml instead</span></span><br></pre></td></tr></table></figure>
之后执行rosdep update
若是githubusercontent不能访问，可以将其改为github
</code></pre>
<h2 id="创建ros工作空间"><a class="markdownIt-Anchor" href="#创建ros工作空间"></a> 创建ROS工作空间</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p ~/catkin_ws/src</span><br><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">catkin_make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在.bashrc 中添加</span></span><br><span class="line"><span class="built_in">source</span> /opt/ros/noetic/setup.bash</span><br><span class="line"><span class="built_in">source</span> ~/catkin_ws/devel/setup.bash</span><br></pre></td></tr></table></figure>
<h2 id="编译usb_cam"><a class="markdownIt-Anchor" href="#编译usb_cam"></a> 编译usb_cam</h2>
<p>[usb_cam下载链接] (<a class="link"   href="https://github.com/bosch-ros-pkg/usb_cam" >https://github.com/bosch-ros-pkg/usb_cam<i class="fas fa-external-link-alt"></i></a>)<br />
在ros工作空间 src目录下进行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws/src</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/ros-drivers/usb_cam.git</span><br><span class="line"><span class="built_in">cd</span> usb_cam</span><br><span class="line"><span class="built_in">mkdir</span> build</span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">cmake ..</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<h2 id="编译安装orb_slam2"><a class="markdownIt-Anchor" href="#编译安装orb_slam2"></a> 编译安装ORB_SLAM2</h2>
<p>本段教程参考自( <a class="link"   href="https://www.cnblogs.com/MingruiYu/p/12286752.html" >https://www.cnblogs.com/MingruiYu/p/12286752.html<i class="fas fa-external-link-alt"></i></a> )</p>
<ol>
<li>
<p>Pangolin</p>
<p>安装教程见github <a class="link"   href="https://github.com/stevenlovegrove/Pangolin" >https://github.com/stevenlovegrove/Pangolin<i class="fas fa-external-link-alt"></i></a><br />
实测最新的pangolin需求c17过新 安装旧版V0.5就行</p>
</li>
<li>
<p>opencv</p>
<p>到opencv官网 <a class="link"   href="https://opencv.org/releases" >https://opencv.org/releases<i class="fas fa-external-link-alt"></i></a> 下载源码自行编译安装<br />
下载后解压</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/opencv</span><br><span class="line"><span class="built_in">mkdir</span> build	 <span class="comment"># 创建工程编译所需文件夹</span></span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，后面的两个点千万不能省，代表了上级目录</span></span><br><span class="line">cmake -D CMAKE_BUILD_TYPE=Release -D CMAKE_INSTALL_PREFIX=/usr/local ..</span><br><span class="line"></span><br><span class="line">make -j10     <span class="comment"># 多线程执行make任务</span></span><br><span class="line">sudo make install</span><br><span class="line"></span><br><span class="line">pkg-config --modversion opencv	<span class="comment">#查看安装版本</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>Eigen</p>
<p>其下载和安装教程可见：(<a class="link"   href="http://eigen.tuxfamily.org" >http://eigen.tuxfamily.org<i class="fas fa-external-link-alt"></i></a>)。在ubuntu中，可以直接使用 sudo apt-get install libeigen3-dev进行安装</p>
<p>注：关于Eigen3的安装路径，如果出现程序include不到Eigen3的情况，可以参考 (<a class="link"   href="https://www.cnblogs.com/newneul/p/8256803.html" >https://www.cnblogs.com/newneul/p/8256803.html<i class="fas fa-external-link-alt"></i></a>) 对Eigen3的位置进行调整。</p>
</li>
<li>
<p>安装ORB_SLAM2</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在 /catkin_ws/src 目录下</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/raulmur/ORB_SLAM2.git</span><br><span class="line"><span class="built_in">cd</span> ORB_SLAM2</span><br><span class="line"><span class="built_in">chmod</span> +x build.sh</span><br><span class="line">./build.sh</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="把摄像头数据发布到topic"><a class="markdownIt-Anchor" href="#把摄像头数据发布到topic"></a> 把摄像头数据发布到topic</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line"><span class="comment"># 若是提示没有usb_cam什么的 运行 source /devel/setup.bash 重试</span></span><br><span class="line">roslaunch usb_cam usb_cam-test.launch</span><br></pre></td></tr></table></figure>
<h2 id="修改ros_monocc"><a class="markdownIt-Anchor" href="#修改ros_monocc"></a> 修改ros_mono.cc</h2>
<p>进入～/catkin_ws/src/ORB_SLAM2/Examples/ROS/ORB_SLAM2/src<br />
打开 ros_mono.cc 把程序里面的topic改为 /usb_cam/image_raw<br />
具体还要查看自己的rviz（即上一步打开的摄像头窗口的标题）<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/ros_mono_usb_cam.png"
                        alt="" 
                 ></p>
<h2 id="编译ros下的orb_slam2"><a class="markdownIt-Anchor" href="#编译ros下的orb_slam2"></a> 编译ros下的ORB_SLAM2</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br><span class="line"><span class="comment"># 使用echo来检查ros package path 是否配置</span></span><br><span class="line"><span class="comment"># 在~/.bashrc 中添加 </span></span><br><span class="line"><span class="built_in">export</span> ROS_PACKAGE_PATH=<span class="variable">$&#123;ROS_PACKAGE_PATH&#125;</span>:/home/自己的用户名/catkin_ws/src/ORB_SLAM2/Examples/ROS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  然后进入～/catkin_ws/src/ORB_SLAM</span></span><br><span class="line"><span class="built_in">chmod</span> +x build_ros.sh</span><br><span class="line">./build_ros.sh</span><br></pre></td></tr></table></figure>
<h2 id="启动mono"><a class="markdownIt-Anchor" href="#启动mono"></a> 启动mono</h2>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在目录~/catkin_ws/src/ORB_SLAM2下</span></span><br><span class="line">rosrun ORB_SLAM2 Mono /home/xmcchv/catkin_ws/src/ORB_SLAM2/Vocabulary/ORBvoc.txt /home/xmcchv/catkin_ws/src/ORB_SLAM2/myUsb_cam.yaml</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>有两个参数，第二个参数是相机参数文件，根据自己的相机参数修改。<br />
启动后正常如图<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/ROS_ORB_SLAM2.png"
                        alt="" 
                 ></p>
<h2 id="相机标定-获取参数"><a class="markdownIt-Anchor" href="#相机标定-获取参数"></a> 相机标定 获取参数</h2>
<p>本段教程参考于( <a class="link"   href="https://blog.csdn.net/yx868yx/article/details/115366655" >https://blog.csdn.net/yx868yx/article/details/115366655<i class="fas fa-external-link-alt"></i></a> )<br />
使用棋盘格</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/qipange.png"
                        alt="" 
                 ></p>
<ol>
<li>
<p>下载ros的相机标定包</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosdep install camera_calibration</span><br><span class="line">rosmake camera_calibration</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动usb_cam</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 若失败 source一下 devel/setup.bash</span></span><br><span class="line">roslaunch usb_cam usb_cam-test.launch</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动标定程序</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rosrun camera_calibration cameracalibrator.py --size 8x6 --square 0.025 image:=/usb_cam/image_raw camera:=/usb_cam</span><br></pre></td></tr></table></figure>
<p>其中image:= 和camera:=后的内容需要根据自己电脑摄像头的话题和节点来修改，可以通过rqt_graph来查看。比如有的会是image:=/camera/image_raw camera:=/camera</p>
<p>标定界面出现后，按照x（左右）、y（上下）、size（前后）、skew（倾斜）等方式移动棋盘，直到x,y,size,skew的进度条都变成绿色位置．</p>
<p>此时可以按下CALIBRATE按钮，点击一下后，界面会卡住,此时不要做任何操作，直到运行标定程序的终端输出标定的结果<br />
有标定结果出来后，点击标定界面的SAVE按钮，再点commit按钮，标定结果保存在/tmp/calibrationdata.tar.gz这个压缩包中，到这里彩色相机的标定就结束了<br />
关闭标定程序,完成后Commit，在终端后会有标定结果yaml文件地址．默认一般为/home/用户名/.ros/camera_info/head_camera.yaml</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/cam_yaml.png"
                        alt="" 
                 ></p>
</li>
<li>
<p>修改相机名称</p>
<p>如图<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/usb_cam-test_launch.png"
                        alt="" 
                 ><br />
修改/dev/video0 和 usb_cam<br />
与其他地方保持一致</p>
</li>
</ol>
<h2 id="参考链接"><a class="markdownIt-Anchor" href="#参考链接"></a> 参考链接</h2>
<p>总体安装教程</p>
<p><a class="link"   href="https://blog.csdn.net/xmy306538517/article/details/59501718" >https://blog.csdn.net/xmy306538517/article/details/59501718<i class="fas fa-external-link-alt"></i></a><br />
<a class="link"   href="http://www.liuxiao.org/2016/07/ubuntu-orb-slam2-%E5%9C%A8-ros-%E4%B8%8A%E7%BC%96%E8%AF%91%E8%B0%83%E8%AF%95/" >http://www.liuxiao.org/2016/07/ubuntu-orb-slam2-在-ros-上编译调试/<i class="fas fa-external-link-alt"></i></a><br />
<a class="link"   href="https://blog.csdn.net/qinqinxiansheng/article/details/107079265" >https://blog.csdn.net/qinqinxiansheng/article/details/107079265<i class="fas fa-external-link-alt"></i></a></p>
<p>编译build_ros.sh时报错<br />
<a class="link"   href="https://blog.csdn.net/weixin_41111088/article/details/89377368" >https://blog.csdn.net/weixin_41111088/article/details/89377368<i class="fas fa-external-link-alt"></i></a></p>
<p>ORB_SLAM2编译build_ros.sh时报错<br />
<a class="link"   href="https://blog.csdn.net/chengmo123/article/details/104906376" >https://blog.csdn.net/chengmo123/article/details/104906376<i class="fas fa-external-link-alt"></i></a></p>
<p>相机标定<br />
<a class="link"   href="https://blog.csdn.net/yx868yx/article/details/115366655" >https://blog.csdn.net/yx868yx/article/details/115366655<i class="fas fa-external-link-alt"></i></a></p>
<p>ORB_SLAM2数据集<br />
<a class="link"   href="https://vision.in.tum.de/data/datasets/rgbd-dataset/download#freiburg2_pioneer_360" >https://vision.in.tum.de/data/datasets/rgbd-dataset/download#freiburg2_pioneer_360<i class="fas fa-external-link-alt"></i></a></p>
<p>ORB_SLAM2编译build.sh 出错<br />
<a class="link"   href="https://blog.csdn.net/lixujie666/article/details/90023059" >https://blog.csdn.net/lixujie666/article/details/90023059<i class="fas fa-external-link-alt"></i></a></p>
<p>小乌龟<br />
<a class="link"   href="https://blog.csdn.net/qq_21835111/article/details/99694286" >https://blog.csdn.net/qq_21835111/article/details/99694286<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>ROS</tag>
        <tag>ORB_SLAM2</tag>
      </tags>
  </entry>
  <entry>
    <title>深度卷积生成对抗网络-手写数字识别</title>
    <url>/2021/07/05/DCGANs/</url>
    <content><![CDATA[<h2 id="深度卷积生成对抗网络"><a class="markdownIt-Anchor" href="#深度卷积生成对抗网络"></a> 深度卷积生成对抗网络</h2>
<p>生成对抗网络（GANs）是当今计算机科学领域最有趣的想法之一。两个模型通过对抗过程同时训练。一个生成器（“艺术家”）学习创造看起来真实的图像，而判别器（“艺术评论家”）学习区分真假图像。</p>
<p>本笔记在 MNIST 数据集上演示了该过程。下方动画展示了当训练了 50 个epoch （全部数据集迭代50次） 时生成器所生成的一系列图片。图片从随机噪声开始，随着时间的推移越来越像手写数字。</p>
<h4 id="本例为tensorflow官网的例子"><a class="markdownIt-Anchor" href="#本例为tensorflow官网的例子"></a> 本例为TensorFlow官网的例子</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">import</span> glob</span><br><span class="line"><span class="keyword">import</span> imageio</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> PIL</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> display</span><br><span class="line"><span class="comment"># 使用GPU加速</span></span><br><span class="line">os.environ[<span class="string">&quot;CUDA_VISIBLE_DEVICES&quot;</span>] = <span class="string">&quot;0&quot;</span></span><br><span class="line">tf.config.experimental.list_physical_devices(<span class="string">&#x27;GPU&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_generator_model</span>():</span><br><span class="line">    model = tf.keras.Sequential()</span><br><span class="line">    model.add(layers.Dense(<span class="number">7</span>*<span class="number">7</span>*<span class="number">256</span>, use_bias=<span class="literal">False</span>, input_shape=(<span class="number">100</span>,)))</span><br><span class="line">    model.add(layers.BatchNormalization())</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line"></span><br><span class="line">    model.add(layers.Reshape((<span class="number">7</span>, <span class="number">7</span>, <span class="number">256</span>)))</span><br><span class="line">    <span class="keyword">assert</span> model.output_shape == (<span class="literal">None</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">256</span>) <span class="comment"># 注意：batch size 没有限制</span></span><br><span class="line"></span><br><span class="line">    model.add(layers.Conv2DTranspose(<span class="number">128</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">1</span>, <span class="number">1</span>), padding=<span class="string">&#x27;same&#x27;</span>, use_bias=<span class="literal">False</span>))</span><br><span class="line">    <span class="keyword">assert</span> model.output_shape == (<span class="literal">None</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">128</span>)</span><br><span class="line">    model.add(layers.BatchNormalization())</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line"></span><br><span class="line">    model.add(layers.Conv2DTranspose(<span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">&#x27;same&#x27;</span>, use_bias=<span class="literal">False</span>))</span><br><span class="line">    <span class="keyword">assert</span> model.output_shape == (<span class="literal">None</span>, <span class="number">14</span>, <span class="number">14</span>, <span class="number">64</span>)</span><br><span class="line">    model.add(layers.BatchNormalization())</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line"></span><br><span class="line">    model.add(layers.Conv2DTranspose(<span class="number">1</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">&#x27;same&#x27;</span>, use_bias=<span class="literal">False</span>, activation=<span class="string">&#x27;tanh&#x27;</span>))</span><br><span class="line">    <span class="keyword">assert</span> model.output_shape == (<span class="literal">None</span>, <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">make_discriminator_model</span>():</span><br><span class="line">    model = tf.keras.Sequential()</span><br><span class="line">    model.add(layers.Conv2D(<span class="number">64</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">&#x27;same&#x27;</span>,input_shape=[<span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>]))</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.3</span>))</span><br><span class="line"></span><br><span class="line">    model.add(layers.Conv2D(<span class="number">128</span>, (<span class="number">5</span>, <span class="number">5</span>), strides=(<span class="number">2</span>, <span class="number">2</span>), padding=<span class="string">&#x27;same&#x27;</span>))</span><br><span class="line">    model.add(layers.LeakyReLU())</span><br><span class="line">    model.add(layers.Dropout(<span class="number">0.3</span>))</span><br><span class="line"></span><br><span class="line">    model.add(layers.Flatten())</span><br><span class="line">    model.add(layers.Dense(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> model</span><br><span class="line"></span><br><span class="line">(train_images, train_labels), (_, _) = tf.keras.datasets.mnist.load_data()</span><br><span class="line"></span><br><span class="line">train_images = train_images.reshape(train_images.shape[<span class="number">0</span>], <span class="number">28</span>, <span class="number">28</span>, <span class="number">1</span>).astype(<span class="string">&#x27;float32&#x27;</span>)</span><br><span class="line">train_images = (train_images - <span class="number">127.5</span>) / <span class="number">127.5</span> <span class="comment"># 将图片标准化到 [-1, 1] 区间内</span></span><br><span class="line"></span><br><span class="line">BUFFER_SIZE = <span class="number">60000</span></span><br><span class="line">BATCH_SIZE = <span class="number">256</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 批量化和打乱数据</span></span><br><span class="line">train_dataset = tf.data.Dataset.from_tensor_slices(train_images).shuffle(BUFFER_SIZE).batch(BATCH_SIZE)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用（尚未训练的）生成器创建一张图片。</span></span><br><span class="line">generator = make_generator_model()</span><br><span class="line"></span><br><span class="line">noise = tf.random.normal([<span class="number">1</span>, <span class="number">100</span>])</span><br><span class="line">generated_image = generator(noise, training=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">plt.imshow(generated_image[<span class="number">0</span>, :, :, <span class="number">0</span>], cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用（尚未训练的）判别器来对图片的真伪进行判断。模型将被训练为为真实图片输出正值，为伪造图片输出负值。</span></span><br><span class="line">discriminator = make_discriminator_model()</span><br><span class="line">decision = discriminator(generated_image)</span><br><span class="line"><span class="built_in">print</span>(decision)</span><br><span class="line"><span class="comment"># 该方法量化判别器从判断真伪图片的能力。它将判别器对真实图片的预测值与值全为 1 的数组进行对比，将判别器对伪造（生成的）图片的预测值与值全为 0 的数组进行对比。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">discriminator_loss</span>(<span class="params">real_output, fake_output</span>):</span><br><span class="line">    real_loss = cross_entropy(tf.ones_like(real_output), real_output)</span><br><span class="line">    fake_loss = cross_entropy(tf.zeros_like(fake_output), fake_output)</span><br><span class="line">    total_loss = real_loss + fake_loss</span><br><span class="line">    <span class="keyword">return</span> total_loss</span><br><span class="line"><span class="comment"># 该方法返回计算交叉熵损失的辅助函数</span></span><br><span class="line">cross_entropy = tf.keras.losses.BinaryCrossentropy(from_logits=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generator_loss</span>(<span class="params">fake_output</span>):</span><br><span class="line">    <span class="keyword">return</span> cross_entropy(tf.ones_like(fake_output), fake_output)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 由于我们需要分别训练两个网络，判别器和生成器的优化器是不同的。</span></span><br><span class="line">generator_optimizer = tf.keras.optimizers.Adam(<span class="number">1e-4</span>)</span><br><span class="line">discriminator_optimizer = tf.keras.optimizers.Adam(<span class="number">1e-4</span>)</span><br><span class="line"></span><br><span class="line">checkpoint_dir = <span class="string">&#x27;./training_checkpoints&#x27;</span></span><br><span class="line">checkpoint_prefix = os.path.join(checkpoint_dir, <span class="string">&quot;ckpt&quot;</span>)</span><br><span class="line">checkpoint = tf.train.Checkpoint(generator_optimizer=generator_optimizer,</span><br><span class="line">                                 discriminator_optimizer=discriminator_optimizer,</span><br><span class="line">                                 generator=generator,</span><br><span class="line">                                 discriminator=discriminator)</span><br><span class="line"></span><br><span class="line">EPOCHS = <span class="number">50</span></span><br><span class="line">noise_dim = <span class="number">100</span></span><br><span class="line">num_examples_to_generate = <span class="number">16</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们将重复使用该种子（因此在动画 GIF 中更容易可视化进度）</span></span><br><span class="line">seed = tf.random.normal([num_examples_to_generate, noise_dim])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 训练循环在生成器接收到一个随机种子作为输入时开始。该种子用于生产一张图片。判别器随后被用于区分真实图片（选自训练集）和伪造图片（由生成器生成）。针对这里的每一个模型都计算损失函数，并且计算梯度用于更新生成器与判别器。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 注意 `tf.function` 的使用</span></span><br><span class="line"><span class="comment"># 该注解使函数被“编译”</span></span><br><span class="line"><span class="meta">@tf.function</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_step</span>(<span class="params">images</span>):</span><br><span class="line">    noise = tf.random.normal([BATCH_SIZE, noise_dim])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> tf.GradientTape() <span class="keyword">as</span> gen_tape, tf.GradientTape() <span class="keyword">as</span> disc_tape:</span><br><span class="line">      generated_images = generator(noise, training=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">      real_output = discriminator(images, training=<span class="literal">True</span>)</span><br><span class="line">      fake_output = discriminator(generated_images, training=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">      gen_loss = generator_loss(fake_output)</span><br><span class="line">      disc_loss = discriminator_loss(real_output, fake_output)</span><br><span class="line"></span><br><span class="line">    gradients_of_generator = gen_tape.gradient(gen_loss, generator.trainable_variables)</span><br><span class="line">    gradients_of_discriminator = disc_tape.gradient(disc_loss, discriminator.trainable_variables)</span><br><span class="line"></span><br><span class="line">    generator_optimizer.apply_gradients(<span class="built_in">zip</span>(gradients_of_generator, generator.trainable_variables))</span><br><span class="line">    discriminator_optimizer.apply_gradients(<span class="built_in">zip</span>(gradients_of_discriminator, discriminator.trainable_variables))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">dataset, epochs</span>):</span><br><span class="line">  <span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(epochs):</span><br><span class="line">    start = time.time()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> image_batch <span class="keyword">in</span> dataset:</span><br><span class="line">      train_step(image_batch)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 继续进行时为 GIF 生成图像</span></span><br><span class="line">    display.clear_output(wait=<span class="literal">True</span>)</span><br><span class="line">    generate_and_save_images(generator,epoch + <span class="number">1</span>,seed)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 每 15 个 epoch 保存一次模型</span></span><br><span class="line">    <span class="keyword">if</span> (epoch + <span class="number">1</span>) % <span class="number">15</span> == <span class="number">0</span>:</span><br><span class="line">      checkpoint.save(file_prefix = checkpoint_prefix)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&#x27;Time for epoch &#123;&#125; is &#123;&#125; sec&#x27;</span>.<span class="built_in">format</span>(epoch + <span class="number">1</span>, time.time()-start))</span><br><span class="line"></span><br><span class="line">  <span class="comment"># 最后一个 epoch 结束后生成图片</span></span><br><span class="line">  display.clear_output(wait=<span class="literal">True</span>)</span><br><span class="line">  generate_and_save_images(generator,epochs,seed)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_and_save_images</span>(<span class="params">model, epoch, test_input</span>):</span><br><span class="line">  <span class="comment"># 注意 training` 设定为 False</span></span><br><span class="line">  <span class="comment"># 因此，所有层都在推理模式下运行（batchnorm）。</span></span><br><span class="line">  predictions = model(test_input, training=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">  fig = plt.figure(figsize=(<span class="number">4</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(predictions.shape[<span class="number">0</span>]):</span><br><span class="line">      plt.subplot(<span class="number">4</span>, <span class="number">4</span>, i+<span class="number">1</span>)</span><br><span class="line">      plt.imshow(predictions[i, :, :, <span class="number">0</span>] * <span class="number">127.5</span> + <span class="number">127.5</span>, cmap=<span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">      plt.axis(<span class="string">&#x27;off&#x27;</span>)</span><br><span class="line"></span><br><span class="line">  plt.savefig(<span class="string">&#x27;image_at_epoch_&#123;:04d&#125;.png&#x27;</span>.<span class="built_in">format</span>(epoch))</span><br><span class="line"></span><br><span class="line">train(train_dataset, EPOCHS)</span><br></pre></td></tr></table></figure>
<p>本人的显卡为GF 940mx，实在太拉跨了，所以没全跑完，epoch到35就结束了。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/949a6c77-4bee-4ac6-a33a-ca61920beadd.gif"
                        alt="手写数字识别" title="手写数字识别" 
                 ></p>
]]></content>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Tensorflow</tag>
        <tag>生成对抗网络</tag>
        <tag>手写数字识别</tag>
      </tags>
  </entry>
  <entry>
    <title>cmake编译</title>
    <url>/2022/02/17/cmake%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<h2 id="cmakelisttxt"><a class="markdownIt-Anchor" href="#cmakelisttxt"></a> CMakeList.txt</h2>
<p>记录下CMakeList中包含的内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 声明cmake的最低版本</span><br><span class="line">cmake_minimum_version( VERSION 2.0 )</span><br><span class="line"></span><br><span class="line"># 声明一个cmake工程</span><br><span class="line">project( HelloSLAM )</span><br><span class="line"></span><br><span class="line"># 添加一个可执行程序</span><br><span class="line"># 语法 add_executable( 程序名 源代码文件 )</span><br><span class="line">add_executable( helloSLAM helloSLAM.cpp )</span><br><span class="line"></span><br><span class="line"># 编写库</span><br><span class="line"># 静态库 .a 静态库每次被调用都会生成一个副本</span><br><span class="line">add_library( hello libHelloSLAM.cpp )</span><br><span class="line"></span><br><span class="line"># 共享库 .so 共享库只有一个副本</span><br><span class="line">add_library( hello_shared SHARED libHelloSLAM.cpp )</span><br><span class="line"></span><br><span class="line"># 使用 .so 时 还需要定义一个头文件 提供了共享库的函数 以供调用</span><br><span class="line"># 链接 </span><br><span class="line">target_link_libraries( useHello hello_shared )</span><br><span class="line"></span><br><span class="line"># 编译</span><br><span class="line"># 在源文件同级目录下 mkdir build &amp;&amp; cd build &amp;&amp; cmake ..</span><br><span class="line"></span><br><span class="line"># 添加头文件</span><br><span class="line">include_directories(&quot;/user/include/eigen3&quot;)</span><br><span class="line"></span><br><span class="line"># 寻找Opencv库</span><br><span class="line">find_package( OpenCV REQUIRED )</span><br><span class="line">include_directories( $&#123;OpenCV_INCLUDE_DIRS&#125; )</span><br><span class="line">target_link_libraries( 可执行程序名 $&#123;OpenCV_LIBS&#125; )</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>cmake</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习-1</title>
    <url>/2021/07/03/Python%E5%AD%A6%E4%B9%A0-1/</url>
    <content><![CDATA[<h2 id="基础知识"><a class="markdownIt-Anchor" href="#基础知识"></a> 基础知识</h2>
<ol>
<li>一般格式</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8     </span></span><br><span class="line"><span class="comment"># 一个空行</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 两个空行</span></span><br><span class="line"><span class="built_in">print</span>(os.getcwd())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;hello,world!&#x27;</span>)</span><br><span class="line"><span class="built_in">list</span> = [<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>)</span><br><span class="line"><span class="comment"># 一个空行</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li>注释</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 单行注释</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用单引号。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">这是多行注释，使用双引号。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h2>
<h4 id="numbers数字"><a class="markdownIt-Anchor" href="#numbers数字"></a> Numbers（数字）</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counter = <span class="number">100</span> <span class="comment"># 赋值整型变量</span></span><br><span class="line">miles = <span class="number">1000.0</span> <span class="comment"># 浮点型</span></span><br><span class="line">name = <span class="string">&quot;xmcchv&quot;</span> <span class="comment"># 字符串</span></span><br><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;john&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="string字符串"><a class="markdownIt-Anchor" href="#string字符串"></a> String（字符串）</h4>
<p>python的字串列表有2种取值顺序:<br />
从左到右索引默认0开始的，最大范围是字符串长度少1<br />
从右到左索引默认-1开始的，最大范围是字符串开头<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/list_slicing1_new1.png"
                        alt="python-string-slice" title="python-string-slice" 
                 ></p>
<h4 id="list列表"><a class="markdownIt-Anchor" href="#list列表"></a> List（列表）</h4>
<p>List（列表） 是 Python 中使用最频繁的数据类型。</p>
<p>列表可以完成大多数集合类的数据结构实现。它支持字符，数字，字符串甚至可以包含列表（即嵌套）。</p>
<p>列表用<code>[ ]</code>标识，是 python 最通用的复合数据类型。</p>
<p>列表中值的切割也可以用到变量<code>[头下标:尾下标]</code>，就可以截取相应的列表，从左到右索引默认 0 开始，从右到左索引默认 -1 开始，下标可以为空表示取到头或尾。<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/list_slicing1_new1.png"
                        alt="list_slicing" title="list_slicing" 
                 ><br />
加号<code>+</code>是列表连接运算符，星号<code>*</code>是重复操作。如下实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>               <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">0</span>]            <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]          <span class="comment"># 输出第二个至第三个元素 </span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span>[<span class="number">2</span>:]           <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> tinylist * <span class="number">2</span>       <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">list</span> + tinylist    <span class="comment"># 打印组合的列表</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="tuple元组"><a class="markdownIt-Anchor" href="#tuple元组"></a> Tuple（元组）</h4>
<p>元组是另一个数据类型，类似于 List（列表）。</p>
<p>元组用<code>()</code>标识。内部元素用逗号隔开。但是元组不能二次赋值，相当于只读列表。</p>
<h4 id="dictionary字典"><a class="markdownIt-Anchor" href="#dictionary字典"></a> Dictionary（字典）</h4>
<p>字典(dictionary)是除列表以外python之中最灵活的内置数据结构类型。列表是有序的对象集合，字典是无序的对象集合。</p>
<p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典用<code>&#123; &#125;</code>标识。字典由索引(key)和它对应的值value组成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;This is one&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>] = <span class="string">&quot;This is two&quot;</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">6734</span>, <span class="string">&#x27;dept&#x27;</span>: <span class="string">&#x27;sales&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>]          <span class="comment"># 输出键为&#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> <span class="built_in">dict</span>[<span class="number">2</span>]              <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> tinydict             <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> tinydict.keys()      <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> tinydict.values()    <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure>
<p>输出结果如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">This is one</span><br><span class="line">This is two</span><br><span class="line">&#123;<span class="string">&#x27;dept&#x27;</span>: <span class="string">&#x27;sales&#x27;</span>, <span class="string">&#x27;code&#x27;</span>: 6734, <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>&#125;</span><br><span class="line">[<span class="string">&#x27;dept&#x27;</span>, <span class="string">&#x27;code&#x27;</span>, <span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;sales&#x27;</span>, 6734, <span class="string">&#x27;runoob&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h2 id="算数运算符"><a class="markdownIt-Anchor" href="#算数运算符"></a> 算数运算符</h2>
<ol>
<li>
<p>用<code>**</code>表示幂 - 返回x的y次幂</p>
</li>
<li>
<p>用<code>//</code>取整除 - 返回商的整数部分（向下取整）<br />
实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">9</span>//<span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>-<span class="number">9</span>//<span class="number">2</span></span><br><span class="line">-<span class="number">5</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>用<code>**=</code>表示幂赋值运算符<code>	c **= a </code>等效于<code> c = c ** a</code></p>
</li>
<li>
<p>用<code>//=</code>表示取整除赋值运算符<code>	c //= a </code>等效于<code> c = c // a</code></p>
</li>
</ol>
<h2 id="位运算"><a class="markdownIt-Anchor" href="#位运算"></a> 位运算</h2>
<p>按位运算符是把数字看作二进制来进行计算的。<br />
下表中变量 a 为 60，b 为 13，二进制格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = 0011 <span class="number">1100</span></span><br><span class="line">b = <span class="number">0000</span> <span class="number">1101</span></span><br><span class="line"></span><br><span class="line">a&amp;b = <span class="number">0000</span> <span class="number">1100</span></span><br><span class="line">a|b = 0011 <span class="number">1101</span></span><br><span class="line">a^b = 0011 0001</span><br><span class="line">~a  = <span class="number">1100</span> 0011</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/weiyunsuan.png"
                        alt="位运算" title="位运算" 
                 ></p>
<h2 id="成员运算符"><a class="markdownIt-Anchor" href="#成员运算符"></a> 成员运算符</h2>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">in</td>
<td style="text-align:left">如果在指定的序列中找到值返回 True，否则返回 False。</td>
<td style="text-align:left">x 在 y 序列中 , 如果 x 在 y 序列中返回 True。</td>
</tr>
<tr>
<td style="text-align:left">not in</td>
<td style="text-align:left">如果在指定的序列中没有找到值返回 True，否则返回 False。</td>
<td style="text-align:left">x 不在 y 序列中 , 如果 x 不在 y 序列中返回 True。</td>
</tr>
</tbody>
</table>
<h2 id="身份运算符"><a class="markdownIt-Anchor" href="#身份运算符"></a> 身份运算符</h2>
<p>身份运算符用于比较两个对象的存储单元</p>
<table>
<thead>
<tr>
<th style="text-align:left">运算符</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">实例</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">is</td>
<td style="text-align:left">is 是判断两个标识符是不是引用自一个对象</td>
<td style="text-align:left">x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td>
</tr>
<tr>
<td style="text-align:left">is not</td>
<td style="text-align:left">is not 是判断两个标识符是不是引用自不同对象</td>
<td style="text-align:left">x is not y ， 类似 id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>
</tr>
</tbody>
</table>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">is 与 == 区别：</span><br><span class="line">is 用于判断两个变量引用对象是否为同一个(同一块内存空间)</span><br><span class="line">== 用于判断引用变量的值是否相等。</span><br></pre></td></tr></table></figure>
<p>文章都来自菜鸟教程，这里我挑了一下做了下整理，都是我不会的QAQ</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>服装图像分类</title>
    <url>/2021/07/05/imgidentity/</url>
    <content><![CDATA[<h2 id="服装图像分类"><a class="markdownIt-Anchor" href="#服装图像分类"></a> 服装图像分类</h2>
<p>将训练一个神经网络模型，对运动鞋和衬衫等服装图像进行分类。即使您不理解所有细节也没关系；这只是对完整 TensorFlow 程序的快速概述，详细内容会在您实际操作的同时进行介绍。</p>
<p>使用 Fashion MNIST 数据集，该数据集包含 10 个类别的 70,000 个灰度图像。这些图像以低分辨率（28x28 像素）展示了单件衣物，如下所示：<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/fashion-mnist-sprite.png"
                        alt="" 
                 ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># TensorFlow and tf.keras</span></span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"></span><br><span class="line"><span class="comment"># Helper libraries</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">fashion_mnist = keras.datasets.fashion_mnist</span><br><span class="line">(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()</span><br><span class="line"></span><br><span class="line">class_names = [<span class="string">&#x27;T-shirt/top&#x27;</span>, <span class="string">&#x27;Trouser&#x27;</span>, <span class="string">&#x27;Pullover&#x27;</span>, <span class="string">&#x27;Dress&#x27;</span>, <span class="string">&#x27;Coat&#x27;</span>,<span class="string">&#x27;Sandal&#x27;</span>, <span class="string">&#x27;Shirt&#x27;</span>, <span class="string">&#x27;Sneaker&#x27;</span>, <span class="string">&#x27;Bag&#x27;</span>, <span class="string">&#x27;Ankle boot&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在训练模型之前，我们先浏览一下数据集的格式。以下代码显示训练集中有 60,000 个图像，每个图像由 28 x 28 的像素表示</span></span><br><span class="line">train_images.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同样，训练集中有 60,000 个标签：</span></span><br><span class="line"><span class="built_in">len</span>(train_labels)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个标签都是一个 0 到 9 之间的整数：</span></span><br><span class="line">train_labels</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集中有 10,000 个图像。同样，每个图像都由 28x28 个像素表示：</span></span><br><span class="line">test_images.shape</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试集包含 10,000 个图像标签：</span></span><br><span class="line"><span class="built_in">len</span>(test_labels)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将这些值缩小至 0 到 1 之间，然后将其馈送到神经网络模型。为此，请将这些值除以 255。请务必以相同的方式对训练集和测试集进行预处理：</span></span><br><span class="line">train_images = train_images / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">test_images = test_images / <span class="number">255.0</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>,<span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">25</span>):</span><br><span class="line">    plt.subplot(<span class="number">5</span>,<span class="number">5</span>,i+<span class="number">1</span>)</span><br><span class="line">    plt.xticks([])</span><br><span class="line">    plt.yticks([])</span><br><span class="line">    plt.grid(<span class="literal">False</span>)</span><br><span class="line">    plt.imshow(train_images[i], cmap=plt.cm.binary)</span><br><span class="line">    plt.xlabel(class_names[train_labels[i]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置层</span></span><br><span class="line">model = keras.Sequential([</span><br><span class="line">    keras.layers.Flatten(input_shape=(<span class="number">28</span>, <span class="number">28</span>)),</span><br><span class="line">    keras.layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">    keras.layers.Dense(<span class="number">10</span>)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译模型</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 向模型馈送数据</span></span><br><span class="line">model.fit(train_images, train_labels, epochs=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 评估准确率</span></span><br><span class="line">test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\nTest accuracy:&#x27;</span>, test_acc)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行预测</span></span><br><span class="line">probability_model = tf.keras.Sequential([model, tf.keras.layers.Softmax()])</span><br><span class="line">predictions = probability_model.predict(test_images)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_image</span>(<span class="params">i, predictions_array, true_label, img</span>):</span><br><span class="line">  predictions_array, true_label, img = predictions_array, true_label[i], img[i]</span><br><span class="line">  plt.grid(<span class="literal">False</span>)</span><br><span class="line">  plt.xticks([])</span><br><span class="line">  plt.yticks([])</span><br><span class="line"></span><br><span class="line">  plt.imshow(img, cmap=plt.cm.binary)</span><br><span class="line"></span><br><span class="line">  predicted_label = np.argmax(predictions_array)</span><br><span class="line">  <span class="keyword">if</span> predicted_label == true_label:</span><br><span class="line">    color = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    color = <span class="string">&#x27;red&#x27;</span></span><br><span class="line"></span><br><span class="line">  plt.xlabel(<span class="string">&quot;&#123;&#125; &#123;:2.0f&#125;% (&#123;&#125;)&quot;</span>.<span class="built_in">format</span>(class_names[predicted_label],</span><br><span class="line">                                <span class="number">100</span>*np.<span class="built_in">max</span>(predictions_array),</span><br><span class="line">                                class_names[true_label]),</span><br><span class="line">                                color=color)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_value_array</span>(<span class="params">i, predictions_array, true_label</span>):</span><br><span class="line">  predictions_array, true_label = predictions_array, true_label[i]</span><br><span class="line">  plt.grid(<span class="literal">False</span>)</span><br><span class="line">  plt.xticks(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">  plt.yticks([])</span><br><span class="line">  thisplot = plt.bar(<span class="built_in">range</span>(<span class="number">10</span>), predictions_array, color=<span class="string">&quot;#777777&quot;</span>)</span><br><span class="line">  plt.ylim([<span class="number">0</span>, <span class="number">1</span>])</span><br><span class="line">  predicted_label = np.argmax(predictions_array)</span><br><span class="line"></span><br><span class="line">  thisplot[predicted_label].set_color(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">  thisplot[true_label].set_color(<span class="string">&#x27;blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot the first X test images, their predicted labels, and the true labels.</span></span><br><span class="line"><span class="comment"># Color correct predictions in blue and incorrect predictions in red.</span></span><br><span class="line">num_rows = <span class="number">5</span></span><br><span class="line">num_cols = <span class="number">3</span></span><br><span class="line">num_images = num_rows*num_cols</span><br><span class="line">plt.figure(figsize=(<span class="number">2</span>*<span class="number">2</span>*num_cols, <span class="number">2</span>*num_rows))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_images):</span><br><span class="line">  plt.subplot(num_rows, <span class="number">2</span>*num_cols, <span class="number">2</span>*i+<span class="number">1</span>)</span><br><span class="line">  plot_image(i, predictions[i], test_labels, test_images)</span><br><span class="line">  plt.subplot(num_rows, <span class="number">2</span>*num_cols, <span class="number">2</span>*i+<span class="number">2</span>)</span><br><span class="line">  plot_value_array(i, predictions[i], test_labels)</span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>结果如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Test accuracy: <span class="number">0.8791000247001648</span></span><br></pre></td></tr></table></figure>
<p>显示训练集中的前 25 个图像，并在每个图像下方显示类名称。<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/img_Figure_1.png"
                        alt="" 
                 ></p>
<p>用模型的预测绘制几张图像。请注意，即使置信度很高，模型也可能出错。<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/img_Figure_2.png"
                        alt="" 
                 ></p>
]]></content>
      <tags>
        <tag>Machine Learning</tag>
        <tag>Tensorflow</tag>
        <tag>图像分类</tag>
      </tags>
  </entry>
  <entry>
    <title>jetson nano运行Astra相机</title>
    <url>/2024/11/10/jetson-nano%E8%BF%90%E8%A1%8CAstra%E7%9B%B8%E6%9C%BA/</url>
    <content><![CDATA[<h2 id="astra相机"><a class="markdownIt-Anchor" href="#astra相机"></a> Astra相机</h2>
<p>使用ros-astra-camera包</p>
<ol>
<li>安装libuvc</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/libuvc/libuvc.git</span><br><span class="line"><span class="built_in">cd</span> libuvc</span><br><span class="line"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">cmake .. &amp;&amp; make -j4</span><br><span class="line">sudo make install</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>安装udev</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/ros_ws</span><br><span class="line"><span class="built_in">source</span> ./devel/setup.bash</span><br><span class="line">roscd astra_camera</span><br><span class="line">./scripts/create_udev_rules</span><br><span class="line">sudo udevadm control --reload &amp;&amp; sudo  udevadm trigger</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>编译运行</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">catkin_make</span><br><span class="line"><span class="built_in">source</span> devel/setup.bash</span><br><span class="line">roslaunch astra_camera astra.launch</span><br></pre></td></tr></table></figure>
<h2 id="运行报错"><a class="markdownIt-Anchor" href="#运行报错"></a> 运行报错</h2>
<p>启动相机能够正常启动，但是一到打开depth就报错</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/astra_error.png"
                        alt="image.png" 
                 ></p>
<p>原因是同目录下需要额外的ros_bridge一起编译，使ros环境不使用自带cv_bridge</p>
<p><a class="link"   href="https://github.com/orbbec/ros_astra_camera/issues/189#issuecomment-1687006729" >https://github.com/orbbec/ros_astra_camera/issues/189#issuecomment-1687006729<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <tags>
        <tag>SLAM</tag>
        <tag>RGBD相机</tag>
        <tag>奥比中光</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习-2</title>
    <url>/2021/07/03/python%E5%AD%A6%E4%B9%A0-2/</url>
    <content><![CDATA[<h2 id="日期和时间"><a class="markdownIt-Anchor" href="#日期和时间"></a> 日期和时间</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time  <span class="comment"># 引入time模块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间戳</span></span><br><span class="line">ticks = time.time()</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;当前时间戳为:&quot;</span>, ticks</span><br><span class="line">当前时间戳为: <span class="number">1625322855.8431683</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 时间</span></span><br><span class="line">localtime = time.localtime(time.time())</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;本地时间为 :&quot;</span>, localtime</span><br><span class="line"><span class="comment"># time.struct_time(tm_year=2021, tm_mon=7, tm_mday=3, tm_hour=22, </span></span><br><span class="line"><span class="comment"># tm_min=33, tm_sec=47, tm_wday=5, tm_yday=184, tm_isdst=0)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化时间</span></span><br><span class="line"><span class="comment"># 格式化成2021-07-03 22:44:36形式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())) </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 格式化成Sat Jul 03 22:44:36 2021形式</span></span><br><span class="line"><span class="built_in">print</span>(time.strftime(<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>, time.localtime()))</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 将格式字符串转换为时间戳</span></span><br><span class="line">a = <span class="string">&quot;Sat Jul 03 22:44:36 2021&quot;</span></span><br><span class="line"><span class="built_in">print</span>(time.mktime(time.strptime(a,<span class="string">&quot;%a %b %d %H:%M:%S %Y&quot;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">2021-07-03 22:45:30</span></span><br><span class="line"><span class="string">Sat Jul 03 22:45:30 2021</span></span><br><span class="line"><span class="string">1625323476.0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="日历"><a class="markdownIt-Anchor" href="#日历"></a> 日历</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line">cal = calendar.month(<span class="number">2021</span>, <span class="number">7</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;以下输出2021年7月份的日历:\n&quot;</span>,cal)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">以下输出2021年7月份的日历:</span></span><br><span class="line"><span class="string">      July 2021</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">          1  2  3  4</span></span><br><span class="line"><span class="string"> 5  6  7  8  9 10 11</span></span><br><span class="line"><span class="string">12 13 14 15 16 17 18</span></span><br><span class="line"><span class="string">19 20 21 22 23 24 25</span></span><br><span class="line"><span class="string">26 27 28 29 30 31</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h2 id="函数"><a class="markdownIt-Anchor" href="#函数"></a> 函数</h2>
<p>你可以定义一个由自己想要功能的函数，以下是简单的规则：</p>
<ul>
<li>函数代码块以<code>def</code>关键词开头，后接函数标识符名称和圆括号<code>()</code>。</li>
<li>任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。</li>
<li>函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。</li>
<li>函数内容以冒号起始，并且缩进。</li>
<li><code>return [表达式] </code>结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span>  <span class="title function_">functionname</span>(<span class="params"> parameters </span>):</span><br><span class="line">   <span class="string">&quot;函数_文档字符串&quot;</span></span><br><span class="line">   function_suite</span><br><span class="line">   <span class="keyword">return</span> [expression]</span><br></pre></td></tr></table></figure>
<h4 id="默认参数"><a class="markdownIt-Anchor" href="#默认参数"></a> 默认参数</h4>
<p>调用函数时，默认参数的值如果没有传入，则被认为是默认值。下例会打印默认的age，如果age没有被传入：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> name, age = <span class="number">35</span> </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的字符串&quot;</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;Name: &quot;</span>, name</span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;Age &quot;</span>, age</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printinfo函数</span></span><br><span class="line">printinfo( age=<span class="number">50</span>, name=<span class="string">&quot;miki&quot;</span> )</span><br><span class="line">printinfo( name=<span class="string">&quot;miki&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">Name:  miki</span></span><br><span class="line"><span class="string">Age  50</span></span><br><span class="line"><span class="string">Name:  miki</span></span><br><span class="line"><span class="string">Age  35</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="不定长函数"><a class="markdownIt-Anchor" href="#不定长函数"></a> 不定长函数</h4>
<p>需要一个函数能处理比当初声明时更多的参数。这些参数叫做不定长参数，参数在函数声明时不会命名。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可写函数说明</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">printinfo</span>(<span class="params"> arg1, *vartuple </span>):</span><br><span class="line">   <span class="string">&quot;打印任何传入的参数&quot;</span></span><br><span class="line">   <span class="built_in">print</span> <span class="string">&quot;输出: &quot;</span></span><br><span class="line">   <span class="built_in">print</span> arg1</span><br><span class="line">   <span class="keyword">for</span> var <span class="keyword">in</span> vartuple:</span><br><span class="line">      <span class="built_in">print</span> var</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printinfo 函数</span></span><br><span class="line">printinfo( <span class="number">10</span> )</span><br><span class="line">printinfo( <span class="number">70</span>, <span class="number">60</span>, <span class="number">50</span> )</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">10</span></span><br><span class="line"><span class="string">输出:</span></span><br><span class="line"><span class="string">70</span></span><br><span class="line"><span class="string">60</span></span><br><span class="line"><span class="string">50</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习-3</title>
    <url>/2021/07/05/python%E5%AD%A6%E4%B9%A0-3/</url>
    <content><![CDATA[<h2 id="列表"><a class="markdownIt-Anchor" href="#列表"></a> 列表</h2>
<p>Python中列表是可变的，这是它区别于字符串和元组的最重要的特点，一句话概括即：列表可以修改，而字符串和元组不能。</p>
<p>以下是 Python 中列表的方法：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">list.append(x)</td>
<td style="text-align:left">把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]。</td>
</tr>
<tr>
<td style="text-align:left">list.extend(L)</td>
<td style="text-align:left">通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] = L。</td>
</tr>
<tr>
<td style="text-align:left">list.insert(i, x)</td>
<td style="text-align:left">在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。</td>
</tr>
<tr>
<td style="text-align:left">list.remove(x)</td>
<td style="text-align:left">删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。</td>
</tr>
<tr>
<td style="text-align:left">list.pop([i])</td>
<td style="text-align:left">从列表的指定位置移除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被移除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）</td>
</tr>
<tr>
<td style="text-align:left">list.clear()</td>
<td style="text-align:left">移除列表中的所有项，等于del a[:]。</td>
</tr>
<tr>
<td style="text-align:left">list.index(x)</td>
<td style="text-align:left">返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。</td>
</tr>
<tr>
<td style="text-align:left">list.count(x)</td>
<td style="text-align:left">返回 x 在列表中出现的次数。</td>
</tr>
<tr>
<td style="text-align:left">list.sort()</td>
<td style="text-align:left">对列表中的元素进行排序。</td>
</tr>
<tr>
<td style="text-align:left">list.reverse()</td>
<td style="text-align:left">倒排列表中的元素。</td>
</tr>
<tr>
<td style="text-align:left">list.copy()</td>
<td style="text-align:left">返回列表的浅复制，等于a[:]。</td>
</tr>
</tbody>
</table>
<h2 id="列表推导式"><a class="markdownIt-Anchor" href="#列表推导式"></a> 列表推导式</h2>
<p>列表推导式提供了从序列创建列表的简单途径。通常应用程序将一些操作应用于某个序列的每个元素，用其获得的结果作为生成新列表的元素，或者根据确定的判定条件创建子序列。</p>
<p>每个列表推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的列表。如果希望表达式推导出一个元组，就必须使用括号。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>vec = [<span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="number">3</span>*x <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line"><span class="comment"># [6, 12, 18]</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[x, x**<span class="number">2</span>] <span class="keyword">for</span> x <span class="keyword">in</span> vec]</span><br><span class="line"><span class="comment"># [[2, 4], [4, 16], [6, 36]]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="嵌套列表解析"><a class="markdownIt-Anchor" href="#嵌套列表解析"></a> 嵌套列表解析</h2>
<p>Python的列表还可以嵌套。</p>
<p>以下实例展示了3X4的矩阵列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>matrix = [</span><br><span class="line">     [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">     [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>],</span><br><span class="line">     [<span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>],]</span><br></pre></td></tr></table></figure>
<p>以下实例将3X4的矩阵列表转换为4X3列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>[[row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<p>以下实例也可以使用以下方法来实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>transposed = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        transposed.append([row[i] <span class="keyword">for</span> row <span class="keyword">in</span> matrix])</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>transposed</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<p>另外一种实现方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>transposed = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">     <span class="comment"># the following 3 lines implement the nested listcomp</span></span><br><span class="line">     transposed_row = []</span><br><span class="line">     <span class="keyword">for</span> row <span class="keyword">in</span> matrix:</span><br><span class="line">         transposed_row.append(row[i])</span><br><span class="line">     transposed.append(transposed_row)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>transposed</span><br><span class="line">[[<span class="number">1</span>, <span class="number">5</span>, <span class="number">9</span>], [<span class="number">2</span>, <span class="number">6</span>, <span class="number">10</span>], [<span class="number">3</span>, <span class="number">7</span>, <span class="number">11</span>], [<span class="number">4</span>, <span class="number">8</span>, <span class="number">12</span>]]</span><br></pre></td></tr></table></figure>
<h2 id="文件io"><a class="markdownIt-Anchor" href="#文件io"></a> 文件I/O</h2>
<h3 id="读取键盘输入"><a class="markdownIt-Anchor" href="#读取键盘输入"></a> 读取键盘输入</h3>
<p>Python提供了两个内置函数从标准输入读入一行文本，默认的标准输入是键盘。如下：</p>
<ul>
<li>raw_input</li>
<li>input</li>
</ul>
<h4 id="1-raw_input函数"><a class="markdownIt-Anchor" href="#1-raw_input函数"></a> 1. raw_input函数</h4>
<p>raw_input([prompt]) 函数从标准输入读取一个行，并返回一个字符串（去掉结尾的换行符）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = raw_input(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;你输入的内容是: &quot;</span>, <span class="built_in">str</span></span><br><span class="line"><span class="comment"># 这将提示你输入任意字符串，然后在屏幕上显示相同的字符串。当我输入&quot;Hello Python！&quot;，它的输出如下：</span></span><br><span class="line"><span class="comment"># 请输入：Hello Python！</span></span><br><span class="line"><span class="comment"># 你输入的内容是:  Hello Python！</span></span><br></pre></td></tr></table></figure>
<h4 id="2-input函数"><a class="markdownIt-Anchor" href="#2-input函数"></a> 2. input函数</h4>
<p>input([prompt]) 函数和 raw_input([prompt]) 函数基本类似，但是 input 可以接收一个Python表达式作为输入，并将运算结果返回。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="built_in">input</span>(<span class="string">&quot;请输入：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;你输入的内容是: &quot;</span>, <span class="built_in">str</span></span><br><span class="line"><span class="comment"># 这会产生如下的对应着输入的结果：</span></span><br><span class="line"><span class="comment"># 请输入：[x*5 for x in range(2,10,2)]</span></span><br><span class="line"><span class="comment"># 你输入的内容是:  [10, 20, 30, 40]</span></span><br></pre></td></tr></table></figure>
<h2 id="打开和关闭文件"><a class="markdownIt-Anchor" href="#打开和关闭文件"></a> 打开和关闭文件</h2>
<p>现在，您已经可以向标准输入和输出进行读写。现在，来看看怎么读写实际的数据文件。</p>
<p>Python 提供了必要的函数和方法进行默认情况下的文件基本操作。你可以用 file 对象做大部分的文件操作。</p>
<h4 id="1-open-函数"><a class="markdownIt-Anchor" href="#1-open-函数"></a> 1. open 函数</h4>
<p>你必须先用Python内置的open()函数打开一个文件，创建一个file对象，相关的方法才可以调用它进行读写。</p>
<p>语法：<br />
<code>file object = open(file_name [, access_mode][, buffering])</code><br />
各个参数的细节如下：</p>
<ul>
<li>file_name：file_name变量是一个包含了你要访问的文件名称的字符串值。</li>
<li>access_mode：access_mode决定了打开文件的模式：只读，写入，追加等。所有可取值见如下的完全列表。这个参数是非强制的，默认文件访问模式为只读®。</li>
<li>buffering:如果buffering的值被设为0，就不会有寄存。如果buffering的值取1，访问文件时会寄存行。如果将buffering的值设为大于1的整数，表明了这就是的寄存区的缓冲大小。如果取负值，寄存区的缓冲大小则为系统默认。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;文件名: &quot;</span>, fo.name</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;是否已关闭 : &quot;</span>, fo.closed</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;访问模式 : &quot;</span>, fo.mode</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;末尾是否强制加空格 : &quot;</span>, fo.softspace</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">文件名:  foo.txt</span></span><br><span class="line"><span class="string">是否已关闭 :  False</span></span><br><span class="line"><span class="string">访问模式 :  w</span></span><br><span class="line"><span class="string">末尾是否强制加空格 :  0</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-close方法"><a class="markdownIt-Anchor" href="#2-close方法"></a> 2. close()方法</h4>
<p>File 对象的 close（）方法刷新缓冲区里任何还没写入的信息，并关闭该文件，这之后便不能再进行写入。</p>
<p>当一个文件对象的引用被重新指定给另一个文件时，Python 会关闭之前的文件。用 close（）方法关闭文件是一个很好的习惯。</p>
<h4 id="3-write方法"><a class="markdownIt-Anchor" href="#3-write方法"></a> 3. write()方法</h4>
<p>write()方法可将任何字符串写入一个打开的文件。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。</p>
<p>write()方法不会在字符串的结尾添加换行符(‘\n’)：</p>
<p>语法：<br />
<code>fileObject.write(string)</code><br />
在这里，被传递的参数是要写入到已打开文件的内容。</p>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;w&quot;</span>)</span><br><span class="line">fo.write( <span class="string">&quot;www.runoob.com!\nVery good site!\n&quot;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>
<h4 id="4-read方法"><a class="markdownIt-Anchor" href="#4-read方法"></a> 4. read()方法</h4>
<p>read（）方法从一个打开的文件中读取一个字符串。需要重点注意的是，Python字符串可以是二进制数据，而不是仅仅是文字。</p>
<p>语法：<br />
<code>fileObject.read([count])</code><br />
在这里，被传递的参数是要从已打开文件中读取的字节计数。该方法从文件的开头开始读入，如果没有传入count，它会尝试尽可能多地读取更多的内容，很可能是直到文件的末尾。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开一个文件</span></span><br><span class="line">fo = <span class="built_in">open</span>(<span class="string">&quot;foo.txt&quot;</span>, <span class="string">&quot;r+&quot;</span>)</span><br><span class="line"><span class="built_in">str</span> = fo.read(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;读取的字符串是 : &quot;</span>, <span class="built_in">str</span></span><br><span class="line"><span class="comment"># 关闭打开的文件</span></span><br><span class="line">fo.close()</span><br></pre></td></tr></table></figure>
<p>以上实例输出结果：<br />
<code>读取的字符串是 :  www.runoob</code></p>
<h2 id="重命名和删除文件"><a class="markdownIt-Anchor" href="#重命名和删除文件"></a> 重命名和删除文件</h2>
<p>Python的os模块提供了帮你执行文件处理操作的方法，比如重命名和删除文件。</p>
<p>要使用这个模块，你必须先导入它，然后才可以调用相关的各种功能。</p>
<h4 id="1-rename-方法"><a class="markdownIt-Anchor" href="#1-rename-方法"></a> 1. rename() 方法</h4>
<p>rename() 方法需要两个参数，当前的文件名和新文件名。</p>
<p>语法：<br />
<code>os.rename(current_file_name, new_file_name)</code></p>
<h4 id="2-remove方法"><a class="markdownIt-Anchor" href="#2-remove方法"></a> 2. remove()方法</h4>
<p>你可以用remove()方法删除文件，需要提供要删除的文件名作为参数。</p>
<p>语法：<br />
<code>os.remove(file_name)</code></p>
<h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2>
<h4 id="1-mkdir"><a class="markdownIt-Anchor" href="#1-mkdir"></a> 1. mkdir()</h4>
<p>可以使用os模块的mkdir()方法在当前目录下创建新的目录们。你需要提供一个包含了要创建的目录名称的参数。</p>
<p>语法：<br />
<code>os.mkdir(&quot;newdir&quot;)</code></p>
<h4 id="2-chdir"><a class="markdownIt-Anchor" href="#2-chdir"></a> 2. chdir()</h4>
<p>可以用chdir()方法来改变当前的目录。chdir()方法需要的一个参数是你想设成当前目录的目录名称。</p>
<p>语法：<br />
<code>os.chdir(&quot;newdir&quot;)</code></p>
<h4 id="3-getcwd方法"><a class="markdownIt-Anchor" href="#3-getcwd方法"></a> 3. getcwd()方法：</h4>
<p>getcwd()方法显示当前的工作目录。</p>
<p>语法：<br />
<code>os.getcwd()</code></p>
<h4 id="4-rmdir方法"><a class="markdownIt-Anchor" href="#4-rmdir方法"></a> 4. rmdir()方法</h4>
<p>rmdir()方法删除目录，目录名称以参数传递。<br />
在删除这个目录之前，它的所有内容应该先被清除。</p>
<p>语法：<br />
<code>os.rmdir('dirname')</code></p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>open3d学习记录.md</title>
    <url>/2025/01/19/open3d%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-md/</url>
    <content><![CDATA[<h1 id="open3d学习记录"><a class="markdownIt-Anchor" href="#open3d学习记录"></a> open3d学习记录</h1>
<h2 id="1-安装环境"><a class="markdownIt-Anchor" href="#1-安装环境"></a> 1. 安装环境</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install open3d</span><br></pre></td></tr></table></figure>
<h2 id="2-open3d可视化点云"><a class="markdownIt-Anchor" href="#2-open3d可视化点云"></a> 2. open3d可视化点云</h2>
<p>open3d.visualization类一共提供了四种不同形式的可视化方式：</p>
<ul>
<li>open3d.visualization.Visualizer <br><br />
最基础的可视化方式，提供了可视化窗口的创建、渲染、交互等功能。</li>
<li>open3d.visualization.VisualizerWithEditing <br><br />
有选点功能VisualizerWithEditing.get_picked_points()</li>
<li>open3d.visualization.VisualizerWithKeyCallback <br><br />
可以绑定按键回调函数如：register_mouse_button_callback()、register_key_action_callback()</li>
<li>open3d.visualization.VisualizerWithVertexSelection <br><br />
专门的选点的可视化方式。也可以绑定按键回调函数。<br><br />
self.vis.register_selection_changed_callback(self.selection_changed_callback) <br><br />
self.vis.register_selection_moved_callback(self.selection_moved_callback)</li>
</ul>
<p>注意：run()函数是一个阻塞函数, 最好使用子线程来调用。然后手动刷新窗口。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.vis.update_geometry(self.point_cloud)</span><br><span class="line">self.vis.poll_events()</span><br><span class="line">self.vis.update_renderer()</span><br></pre></td></tr></table></figure>
<h3 id="21-可视化点云控制"><a class="markdownIt-Anchor" href="#21-可视化点云控制"></a> 2.1 可视化点云控制</h3>
<ul>
<li>调整点云大小和渲染方式</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.vis.get_render_option().point_size = POINT_SIZE</span><br><span class="line">self.vis.get_render_option().point_color_option = o3d.visualization.PointColorOption.YCoordinate</span><br></pre></td></tr></table></figure>
<h2 id="3-open3dgui"><a class="markdownIt-Anchor" href="#3-open3dgui"></a> 3. open3d.gui</h2>
<h3 id="31-窗口创建"><a class="markdownIt-Anchor" href="#31-窗口创建"></a> 3.1 窗口创建</h3>
<p>open3d.gui.Application类用于创建和管理GUI应用程序。它提供了一个主事件循环，用于处理用户输入和渲染GUI元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PointCloudVisualizer</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.app = gui.Application.instance</span><br><span class="line">        self.app.initialize()</span><br><span class="line">        self.window = self.app.create_window(<span class="string">&quot;Open3D - PointCloudVisualizer&quot;</span>, <span class="number">1024</span>, <span class="number">768</span>)</span><br><span class="line">        self.SceneWidget = gui.SceneWidget()</span><br><span class="line">        self.window.add_child(self.SceneWidget)</span><br><span class="line">        self.renderer = rendering.Open3DScene(self.window.renderer)</span><br><span class="line">        self.SceneWidget.scene = self.renderer</span><br><span class="line">        self.mat = rendering.MaterialRecord()</span><br><span class="line">        self.mat.base_color = [<span class="number">1.0</span>, <span class="number">0.94</span>, <span class="number">0.96</span>, <span class="number">1.0</span>]</span><br><span class="line">        self.mat.shader = <span class="string">&quot;defaultLit&quot;</span></span><br><span class="line">        self.mat.point_size = <span class="number">5</span> * self.window.scaling</span><br><span class="line">        self.point_cloud = <span class="literal">None</span></span><br><span class="line">        self.init_scene()</span><br><span class="line">        self.SceneWidget.set_on_mouse(self.on_mouse)</span><br></pre></td></tr></table></figure>
<h3 id="32-可视化点云"><a class="markdownIt-Anchor" href="#32-可视化点云"></a> 3.2 可视化点云</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">visualize_point_cloud</span>(<span class="params">self, points</span>):</span><br><span class="line">    <span class="keyword">if</span> points.size == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No points to visualize.&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    self.point_cloud = o3d.geometry.PointCloud()</span><br><span class="line">    self.point_cloud.points = o3d.utility.Vector3dVector(points)</span><br><span class="line">    self.renderer.add_geometry(<span class="string">&quot;PointCloud&quot;</span>, self.point_cloud, self.mat)</span><br><span class="line">    self.update_camera()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">update_camera</span>(<span class="params">self</span>):</span><br><span class="line">    target = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>, self.position_info], dtype=np.float32)</span><br><span class="line">    eye = np.array([<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>], dtype=np.float32)</span><br><span class="line">    up = np.array([<span class="number">0.0</span>, <span class="number">1.0</span>, <span class="number">0.0</span>], dtype=np.float32)</span><br><span class="line">    self.SceneWidget.look_at(eye, target, up)</span><br></pre></td></tr></table></figure>
<h3 id="33-鼠标事件"><a class="markdownIt-Anchor" href="#33-鼠标事件"></a> 3.3 鼠标事件</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">on_mouse</span>(<span class="params">self, event: gui.MouseEvent</span>) -&gt; gui.SceneWidget.EventCallbackResult:</span><br><span class="line">    <span class="keyword">if</span> event.is_modifier_down(gui.KeyModifier.SHIFT) <span class="keyword">and</span> event.is_button_down(gui.MouseButton.LEFT) <span class="keyword">and</span> event.<span class="built_in">type</span>.value == gui.MouseEvent.BUTTON_DOWN:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;pick_points&quot;</span>)</span><br><span class="line">        mouse_x = event.x</span><br><span class="line">        mouse_y = event.y</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;mouse:(<span class="subst">&#123;mouse_x&#125;</span>,<span class="subst">&#123;mouse_y&#125;</span>)&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> gui.SceneWidget.EventCallbackResult.HANDLED</span><br><span class="line">    <span class="keyword">return</span> gui.SceneWidget.EventCallbackResult.IGNORED</span><br></pre></td></tr></table></figure>
<p>但是gui类里面没有提供pick_points()函数。以及没有提供如何从鼠标位置获取点云的索引。</p>
<h3 id="34-运行"><a class="markdownIt-Anchor" href="#34-运行"></a> 3.4 运行</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">    self.app.run()</span><br><span class="line"></span><br><span class="line">viewer.run()</span><br></pre></td></tr></table></figure>
<h2 id="4-tkinter"><a class="markdownIt-Anchor" href="#4-tkinter"></a> 4. tkinter</h2>
<p>tkinter是Python的标准GUI库，用于创建图形用户界面(GUI)应用程序。它提供了一组工具和组件，使开发者能够轻松地创建各种窗口、按钮、文本框、标签等元素。</p>
<h3 id="41-创建窗口"><a class="markdownIt-Anchor" href="#41-创建窗口"></a> 4.1 创建窗口</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.root = tk.Tk()</span><br><span class="line">self.root.geometry(<span class="string">&quot;960x480&quot;</span>)</span><br><span class="line">self.root.title(<span class="string">&quot;Point Cloud Visualizer&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文本框用于显示输出</span></span><br><span class="line">self.output_text = scrolledtext.ScrolledText(self.root, width=<span class="number">100</span>, height=<span class="number">20</span>, </span><br><span class="line">                                            font=(<span class="string">&quot;Courier New&quot;</span>, <span class="number">20</span>),  <span class="comment"># 设置字体</span></span><br><span class="line">                                            bg=<span class="string">&quot;white&quot;</span>,  <span class="comment"># 设置背景色</span></span><br><span class="line">                                            fg=<span class="string">&quot;black&quot;</span>,  <span class="comment"># 设置前景色</span></span><br><span class="line">                                            insertbackground=<span class="string">&#x27;white&#x27;</span>,  <span class="comment"># 光标颜色</span></span><br><span class="line">                                            wrap=tk.WORD)  <span class="comment"># 单词换行</span></span><br><span class="line">self.output_text.pack(side=tk.RIGHT, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 创建按钮</span></span><br><span class="line">self.button = tk.Button(self.root, text=<span class="string">&quot;Start&quot;</span>, command=self.start_visualization)</span><br><span class="line">self.button.pack(side=tk.LEFT, padx=<span class="number">10</span>, pady=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<p>然后按钮可以触发自定的函数，实现功能。</p>
<h3 id="42-绑定按键事件"><a class="markdownIt-Anchor" href="#42-绑定按键事件"></a> 4.2 绑定按键事件</h3>
<p>如<code>self.start_visualization</code>函数，在其中可以绑定按键事件。</p>
]]></content>
      <tags>
        <tag>python</tag>
        <tag>open3d</tag>
        <tag>tkinter</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习-5</title>
    <url>/2021/07/07/python%E5%AD%A6%E4%B9%A0-5/</url>
    <content><![CDATA[<h2 id="cgi编程"><a class="markdownIt-Anchor" href="#cgi编程"></a> CGI编程</h2>
<p>CGI(Common Gateway Interface)，通用网关接口，它是一段程序，运行在服务器上如：HTTP 服务器，提供同客户端 HTML 页面的接口。<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/Cgi01.png"
                        alt="CGI架构图" title="CGI架构图" 
                 ></p>
<h2 id="操作数据库"><a class="markdownIt-Anchor" href="#操作数据库"></a> 操作数据库</h2>
<h4 id="1-pymysql"><a class="markdownIt-Anchor" href="#1-pymysql"></a> 1. pymysql</h4>
<ul>
<li>若出现问题<code>pymysql连接数据库报错TypeError: __init__() takes 1 positi</code><br />
原因：pymsql版本变化，参数名必须写完整</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">conn=pymysql.connect(host=<span class="string">&quot;localhost&quot;</span>,user=<span class="string">&quot;root&quot;</span>,</span><br><span class="line">    password=<span class="string">&quot;123456&quot;</span>,database=<span class="string">&quot;onlinecourse&quot;</span>,charset=<span class="string">&quot;utf8&quot;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>封装pymysql模块</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># databasehandler模块</span></span><br><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DataBaseHandler</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,hostname,username,passwd,db,port,cset=<span class="string">&quot;utf8&quot;</span></span>):</span><br><span class="line">        self.db=pymysql.connect(host=hostname,user=username,password=passwd,database=db,charset=cset,port=port)</span><br><span class="line">        self.cursor = self.db.cursor()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__close__</span>(<span class="params">self</span>):</span><br><span class="line">        self.db.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># select语句</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__sel_exec__</span>(<span class="params">self,sql</span>):</span><br><span class="line">        <span class="comment"># 获取游标</span></span><br><span class="line">        self.cursor=self.db.cursor()</span><br><span class="line">        <span class="comment"># 开启事务</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.cursor.execute(sql)</span><br><span class="line">            data=self.cursor.fetchall()</span><br><span class="line">            <span class="comment"># 提交</span></span><br><span class="line">            self.db.commit()</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="comment"># 回滚</span></span><br><span class="line">            self.db.rollback()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="comment"># 关闭游标</span></span><br><span class="line">            self.cursor.close()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># insert update delete语句</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__not_sel_exec__</span>(<span class="params">self,sql</span>):</span><br><span class="line">        self.cursor=self.db.cursor()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            result=self.cursor.execute(sql)</span><br><span class="line">            self.db.commit()</span><br><span class="line">            <span class="keyword">return</span> result</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            self.db.rollback()</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.cursor.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试文件</span></span><br><span class="line"><span class="keyword">import</span> DataBaseHandler</span><br><span class="line"><span class="comment"># 打开数据库连接</span></span><br><span class="line"><span class="comment"># conn=pymysql.connect(host=&quot;localhost&quot;,user=&quot;root&quot;,password=&quot;123456&quot;,database=&quot;onlinecourse&quot;,charset=&quot;utf8&quot;)</span></span><br><span class="line">db=DataBaseHandler.DataBaseHandler(<span class="string">&quot;localhost&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;123456&quot;</span>,<span class="string">&quot;onlinecourse&quot;</span>,<span class="number">3306</span>)</span><br><span class="line"><span class="comment"># print(cursor.execute(&quot;select * from edu_course_teacher&quot;,None))</span></span><br><span class="line">rs=db.__sel_exec__(<span class="string">&quot;select * from edu_user&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line">rs=db.__sel_exec__(<span class="string">&quot;select * from edu_course_teacher&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(rs)</span><br><span class="line">db.__close__()</span><br></pre></td></tr></table></figure>
<h4 id="2-数据库查询操作"><a class="markdownIt-Anchor" href="#2-数据库查询操作"></a> 2. 数据库查询操作</h4>
<p>Python查询Mysql使用 fetchone() 方法获取单条数据, 使用fetchall() 方法获取多条数据。</p>
<ul>
<li>fetchone(): 该方法获取下一个查询结果集。结果集是一个对象</li>
<li>fetchall():接收全部的返回结果行.</li>
<li>rowcount: 这是一个只读属性，并返回执行execute()方法后影响的行数。</li>
</ul>
<h4 id="3-事务的acid性质"><a class="markdownIt-Anchor" href="#3-事务的acid性质"></a> 3. 事务的ACID性质</h4>
<p>事务机制可以确保数据一致性。<br />
事务应该具有4个属性：原子性、一致性、隔离性、持久性。这四个属性通常称为ACID特性。</p>
<ul>
<li>原子性（atomicity）。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。</li>
<li>一致性（consistency）。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。</li>
<li>隔离性（isolation）。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。</li>
<li>持久性（durability）。持续性也称永久性（permanence），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。</li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Webviz安装记录</title>
    <url>/2024/10/25/webviz/</url>
    <content><![CDATA[<h1 id="webviz"><a class="markdownIt-Anchor" href="#webviz"></a> webviz</h1>
<ul>
<li>
<p>docker 镜像拉取</p>
<ul>
<li>
<p>配置daemon.json</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo gedit /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line"># 内容</span><br><span class="line">&#123;</span><br><span class="line">    &quot;runtimes&quot;: &#123;</span><br><span class="line">        &quot;nvidia&quot;: &#123;</span><br><span class="line">            &quot;path&quot;: &quot;nvidia-container-runtime&quot;,</span><br><span class="line">            &quot;runtimeArgs&quot;: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;registry-mirrors&quot;: [</span><br><span class="line">        &quot;https://mirror.tuna.tsinghua.edu.cn/docker/&quot;,</span><br><span class="line">        &quot;http://hub-mirror.c.163.com&quot;,</span><br><span class="line">        &quot;https://reg-mirror.com&quot;,</span><br><span class="line">        &quot;https://docker.registry.cyou&quot;,</span><br><span class="line">        &quot;https://docker-cf.registry.cyou&quot;,</span><br><span class="line">        &quot;https://dockercf.jsdelivr.fyi&quot;,</span><br><span class="line">        &quot;https://docker.jsdelivr.fyi&quot;,</span><br><span class="line">        &quot;https://dockertest.jsdelivr.fyi&quot;,</span><br><span class="line">        &quot;https://mirror.aliyuncs.com&quot;,</span><br><span class="line">        &quot;https://dockerproxy.com&quot;,</span><br><span class="line">        &quot;https://mirror.baidubce.com&quot;,</span><br><span class="line">        &quot;https://docker.m.daocloud.io&quot;,</span><br><span class="line">        &quot;https://docker.nju.edu.cn&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.sjtug.sjtu.edu.cn&quot;,</span><br><span class="line">        &quot;https://docker.mirrors.ustc.edu.cn&quot;,</span><br><span class="line">        &quot;https://mirror.iscas.ac.cn&quot;,</span><br><span class="line">        &quot;https://docker.rainbond.cc&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 重启docker</span><br><span class="line"></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>docker run -p 8080:8080 cruise/webviz</p>
</li>
</ul>
</li>
<li>
<p>启动rosbridge</p>
<ul>
<li>
<p>首先安装rosbridge</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt install ros-noetic-rosbridge-suite</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>启动</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">roslaunch rosbridge_server rosbridge_websocket.launch</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li>
<p>启动ros程序，确保话题发布到ros中</p>
</li>
<li>
<p>访问webviz</p>
<ul>
<li>
<p>本地访问</p>
<p>打开ws://localhost:8080</p>
</li>
<li>
<p>局域网内访问</p>
<p>使用ip访问</p>
<pre class="highlight"><code class="">192.168.110.158:8080/?rosbridge-websocket-url=ws://192.168.110.158:9090
</code></pre>
</li>
</ul>
</li>
<li>
<p>参考链接</p>
<ul>
<li><a class="link"   href="https://www.codetd.com/en/article/13441634" >https://www.codetd.com/en/article/13441634<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/Adoreuu/article/details/138925628" >https://blog.csdn.net/Adoreuu/article/details/138925628<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://blog.csdn.net/Adoreuu/article/details/138925628" >https://blog.csdn.net/Adoreuu/article/details/138925628<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://webviz.io/app/?demo" >https://webviz.io/app/?demo<i class="fas fa-external-link-alt"></i></a></li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>ROS</tag>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习-6</title>
    <url>/2021/07/07/python%E5%AD%A6%E4%B9%A0-6/</url>
    <content><![CDATA[<h2 id="socket网络编程"><a class="markdownIt-Anchor" href="#socket网络编程"></a> Socket网络编程</h2>
<h4 id="1-socket函数"><a class="markdownIt-Anchor" href="#1-socket函数"></a> 1. socket()函数</h4>
<p>Python 中，我们用 socket（）函数来创建套接字，语法格式如下：<br />
<code>socket.socket([family[, type[, proto]]])</code><br />
参数</p>
<ul>
<li>family: 套接字家族可以使 AF_UNIX 或者 AF_INET。</li>
<li>type: 套接字类型可以根据是面向连接的还是非连接分为 SOCK_STREAM 或 SOCK_DGRAM。</li>
<li>protocol: 一般不填默认为 0。</li>
</ul>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">服务器端套接字</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">s.bind()</td>
<td style="text-align:left">绑定地址（host,port）到套接字， 在 AF_INET下，以元组（host,port）的形式表示地址。</td>
</tr>
<tr>
<td style="text-align:left">s.listen()</td>
<td style="text-align:left">开始 TCP 监听。backlog 指定在拒绝连接之前，操作系统可以挂起的最大连接数量。该值至少为 1，大部分应用程序设为 5 就可以了。</td>
</tr>
<tr>
<td style="text-align:left">s.accept()</td>
<td style="text-align:left">被动接受TCP客户端连接,(阻塞式)等待连接的到来</td>
</tr>
<tr>
<td style="text-align:left">客户端套接字</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">s.connect()</td>
<td style="text-align:left">主动初始化TCP服务器连接，。一般address的格式为元组（hostname,port），如果连接出错，返回socket.error错误。</td>
</tr>
<tr>
<td style="text-align:left">s.connect_ex()</td>
<td style="text-align:left">connect()函数的扩展版本,出错时返回出错码,而不是抛出异常</td>
</tr>
<tr>
<td style="text-align:left">公共用途的套接字函数</td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">s.recv()</td>
<td style="text-align:left">接收 TCP 数据，数据以字符串形式返回，bufsize 指定要接收的最大数据量。flag 提供有关消息的其他信息，通常可以忽略。</td>
</tr>
<tr>
<td style="text-align:left">s.send()</td>
<td style="text-align:left">发送 TCP 数据，将 string 中的数据发送到连接的套接字。返回值是要发送的字节数量，该数量可能小于 string 的字节大小。</td>
</tr>
<tr>
<td style="text-align:left">s.sendall()</td>
<td style="text-align:left">完整发送 TCP 数据。将 string 中的数据发送到连接的套接字，但在返回之前会尝试发送所有数据。成功返回 None，失败则抛出异常。</td>
</tr>
<tr>
<td style="text-align:left">s.recvfrom()</td>
<td style="text-align:left">接收 UDP 数据，与 recv() 类似，但返回值是（data,address）。其中 data 是包含接收数据的字符串，address 是发送数据的套接字地址。</td>
</tr>
<tr>
<td style="text-align:left">s.sendto()</td>
<td style="text-align:left">发送 UDP 数据，将数据发送到套接字，address 是形式为（ipaddr，port）的元组，指定远程地址。返回值是发送的字节数。</td>
</tr>
<tr>
<td style="text-align:left">s.close()</td>
<td style="text-align:left">关闭套接字</td>
</tr>
<tr>
<td style="text-align:left">s.getpeername()</td>
<td style="text-align:left">返回连接套接字的远程地址。返回值通常是元组（ipaddr,port）。</td>
</tr>
<tr>
<td style="text-align:left">s.getsockname()</td>
<td style="text-align:left">返回套接字自己的地址。通常是一个元组(ipaddr,port)</td>
</tr>
<tr>
<td style="text-align:left">s.setsockopt(level,optname,value)</td>
<td style="text-align:left">设置给定套接字选项的值。</td>
</tr>
<tr>
<td style="text-align:left">s.getsockopt(level,optname[.buflen])</td>
<td style="text-align:left">返回套接字选项的值。</td>
</tr>
<tr>
<td style="text-align:left">s.settimeout(timeout)</td>
<td style="text-align:left">设置套接字操作的超时期，timeout是一个浮点数，单位是秒。值为None表示没有超时期。一般，超时期应该在刚创建套接字时设置，因为它们可能用于连接的操作（如connect()）</td>
</tr>
<tr>
<td style="text-align:left">s.gettimeout()</td>
<td style="text-align:left">返回当前超时期的值，单位是秒，如果没有设置超时期，则返回None。</td>
</tr>
<tr>
<td style="text-align:left">s.fileno()</td>
<td style="text-align:left">返回套接字的文件描述符。</td>
</tr>
<tr>
<td style="text-align:left">s.setblocking(flag)</td>
<td style="text-align:left">如果flag为0，则将套接字设为非阻塞模式，否则将套接字设为阻塞模式（默认值）。非阻塞模式下，如果调用recv()没有发现任何数据，或send()调用无法立即发送数据，那么将引起socket.error异常。</td>
</tr>
<tr>
<td style="text-align:left">s.makefile()</td>
<td style="text-align:left">创建一个与该套接字相关连的文件</td>
</tr>
</tbody>
</table>
<h4 id="2-socket编程实例"><a class="markdownIt-Anchor" href="#2-socket编程实例"></a> 2. Socket编程实例</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件名：server.py</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> socket               <span class="comment"># 导入 socket 模块</span></span><br><span class="line"> </span><br><span class="line">s = socket.socket()         <span class="comment"># 创建 socket 对象</span></span><br><span class="line">host = socket.gethostname() <span class="comment"># 获取本地主机名</span></span><br><span class="line">port = <span class="number">12345</span>                <span class="comment"># 设置端口</span></span><br><span class="line">s.bind((host, port))        <span class="comment"># 绑定端口</span></span><br><span class="line"></span><br><span class="line">s.listen(<span class="number">5</span>)                 <span class="comment"># 等待客户端连接</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    conn,addr = s.accept()     <span class="comment"># 建立客户端连接</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data=conn.recv(<span class="number">2048</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;访问地址：&#x27;</span>, addr)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;recive:&#x27;</span>,data.decode()) <span class="comment">#打印接收到的数据</span></span><br><span class="line">        msg=<span class="string">&quot;欢迎访问云间小栈！&quot;</span></span><br><span class="line">        conn.send(msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">    <span class="keyword">except</span> ConnectionResetError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;关闭了正在占线的链接！&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    conn.close()                <span class="comment"># 关闭连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件名：client.py</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> socket               <span class="comment"># 导入 socket 模块</span></span><br><span class="line"> </span><br><span class="line">client = socket.socket()         <span class="comment"># 创建 socket 对象</span></span><br><span class="line">host = socket.gethostname() <span class="comment"># 获取本地主机名</span></span><br><span class="line">port = <span class="number">12345</span>                <span class="comment"># 设置端口号</span></span><br><span class="line"></span><br><span class="line">client.connect((host, port))</span><br><span class="line">msg=<span class="string">&quot;你好云间小栈！&quot;</span></span><br><span class="line">client.send(msg.encode(<span class="string">&quot;utf-8&quot;</span>))</span><br><span class="line">data=client.recv(<span class="number">2048</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;recive:&quot;</span>,data.decode())</span><br><span class="line"></span><br><span class="line">client.close()</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>tensor基础</title>
    <url>/2021/07/24/tensor%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="张量的创建与常用方法"><a class="markdownIt-Anchor" href="#张量的创建与常用方法"></a> 张量的创建与常用方法</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">a1</span><br></pre></td></tr></table></figure>
<pre><code>array([[1, 2, 3],
       [4, 5, 6]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.tensor([a1,a1])</span><br><span class="line">t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[1, 2, 3],
         [4, 5, 6]],

        [[1, 2, 3],
         [4, 5, 6]]], dtype=torch.int32)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3.size()</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([2, 2, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3.ndim</span><br></pre></td></tr></table></figure>
<pre><code>3
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(t3)</span><br></pre></td></tr></table></figure>
<pre><code>2
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3.flatten()</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], dtype=torch.int32)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.tensor([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1.shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 转化为两行，一列的张量</span></span><br><span class="line">t1.reshape(<span class="number">2</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1],
        [2]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1.reshape(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2.reshape([<span class="number">3</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1],
        [2],
        [3]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2.reshape(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3.reshape(<span class="number">12</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6], dtype=torch.int32)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3.reshape(<span class="number">2</span>,<span class="number">6</span>) <span class="comment"># 转换为两行六列的张量</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3, 4, 5, 6],
        [1, 2, 3, 4, 5, 6]], dtype=torch.int32)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.ones([<span class="number">2</span>,<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 1., 1.],
        [1., 1., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.eye(<span class="number">5</span>)  <span class="comment"># 单位矩阵</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 0., 0., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1</span><br><span class="line">torch.diag(t1) <span class="comment"># 不能使用list直接创建对角矩阵</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 0],
        [0, 2]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.rand(<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># rand服从0-1均匀分布</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0.9925, 0.4613, 0.1272],
        [0.6944, 0.3979, 0.4879]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.randn(<span class="number">2</span>,<span class="number">3</span>) <span class="comment"># 服从标准正态分布的张量</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[ 0.7202, -1.3448,  1.1586],
        [-1.3567, -0.6265,  0.6884]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.normal(<span class="number">2</span>,<span class="number">3</span>,size=(<span class="number">2</span>,<span class="number">2</span>)) <span class="comment"># 均值为2，标准差为3的张量  指定正态分布</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[-1.8283,  0.6573],
        [ 0.7957,  4.2425]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.randint(<span class="number">1</span>,<span class="number">10</span>,[<span class="number">2</span>,<span class="number">4</span>]) <span class="comment"># 在1-10之间随机抽取整数，组成两行四列的张量</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[2, 8, 1, 3],
        [4, 6, 9, 5]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.arange(<span class="number">5</span>)  <span class="comment"># 默认每隔1取</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([0, 1, 2, 3, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.arange(<span class="number">1</span>,<span class="number">5</span>,<span class="number">0.5</span>) <span class="comment"># 从1-5 左闭右开 每隔0.5取值一个</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([1.0000, 1.5000, 2.0000, 2.5000, 3.0000, 3.5000, 4.0000, 4.5000])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.linspace(<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>) <span class="comment"># 从1-5 闭区间 等距取三个数</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([1., 3., 5.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.linspace(<span class="number">1</span>,<span class="number">9</span>,<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1.0000, 2.6000, 4.2000, 5.8000, 7.4000, 9.0000])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.empty(<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[8.1717e+20, 2.1274e+23, 8.5032e+20],
        [1.0616e+21, 4.3445e-05, 2.0432e+20]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.full([<span class="number">2</span>,<span class="number">4</span>],<span class="number">2</span>)  <span class="comment"># 两行四列 填充2 的张量</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[2, 2, 2, 2],
        [2, 2, 2, 2]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.full_like(t1,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([2, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.randint_like(t2,<span class="number">1</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([5, 1, 5])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.arange(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1.numpy()</span><br></pre></td></tr></table></figure>
<pre><code>array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10], dtype=int64)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.array(t1)</span><br></pre></td></tr></table></figure>
<pre><code>array([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10], dtype=int64)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1.tolist()</span><br></pre></td></tr></table></figure>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(t1)   <span class="comment"># 一维张量由零维张量组成 二维由一维组成</span></span><br></pre></td></tr></table></figure>
<pre><code>[tensor(1),
 tensor(2),
 tensor(3),
 tensor(4),
 tensor(5),
 tensor(6),
 tensor(7),
 tensor(8),
 tensor(9),
 tensor(10)]
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t11=t1.clone()</span><br><span class="line">t11</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1[<span class="number">0</span>]=<span class="number">200</span></span><br><span class="line"><span class="built_in">print</span>(t1)</span><br><span class="line"><span class="built_in">print</span>(t11)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([200,   2,   3,   4,   5,   6,   7,   8,   9,  10])
tensor([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
</code></pre>
<h2 id="张量的索引-分片-合并以及维度调整"><a class="markdownIt-Anchor" href="#张量的索引-分片-合并以及维度调整"></a> 张量的索引、分片、合并以及维度调整</h2>
<pre><code>张量作为有序的序列，也是具备数值索引的功能，并且基本索引方法和python原生的列表、numpy中的数组基本一致，当然，所不同的是，pytorch中还定义了一种采用函数来进行索引的方式。
而作为pytorch中基本数据类型，张量即具备了列表、数组的基本功能，同时还充当着向量、矩阵、数据框等重要的数据结构，因此pytorch中也设置了非常完备的张量合并与变换的操作
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<h4 id="一维张量索引"><a class="markdownIt-Anchor" href="#一维张量索引"></a> 一维张量索引</h4>
<p>一维张量的索引过程和python原生对象类型的索引一致,[start:end,step]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.arange(<span class="number">1</span>,<span class="number">11</span>)</span><br><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 1,  2,  3,  4,  5,  6,  7,  8,  9, 10])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1[<span class="number">1</span>:<span class="number">8</span>]</span><br></pre></td></tr></table></figure>
<pre><code>tensor([2, 3, 4, 5, 6, 7, 8])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1[<span class="number">1</span>:<span class="number">8</span>:<span class="number">2</span>] <span class="comment"># 索引其中2-9号元素，左闭右开，每隔2个数取一个</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([2, 4, 6, 8])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1[<span class="number">1</span>: :<span class="number">2</span>] <span class="comment"># 从第二个元素开始索引，一直到结尾，并且每隔两个数取一个</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 2,  4,  6,  8, 10])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1[:<span class="number">8</span>:<span class="number">2</span>] <span class="comment"># 第一个元素到第九个元素（不包含）</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 3, 5, 7])
</code></pre>
<p>在张量的索引中，step位必须大于0</p>
<h4 id="二维张量"><a class="markdownIt-Anchor" href="#二维张量"></a> 二维张量</h4>
<p>二维张量可以视为两个一维张量组合而成，在实际的索引过程中，需要用逗号进行分割，分别不表示对哪个一维张量进行索引，以及具体的一维张量的索引</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.arange(<span class="number">1</span>,<span class="number">10</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2[<span class="number">0</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>tensor(2)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2[<span class="number">0</span>,::<span class="number">2</span>]  <span class="comment"># 表示索引第一行、每隔两个元素取一个</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2[::<span class="number">2</span>,::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 3],
        [7, 9]])
</code></pre>
<h4 id="三维张量"><a class="markdownIt-Anchor" href="#三维张量"></a> 三维张量</h4>
<p>即二维张量组成的三维张量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.arange(<span class="number">1</span>,<span class="number">28</span>).reshape(<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[ 1,  2,  3],
         [ 4,  5,  6],
         [ 7,  8,  9]],

        [[10, 11, 12],
         [13, 14, 15],
         [16, 17, 18]],

        [[19, 20, 21],
         [22, 23, 24],
         [25, 26, 27]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3[<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>tensor(14)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3[<span class="number">1</span>,<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>tensor([13, 14, 15])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[10, 11, 12],
        [13, 14, 15],
        [16, 17, 18]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3[<span class="number">1</span>,::<span class="number">2</span>,::<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[10, 12],
        [16, 18]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3.shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([3, 3, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">indices=torch.tensor([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">indices</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2.shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([3, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.index_select(t2,<span class="number">0</span>,indices) <span class="comment"># dim参数为0，代表在shape的第一个维度上索引 </span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[4, 5, 6],
        [7, 8, 9]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.index_select(t2,<span class="number">1</span>,indices) <span class="comment"># dim参数为1，代表在shape的第二个维度上索引</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[2, 3],
        [5, 6],
        [8, 9]])
</code></pre>
<h2 id="tensorview方法"><a class="markdownIt-Anchor" href="#tensorview方法"></a> tensor.view()方法</h2>
<p>.view方法会返回一个类似视图的结果，通过。view方法还可以改变对象结构，生成一个不同结构，但是是“浅拷贝“</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=torch.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">t</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 1, 2],
        [3, 4, 5]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">te=t.view(<span class="number">3</span>,<span class="number">2</span>)    <span class="comment"># 构建一个结构不同但数据一样的“视图”</span></span><br><span class="line">te</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 1],
        [2, 3],
        [4, 5]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t[<span class="number">0</span>]=<span class="number">1</span></span><br><span class="line">t[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 1, 1],
        [1, 4, 5]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">te   </span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 1],
        [1, 1],
        [4, 5]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tr=t.view(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">tr</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[1, 1, 1],
         [1, 4, 5]]])
</code></pre>
<h2 id="张量的分片函数"><a class="markdownIt-Anchor" href="#张量的分片函数"></a> 张量的分片函数</h2>
<h4 id="1-分块-chunk函数"><a class="markdownIt-Anchor" href="#1-分块-chunk函数"></a> 1. 分块 chunk函数</h4>
<p>chunk函数能够按照某维度，对张量进行均匀切分，并返回原张量的视图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.arange(<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8],
        [ 9, 10, 11]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tc=torch.chunk(t2,<span class="number">4</span>,dim=<span class="number">0</span>) <span class="comment"># 在第零个维度上进行四等分</span></span><br><span class="line">tc</span><br></pre></td></tr></table></figure>
<pre><code>(tensor([[0, 1, 2]]),
 tensor([[3, 4, 5]]),
 tensor([[6, 7, 8]]),
 tensor([[ 9, 10, 11]]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tc[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<pre><code>tensor([0, 1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tc[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tc</span><br></pre></td></tr></table></figure>
<pre><code>(tensor([[1, 1, 2]]),
 tensor([[3, 4, 5]]),
 tensor([[6, 7, 8]]),
 tensor([[ 9, 10, 11]]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2.size()  <span class="comment"># dim=0 -&gt; 4   dim=1 -&gt; 3</span></span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([4, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tc=torch.chunk(t2,<span class="number">3</span>,dim=<span class="number">1</span>)</span><br><span class="line">tc</span><br></pre></td></tr></table></figure>
<pre><code>(tensor([[1],
         [3],
         [6],
         [9]]),
 tensor([[ 1],
         [ 4],
         [ 7],
         [10]]),
 tensor([[ 2],
         [ 5],
         [ 8],
         [11]]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tc=torch.chunk(t2,<span class="number">3</span>,dim=<span class="number">0</span>)  <span class="comment"># 当原张量不能均分时，会返回次一级均分的结果</span></span><br><span class="line">tc</span><br></pre></td></tr></table></figure>
<pre><code>(tensor([[1, 1, 2],
         [3, 4, 5]]),
 tensor([[ 6,  7,  8],
         [ 9, 10, 11]]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.chunk(t2,<span class="number">4</span>) <span class="comment"># 默认dim=0</span></span><br></pre></td></tr></table></figure>
<pre><code>(tensor([[1, 1, 2]]),
 tensor([[3, 4, 5]]),
 tensor([[6, 7, 8]]),
 tensor([[ 9, 10, 11]]))
</code></pre>
<h4 id="2拆分split函数"><a class="markdownIt-Anchor" href="#2拆分split函数"></a> 2.拆分：split函数</h4>
<p>split既能进行均分也能进行自定义切分，当然，和chunk函数一样，都是返回视图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.arange(<span class="number">12</span>).reshape(<span class="number">4</span>,<span class="number">3</span>)</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[ 0,  1,  2],
        [ 3,  4,  5],
        [ 6,  7,  8],
        [ 9, 10, 11]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.split(t2,<span class="number">2</span>,<span class="number">0</span>) <span class="comment"># 第二个参数表示切分的序列  第三个参数表示维度</span></span><br></pre></td></tr></table></figure>
<pre><code>(tensor([[0, 1, 2],
         [3, 4, 5]]),
 tensor([[ 6,  7,  8],
         [ 9, 10, 11]]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tc=torch.split(t2,[<span class="number">1</span>,<span class="number">3</span>],<span class="number">0</span>)</span><br><span class="line">tc</span><br></pre></td></tr></table></figure>
<pre><code>(tensor([[0, 1, 2]]),
 tensor([[ 3,  4,  5],
         [ 6,  7,  8],
         [ 9, 10, 11]]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(t2)  <span class="comment"># 序列的和与len()一致</span></span><br></pre></td></tr></table></figure>
<pre><code>4
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tc[<span class="number">1</span>][<span class="number">0</span>]=torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">tc</span><br></pre></td></tr></table></figure>
<pre><code>(tensor([[0, 1, 2]]),
 tensor([[ 1,  2,  3],
         [ 6,  7,  8],
         [ 9, 10, 11]]))
</code></pre>
<h4 id="3拼接"><a class="markdownIt-Anchor" href="#3拼接"></a> 3.拼接</h4>
<p>张量的合并操作类似于列表的追加元素，可以拼接、也可以堆叠</p>
<ul>
<li>拼接函数：cat</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=torch.zeros(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0., 0., 0.],
        [0., 0., 0.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b=torch.ones(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">b</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 1., 1.],
        [1., 1., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=torch.zeros(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">c</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.cat([a,b])</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0., 0., 0.],
        [0., 0., 0.],
        [1., 1., 1.],
        [1., 1., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.cat([a,b],<span class="number">1</span>) <span class="comment"># 按照维度进行拼接，dim默认为0</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0., 0., 0., 1., 1., 1.],
        [0., 0., 0., 1., 1., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.car([a,c],<span class="number">1</span>) <span class="comment"># 形状不匹配时会报错</span></span><br></pre></td></tr></table></figure>
<ul>
<li>堆叠函数：stack<br />
和拼接不同，堆叠不是将元素拆分重组，而是简单的将各参与堆叠的对象分装到一个更高维度的张量里<br />
堆叠要求张量形状都相同</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0., 0., 0.],
        [0., 0., 0.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 1., 1.],
        [1., 1., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0., 0., 0.],
        [0., 0., 0.],
        [0., 0., 0.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.stack([torch.cat([a,c]),torch.cat([b,c])])</span><br><span class="line">t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]],

        [[1., 1., 1.],
         [1., 1., 1.],
         [0., 0., 0.],
         [0., 0., 0.],
         [0., 0., 0.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3.size()</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([2, 5, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.stack([a,b])</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[0., 0., 0.],
         [0., 0., 0.]],

        [[1., 1., 1.],
         [1., 1., 1.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.stack([a,b]).shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([2, 2, 3])
</code></pre>
<h2 id="张量维度变换"><a class="markdownIt-Anchor" href="#张量维度变换"></a> 张量维度变换</h2>
<p>通过reshape方法可以灵活调整张量的形状，在实际使用中往往要使用升维和降维操作<br />
使用squeeze函数进行降维，使用unsqueeze函数进行升维</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=torch.arange(<span class="number">4</span>)</span><br><span class="line">a</span><br></pre></td></tr></table></figure>
<pre><code>tensor([0, 1, 2, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a2=a.reshape(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">a2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 1, 2, 3]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.squeeze(a2).ndim</span><br></pre></td></tr></table></figure>
<pre><code>1
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a2=torch.zeros(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">a2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[[0., 0.]],

         [[0., 0.]]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.unsqueeze(a2,dim=<span class="number">0</span>)  <span class="comment"># 在第1个维度索引上升高一个维度</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[[[0., 0.]],

          [[0., 0.]]]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.unsqueeze(a2,dim=<span class="number">0</span>).shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([1, 1, 2, 1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.unsqueeze(a2,dim=<span class="number">2</span>).shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([1, 2, 1, 1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.unsqueeze(a2,dim=<span class="number">3</span>).shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([1, 2, 1, 1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.unsqueeze(a2,dim=<span class="number">4</span>).shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([1, 2, 1, 2, 1])
</code></pre>
]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>图像分类-识别花朵</title>
    <url>/2021/07/05/%E5%9B%BE%E5%83%8F%E5%88%86%E7%B1%BB-%E8%AF%86%E5%88%AB%E8%8A%B1%E6%9C%B5/</url>
    <content><![CDATA[<h2 id="图像分类-花朵识别"><a class="markdownIt-Anchor" href="#图像分类-花朵识别"></a> 图像分类-花朵识别</h2>
<p>使用TensorFlow官网的image classification 实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> PIL</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tensorflow <span class="keyword">import</span> keras</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras <span class="keyword">import</span> layers</span><br><span class="line"><span class="keyword">from</span> tensorflow.keras.models <span class="keyword">import</span> Sequential</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line">dataset_url = <span class="string">&quot;https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz&quot;</span></span><br><span class="line">data_dir = tf.keras.utils.get_file(<span class="string">&#x27;flower_photos&#x27;</span>, origin=dataset_url, untar=<span class="literal">True</span>)</span><br><span class="line">data_dir = pathlib.Path(data_dir)</span><br><span class="line"></span><br><span class="line">image_count = <span class="built_in">len</span>(<span class="built_in">list</span>(data_dir.glob(<span class="string">&#x27;*/*.jpg&#x27;</span>)))</span><br><span class="line"><span class="built_in">print</span>(image_count)</span><br><span class="line"></span><br><span class="line">roses = <span class="built_in">list</span>(data_dir.glob(<span class="string">&#x27;roses/*&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a dataset</span></span><br><span class="line">batch_size = <span class="number">32</span></span><br><span class="line">img_height = <span class="number">180</span></span><br><span class="line">img_width = <span class="number">180</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># It&#x27;s good practice to use a validation split when developing your model. Let&#x27;s use 80% of the images for training, and 20% for validation.</span></span><br><span class="line">train_ds = tf.keras.preprocessing.image_dataset_from_directory(</span><br><span class="line">  data_dir,</span><br><span class="line">  validation_split=<span class="number">0.2</span>,</span><br><span class="line">  subset=<span class="string">&quot;training&quot;</span>,</span><br><span class="line">  seed=<span class="number">123</span>,</span><br><span class="line">  image_size=(img_height, img_width),</span><br><span class="line">  batch_size=batch_size)</span><br><span class="line"></span><br><span class="line">val_ds = tf.keras.preprocessing.image_dataset_from_directory(</span><br><span class="line">  data_dir,</span><br><span class="line">  validation_split=<span class="number">0.2</span>,</span><br><span class="line">  subset=<span class="string">&quot;validation&quot;</span>,</span><br><span class="line">  seed=<span class="number">123</span>,</span><br><span class="line">  image_size=(img_height, img_width),</span><br><span class="line">  batch_size=batch_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># You can find the class names in the class_names attribute on these datasets. These correspond to the directory names in alphabetical order.</span></span><br><span class="line">class_names = train_ds.class_names</span><br><span class="line"><span class="built_in">print</span>(class_names)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Visualize the data</span></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> images, labels <span class="keyword">in</span> train_ds.take(<span class="number">1</span>):</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i + <span class="number">1</span>)</span><br><span class="line">    plt.imshow(images[i].numpy().astype(<span class="string">&quot;uint8&quot;</span>))</span><br><span class="line">    plt.title(class_names[labels[i]])</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> image_batch, labels_batch <span class="keyword">in</span> train_ds:</span><br><span class="line">  <span class="built_in">print</span>(image_batch.shape)</span><br><span class="line">  <span class="built_in">print</span>(labels_batch.shape)</span><br><span class="line">  <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">AUTOTUNE = tf.data.AUTOTUNE</span><br><span class="line"></span><br><span class="line">train_ds = train_ds.cache().shuffle(<span class="number">1000</span>).prefetch(buffer_size=AUTOTUNE)</span><br><span class="line">val_ds = val_ds.cache().prefetch(buffer_size=AUTOTUNE)</span><br><span class="line"></span><br><span class="line">normalization_layer = layers.experimental.preprocessing.Rescaling(<span class="number">1.</span>/<span class="number">255</span>)</span><br><span class="line"></span><br><span class="line">normalized_ds = train_ds.<span class="built_in">map</span>(<span class="keyword">lambda</span> x, y: (normalization_layer(x), y))</span><br><span class="line">image_batch, labels_batch = <span class="built_in">next</span>(<span class="built_in">iter</span>(normalized_ds))</span><br><span class="line">first_image = image_batch[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># Notice the pixels values are now in `[0,1]`.</span></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(first_image), np.<span class="built_in">max</span>(first_image))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create the model</span></span><br><span class="line"></span><br><span class="line">num_classes = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">  layers.experimental.preprocessing.Rescaling(<span class="number">1.</span>/<span class="number">255</span>, input_shape=(img_height, img_width, <span class="number">3</span>)),</span><br><span class="line">  layers.Conv2D(<span class="number">16</span>, <span class="number">3</span>, padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.MaxPooling2D(),</span><br><span class="line">  layers.Conv2D(<span class="number">32</span>, <span class="number">3</span>, padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.MaxPooling2D(),</span><br><span class="line">  layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.MaxPooling2D(),</span><br><span class="line">  layers.Flatten(),</span><br><span class="line">  layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.Dense(num_classes)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile the model</span></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Model summary</span></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">epochs=<span class="number">10</span></span><br><span class="line">history = model.fit(</span><br><span class="line">  train_ds,</span><br><span class="line">  validation_data=val_ds,</span><br><span class="line">  epochs=epochs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Visualize training results</span></span><br><span class="line">acc = history.history[<span class="string">&#x27;accuracy&#x27;</span>]</span><br><span class="line">val_acc = history.history[<span class="string">&#x27;val_accuracy&#x27;</span>]</span><br><span class="line"></span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">epochs_range = <span class="built_in">range</span>(epochs)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(epochs_range, acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.plot(epochs_range, val_acc, label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(epochs_range, loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(epochs_range, val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data_augmentation = keras.Sequential(</span><br><span class="line">  [</span><br><span class="line">    layers.experimental.preprocessing.RandomFl(<span class="string">&quot;horizontal&quot;</span>, input_shape=(img_height, img_width,<span class="number">3</span>)),</span><br><span class="line">    layers.experimental.preprocessing.RandomRotation(<span class="number">0.1</span>),</span><br><span class="line">    layers.experimental.preprocessing.RandomZoom(<span class="number">0.1</span>),</span><br><span class="line">  ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"><span class="keyword">for</span> images, _ <span class="keyword">in</span> train_ds.take(<span class="number">1</span>):</span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">    augmented_images = data_augmentation(images)</span><br><span class="line">    ax = plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i + <span class="number">1</span>)</span><br><span class="line">    plt.imshow(augmented_images[<span class="number">0</span>].numpy().astype(<span class="string">&quot;uint8&quot;</span>))</span><br><span class="line">    plt.axis(<span class="string">&quot;off&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model = Sequential([</span><br><span class="line">  data_augmentation,</span><br><span class="line">  layers.experimental.preprocessing.Rescaling(<span class="number">1.</span>/<span class="number">255</span>),</span><br><span class="line">  layers.Conv2D(<span class="number">16</span>, <span class="number">3</span>, padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.MaxPooling2D(),</span><br><span class="line">  layers.Conv2D(<span class="number">32</span>, <span class="number">3</span>, padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.MaxPooling2D(),</span><br><span class="line">  layers.Conv2D(<span class="number">64</span>, <span class="number">3</span>, padding=<span class="string">&#x27;same&#x27;</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.MaxPooling2D(),</span><br><span class="line">  layers.Dropout(<span class="number">0.2</span>),</span><br><span class="line">  layers.Flatten(),</span><br><span class="line">  layers.Dense(<span class="number">128</span>, activation=<span class="string">&#x27;relu&#x27;</span>),</span><br><span class="line">  layers.Dense(num_classes)</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(optimizer=<span class="string">&#x27;adam&#x27;</span>,</span><br><span class="line">              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=<span class="literal">True</span>),</span><br><span class="line">              metrics=[<span class="string">&#x27;accuracy&#x27;</span>])</span><br><span class="line"></span><br><span class="line">model.summary()</span><br><span class="line"></span><br><span class="line">epochs = <span class="number">15</span></span><br><span class="line">history = model.fit(</span><br><span class="line">  train_ds,</span><br><span class="line">  validation_data=val_ds,</span><br><span class="line">  epochs=epochs</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">acc = history.history[<span class="string">&#x27;accuracy&#x27;</span>]</span><br><span class="line">val_acc = history.history[<span class="string">&#x27;val_accuracy&#x27;</span>]</span><br><span class="line"></span><br><span class="line">loss = history.history[<span class="string">&#x27;loss&#x27;</span>]</span><br><span class="line">val_loss = history.history[<span class="string">&#x27;val_loss&#x27;</span>]</span><br><span class="line"></span><br><span class="line">epochs_range = <span class="built_in">range</span>(epochs)</span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">8</span>))</span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">plt.plot(epochs_range, acc, label=<span class="string">&#x27;Training Accuracy&#x27;</span>)</span><br><span class="line">plt.plot(epochs_range, val_acc, label=<span class="string">&#x27;Validation Accuracy&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;lower right&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Accuracy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">plt.plot(epochs_range, loss, label=<span class="string">&#x27;Training Loss&#x27;</span>)</span><br><span class="line">plt.plot(epochs_range, val_loss, label=<span class="string">&#x27;Validation Loss&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;upper right&#x27;</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;Training and Validation Loss&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sunflower_url = &quot;https://storage.googleapis.com/download.tensorflow.org/example_images/592px-Red_sunflower.jpg&quot;</span></span><br><span class="line"><span class="comment"># sunflower_path = tf.keras.utils.get_file(&#x27;Red_sunflower&#x27;, origin=sunflower_url)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># img = keras.preprocessing.image.load_img(</span></span><br><span class="line"><span class="comment">#     sunflower_path, target_size=(img_height, img_width)</span></span><br><span class="line"><span class="comment"># )</span></span><br><span class="line"><span class="comment"># img_array = keras.preprocessing.image.img_to_array(img)</span></span><br><span class="line"><span class="comment"># img_array = tf.expand_dims(img_array, 0) # Create a batch</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># predictions = model.predict(img_array)</span></span><br><span class="line"><span class="comment"># score = tf.nn.softmax(predictions[0])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(</span></span><br><span class="line"><span class="comment">#     &quot;This image most likely belongs to &#123;&#125; with a &#123;:.2f&#125; percent confidence.&quot;</span></span><br><span class="line"><span class="comment">#     .format(class_names[np.argmax(score)], 100 * np.max(score))</span></span><br><span class="line"><span class="comment"># )</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Downloading data <span class="keyword">from</span> https://storage.googleapis.com/download.tensorflow.org/example_images/flower_photos.tgz</span><br><span class="line"><span class="number">228818944</span>/<span class="number">228813984</span> [==============================] - 1s 0us/step</span><br><span class="line"><span class="number">3670</span></span><br><span class="line">Found <span class="number">3670</span> files belonging to <span class="number">5</span> classes.</span><br><span class="line">Using <span class="number">2936</span> files <span class="keyword">for</span> training.</span><br><span class="line">Found <span class="number">3670</span> files belonging to <span class="number">5</span> classes.</span><br><span class="line">Using <span class="number">734</span> files <span class="keyword">for</span> validation.</span><br><span class="line">[<span class="string">&#x27;daisy&#x27;</span>, <span class="string">&#x27;dandelion&#x27;</span>, <span class="string">&#x27;roses&#x27;</span>, <span class="string">&#x27;sunflowers&#x27;</span>, <span class="string">&#x27;tulips&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/image_classification_roses1.png"
                        alt="" 
                 ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">32</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">3</span>)</span><br><span class="line">(<span class="number">32</span>,)</span><br><span class="line"><span class="number">0.0</span> <span class="number">0.9994554</span></span><br><span class="line"></span><br><span class="line">Model: <span class="string">&quot;sequential&quot;</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">rescaling_1 (Rescaling)      (<span class="literal">None</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">3</span>)       <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d (Conv2D)              (<span class="literal">None</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">16</span>)      <span class="number">448</span>       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d (MaxPooling2D) (<span class="literal">None</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">16</span>)        <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_1 (Conv2D)            (<span class="literal">None</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">32</span>)        <span class="number">4640</span>      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_1 (MaxPooling2 (<span class="literal">None</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">32</span>)        <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_2 (Conv2D)            (<span class="literal">None</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">64</span>)        <span class="number">18496</span>     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_2 (MaxPooling2 (<span class="literal">None</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">64</span>)        <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten (Flatten)            (<span class="literal">None</span>, <span class="number">30976</span>)             <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense (Dense)                (<span class="literal">None</span>, <span class="number">128</span>)               <span class="number">3965056</span>   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_1 (Dense)              (<span class="literal">None</span>, <span class="number">5</span>)                 <span class="number">645</span>       </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">3</span>,<span class="number">989</span>,<span class="number">285</span></span><br><span class="line">Trainable params: <span class="number">3</span>,<span class="number">989</span>,<span class="number">285</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line"></span><br><span class="line">Epoch <span class="number">1</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 35s 35ms/step - loss: <span class="number">1.2843</span> - accuracy: <span class="number">0.4567</span> - val_loss: <span class="number">1.0978</span> - val_accuracy: <span class="number">0.5327</span></span><br><span class="line">Epoch <span class="number">2</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 21ms/step - loss: <span class="number">0.9808</span> - accuracy: <span class="number">0.6151</span> - val_loss: <span class="number">0.9376</span> - val_accuracy: <span class="number">0.6199</span></span><br><span class="line">Epoch <span class="number">3</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 20ms/step - loss: <span class="number">0.7793</span> - accuracy: <span class="number">0.6941</span> - val_loss: <span class="number">0.9825</span> - val_accuracy: <span class="number">0.6213</span></span><br><span class="line">Epoch <span class="number">4</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 20ms/step - loss: <span class="number">0.5839</span> - accuracy: <span class="number">0.7796</span> - val_loss: <span class="number">0.9078</span> - val_accuracy: <span class="number">0.6526</span></span><br><span class="line">Epoch <span class="number">5</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 20ms/step - loss: <span class="number">0.3918</span> - accuracy: <span class="number">0.8556</span> - val_loss: <span class="number">0.9262</span> - val_accuracy: <span class="number">0.6553</span></span><br><span class="line">Epoch <span class="number">6</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 20ms/step - loss: <span class="number">0.2278</span> - accuracy: <span class="number">0.9220</span> - val_loss: <span class="number">1.1121</span> - val_accuracy: <span class="number">0.6431</span></span><br><span class="line">Epoch <span class="number">7</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 20ms/step - loss: <span class="number">0.1672</span> - accuracy: <span class="number">0.9475</span> - val_loss: <span class="number">1.3076</span> - val_accuracy: <span class="number">0.6362</span></span><br><span class="line">Epoch <span class="number">8</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 20ms/step - loss: <span class="number">0.0641</span> - accuracy: <span class="number">0.9837</span> - val_loss: <span class="number">1.4835</span> - val_accuracy: <span class="number">0.6458</span></span><br><span class="line">Epoch <span class="number">9</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 20ms/step - loss: <span class="number">0.0231</span> - accuracy: <span class="number">0.9939</span> - val_loss: <span class="number">1.6968</span> - val_accuracy: <span class="number">0.6635</span></span><br><span class="line">Epoch <span class="number">10</span>/<span class="number">10</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 20ms/step - loss: <span class="number">0.0162</span> - accuracy: <span class="number">0.9986</span> - val_loss: <span class="number">1.7977</span> - val_accuracy: <span class="number">0.6635</span></span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/image_classification_rose2.png"
                        alt="" 
                 ></p>
<p>过度拟合通常发生在有少量训练示例的情况下。数据增强采用的方法是从现有示例中生成额外的训练数据，方法是使用随机变换对它们进行增强，从而生成外观可信的图像。这有助于将模型暴露于数据的更多方面，并更好地概括。</p>
<p>您将使用tf.keras.layers.experimental.preprocessing中的层来实现数据扩充。这些可以像其他层一样包含在模型中，并在GPU上运行。<br />
<img  
                       lazyload
                       alt="image"
                       data-src="/images/image_classification_flower1.png"
                        alt="" 
                 ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Model: <span class="string">&quot;sequential_2&quot;</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line">Layer (<span class="built_in">type</span>)                 Output Shape              Param <span class="comment">#   </span></span><br><span class="line">=================================================================</span><br><span class="line">sequential_1 (Sequential)    (<span class="literal">None</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">3</span>)       <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">rescaling_2 (Rescaling)      (<span class="literal">None</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">3</span>)       <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_3 (Conv2D)            (<span class="literal">None</span>, <span class="number">180</span>, <span class="number">180</span>, <span class="number">16</span>)      <span class="number">448</span>       </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_3 (MaxPooling2 (<span class="literal">None</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">16</span>)        <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_4 (Conv2D)            (<span class="literal">None</span>, <span class="number">90</span>, <span class="number">90</span>, <span class="number">32</span>)        <span class="number">4640</span>      </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_4 (MaxPooling2 (<span class="literal">None</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">32</span>)        <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">conv2d_5 (Conv2D)            (<span class="literal">None</span>, <span class="number">45</span>, <span class="number">45</span>, <span class="number">64</span>)        <span class="number">18496</span>     </span><br><span class="line">_________________________________________________________________</span><br><span class="line">max_pooling2d_5 (MaxPooling2 (<span class="literal">None</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">64</span>)        <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dropout (Dropout)            (<span class="literal">None</span>, <span class="number">22</span>, <span class="number">22</span>, <span class="number">64</span>)        <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">flatten_1 (Flatten)          (<span class="literal">None</span>, <span class="number">30976</span>)             <span class="number">0</span>         </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_2 (Dense)              (<span class="literal">None</span>, <span class="number">128</span>)               <span class="number">3965056</span>   </span><br><span class="line">_________________________________________________________________</span><br><span class="line">dense_3 (Dense)              (<span class="literal">None</span>, <span class="number">5</span>)                 <span class="number">645</span>       </span><br><span class="line">=================================================================</span><br><span class="line">Total params: <span class="number">3</span>,<span class="number">989</span>,<span class="number">285</span></span><br><span class="line">Trainable params: <span class="number">3</span>,<span class="number">989</span>,<span class="number">285</span></span><br><span class="line">Non-trainable params: <span class="number">0</span></span><br><span class="line">_________________________________________________________________</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Epoch <span class="number">1</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 3s 26ms/step - loss: <span class="number">1.3763</span> - accuracy: <span class="number">0.4135</span> - val_loss: <span class="number">1.0668</span> - val_accuracy: <span class="number">0.5409</span></span><br><span class="line">Epoch <span class="number">2</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">1.0724</span> - accuracy: <span class="number">0.5576</span> - val_loss: <span class="number">1.1257</span> - val_accuracy: <span class="number">0.5613</span></span><br><span class="line">Epoch <span class="number">3</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.9417</span> - accuracy: <span class="number">0.6345</span> - val_loss: <span class="number">1.0127</span> - val_accuracy: <span class="number">0.6226</span></span><br><span class="line">Epoch <span class="number">4</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.8745</span> - accuracy: <span class="number">0.6587</span> - val_loss: <span class="number">0.9076</span> - val_accuracy: <span class="number">0.6417</span></span><br><span class="line">Epoch <span class="number">5</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.8245</span> - accuracy: <span class="number">0.6897</span> - val_loss: <span class="number">0.8622</span> - val_accuracy: <span class="number">0.6717</span></span><br><span class="line">Epoch <span class="number">6</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.7905</span> - accuracy: <span class="number">0.6928</span> - val_loss: <span class="number">0.8115</span> - val_accuracy: <span class="number">0.6880</span></span><br><span class="line">Epoch <span class="number">7</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.7479</span> - accuracy: <span class="number">0.7156</span> - val_loss: <span class="number">0.7976</span> - val_accuracy: <span class="number">0.6839</span></span><br><span class="line">Epoch <span class="number">8</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.7455</span> - accuracy: <span class="number">0.7197</span> - val_loss: <span class="number">0.7919</span> - val_accuracy: <span class="number">0.6880</span></span><br><span class="line">Epoch <span class="number">9</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 25ms/step - loss: <span class="number">0.6901</span> - accuracy: <span class="number">0.7330</span> - val_loss: <span class="number">0.7831</span> - val_accuracy: <span class="number">0.7057</span></span><br><span class="line">Epoch <span class="number">10</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.6729</span> - accuracy: <span class="number">0.7422</span> - val_loss: <span class="number">0.9560</span> - val_accuracy: <span class="number">0.6444</span></span><br><span class="line">Epoch <span class="number">11</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.6511</span> - accuracy: <span class="number">0.7493</span> - val_loss: <span class="number">0.7521</span> - val_accuracy: <span class="number">0.6989</span></span><br><span class="line">Epoch <span class="number">12</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.6225</span> - accuracy: <span class="number">0.7667</span> - val_loss: <span class="number">0.7420</span> - val_accuracy: <span class="number">0.7125</span></span><br><span class="line">Epoch <span class="number">13</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 25ms/step - loss: <span class="number">0.5907</span> - accuracy: <span class="number">0.7769</span> - val_loss: <span class="number">0.7644</span> - val_accuracy: <span class="number">0.6962</span></span><br><span class="line">Epoch <span class="number">14</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 24ms/step - loss: <span class="number">0.5704</span> - accuracy: <span class="number">0.7847</span> - val_loss: <span class="number">0.7330</span> - val_accuracy: <span class="number">0.7343</span></span><br><span class="line">Epoch <span class="number">15</span>/<span class="number">15</span></span><br><span class="line"><span class="number">92</span>/<span class="number">92</span> [==============================] - 2s 25ms/step - loss: <span class="number">0.5624</span> - accuracy: <span class="number">0.7902</span> - val_loss: <span class="number">0.7804</span> - val_accuracy: <span class="number">0.7003</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/image_classification_flower2.png"
                        alt="" 
                 ></p>
]]></content>
      <tags>
        <tag>图像分类</tag>
        <tag>tensorflow</tag>
        <tag>machine learning</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习-4</title>
    <url>/2021/07/06/python%E5%AD%A6%E4%B9%A0-4/</url>
    <content><![CDATA[<h2 id="面向对象"><a class="markdownIt-Anchor" href="#面向对象"></a> 面向对象</h2>
<p>面向对象技术简介</p>
<ul>
<li>类(Class): 用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。</li>
<li>类变量：类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。</li>
<li>数据成员：类变量或者实例变量, 用于处理类及其实例对象的相关的数据。</li>
<li>方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。</li>
<li>局部变量：定义在方法中的变量，只作用于当前实例的类。</li>
<li>实例变量：在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。</li>
<li>继承：即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。</li>
<li>实例化：创建一个类的实例，类的具体对象。</li>
<li>方法：类中定义的函数。</li>
<li>对象：通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。</li>
</ul>
<h4 id="1-创建类"><a class="markdownIt-Anchor" href="#1-创建类"></a> 1. 创建类</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>:</span><br><span class="line">   <span class="string">&#x27;类的帮助信息&#x27;</span>   <span class="comment">#类文档字符串</span></span><br><span class="line">   class_suite  <span class="comment">#类体</span></span><br></pre></td></tr></table></figure>
<p>以下是一个简单的 Python 类的例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span>:</span><br><span class="line">   <span class="string">&#x27;所有员工的基类&#x27;</span></span><br><span class="line">   empCount = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, name, salary</span>):</span><br><span class="line">      self.name = name</span><br><span class="line">      self.salary = salary</span><br><span class="line">      Employee.empCount += <span class="number">1</span></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">displayCount</span>(<span class="params">self</span>):</span><br><span class="line">     <span class="built_in">print</span> <span class="string">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">displayEmployee</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;Name : &quot;</span>, self.name,  <span class="string">&quot;, Salary: &quot;</span>, self.salary</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。与Java不同，Java类的实例中的变量都是不共享的，除非声明为static。</p>
</li>
<li>
<p>第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法</p>
</li>
<li>
<p>self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。例如t.prt(),self在python语句中传入的就是t。</p>
</li>
</ul>
<h4 id="2-类的继承"><a class="markdownIt-Anchor" href="#2-类的继承"></a> 2. 类的继承</h4>
<p>面向对象的编程带来的主要好处之一是代码的重用，实现这种重用的方法之一是通过继承机制。<br />
通过继承创建的新类称为子类或派生类，被继承的类称为基类、父类或超类。</p>
<p>继承语法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">派生类名</span>(<span class="title class_ inherited__">基类名</span>)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>在python中继承中的一些特点：</p>
<ul>
<li>1、如果在子类中需要父类的构造方法就需要显式的调用父类的构造方法，或者不重写父类的构造方法。详细说明可查看： python 子类继承父类构造函数说明。</li>
<li>2、在调用基类的方法时，需要加上基类的类名前缀，且需要带上 self 参数变量。区别在于类中调用普通函数时并不需要带上 self 参数</li>
<li>3、Python 总是首先查找对应类型的方法，如果它不能在派生类中找到对应的方法，它才开始到基类中逐个查找。（先在本类中查找调用的方法，找不到才去基类中找）。<br />
如果在继承元组中列了一个以上的类，那么它就被称作&quot;多重继承&quot; 。</li>
</ul>
<p>语法：<br />
派生类的声明，与他们的父类类似，继承的基类列表跟在类名之后，如下所示：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">SubClassName</span> (ParentClass1[, ParentClass2, ...]):</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:        <span class="comment"># 定义父类</span></span><br><span class="line">   parentAttr = <span class="number">100</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;调用父类构造函数&quot;</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">parentMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;调用父类方法&#x27;</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">setAttr</span>(<span class="params">self, attr</span>):</span><br><span class="line">      Parent.parentAttr = attr</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">getAttr</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;父类属性 :&quot;</span>, Parent.parentAttr</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>): <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&quot;调用子类构造方法&quot;</span></span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">childMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;调用子类方法&#x27;</span></span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 实例化子类</span></span><br><span class="line">c.childMethod()      <span class="comment"># 调用子类的方法</span></span><br><span class="line">c.parentMethod()     <span class="comment"># 调用父类方法</span></span><br><span class="line">c.setAttr(<span class="number">200</span>)       <span class="comment"># 再次调用父类的方法 - 设置属性值</span></span><br><span class="line">c.getAttr()          <span class="comment"># 再次调用父类的方法 - 获取属性值</span></span><br></pre></td></tr></table></figure>
<h4 id="3-方法重写"><a class="markdownIt-Anchor" href="#3-方法重写"></a> 3. 方法重写</h4>
<p>如果你的父类方法的功能不能满足你的需求，你可以在子类重写你父类的方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span>:        <span class="comment"># 定义父类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;调用父类方法&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span>(<span class="title class_ inherited__">Parent</span>): <span class="comment"># 定义子类</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">myMethod</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="built_in">print</span> <span class="string">&#x27;调用子类方法&#x27;</span></span><br><span class="line"> </span><br><span class="line">c = Child()          <span class="comment"># 子类实例</span></span><br><span class="line">c.myMethod()         <span class="comment"># 子类调用重写方法</span></span><br></pre></td></tr></table></figure>
<h4 id="4-类属性与方法"><a class="markdownIt-Anchor" href="#4-类属性与方法"></a> 4. 类属性与方法</h4>
<ul>
<li>
<p>类的私有属性<br />
__private_attrs：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 self.__private_attrs。</p>
</li>
<li>
<p>类的方法<br />
在类的内部，使用 def 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self,且为第一个参数</p>
</li>
<li>
<p>类的私有方法<br />
__private_method：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 self.__private_methods</p>
</li>
</ul>
<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">JustCounter</span>:</span><br><span class="line">    __secretCount = <span class="number">0</span>  <span class="comment"># 私有变量</span></span><br><span class="line">    publicCount = <span class="number">0</span>    <span class="comment"># 公开变量</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">count</span>(<span class="params">self</span>):</span><br><span class="line">        self.__secretCount += <span class="number">1</span></span><br><span class="line">        self.publicCount += <span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span> self.__secretCount</span><br><span class="line"> </span><br><span class="line">counter = JustCounter()</span><br><span class="line">counter.count()</span><br><span class="line">counter.count()</span><br><span class="line"><span class="built_in">print</span> counter.publicCount</span><br><span class="line"><span class="built_in">print</span> counter.__secretCount  <span class="comment"># 报错，实例不能访问私有变量</span></span><br></pre></td></tr></table></figure>
<p>单下划线、双下划线、头尾双下划线说明：</p>
<ul>
<li>
<p><em>foo</em>_: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong>init</strong>() 之类的。</p>
</li>
<li>
<p>_foo: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *</p>
</li>
<li>
<p>__foo: 双下划线的表示的是私有类型(private)的变量, 只能是允许这个类本身进行访问了。</p>
</li>
</ul>
<h4 id="5-运算符重载"><a class="markdownIt-Anchor" href="#5-运算符重载"></a> 5. 运算符重载</h4>
<p>Python同样支持运算符重载。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Vector</span>:</span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b</span>):</span><br><span class="line">      self.a = a</span><br><span class="line">      self.b = b</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__str__</span>(<span class="params">self</span>):</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">__add__</span>(<span class="params">self,other</span>):</span><br><span class="line">      <span class="keyword">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class="line"> </span><br><span class="line">v1 = Vector(<span class="number">2</span>,<span class="number">10</span>)</span><br><span class="line">v2 = Vector(<span class="number">5</span>,-<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span> v1 + v2</span><br><span class="line"><span class="comment"># 以上代码执行结果如下所示:</span></span><br><span class="line"><span class="comment"># Vector(7,8)</span></span><br></pre></td></tr></table></figure>
<h2 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h2>
<h4 id="1-rematch函数"><a class="markdownIt-Anchor" href="#1-rematch函数"></a> 1. re.match函数</h4>
<p>re.match 尝试从字符串的起始位置匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p>
<p>函数语法：<br />
<code>re.match(pattern, string, flags=0)</code></p>
<h4 id="2-research方法"><a class="markdownIt-Anchor" href="#2-research方法"></a> 2. re.search方法</h4>
<p>re.search 扫描整个字符串并返回第一个成功的匹配。</p>
<p>函数语法：<br />
<code>re.search(pattern, string, flags=0)</code></p>
<h6 id="rematch与research的区别"><a class="markdownIt-Anchor" href="#rematch与research的区别"></a> re.match与re.search的区别</h6>
<p>re.match只匹配字符串的开始，如果字符串开始不符合正则表达式，则匹配失败，函数返回None；而re.search匹配整个字符串，直到找到一个匹配。</p>
<h4 id="3-检索和替换"><a class="markdownIt-Anchor" href="#3-检索和替换"></a> 3. 检索和替换</h4>
<p>Python 的 re 模块提供了re.sub用于替换字符串中的匹配项。</p>
<p>语法：<br />
<code>re.sub(pattern, repl, string, count=0, flags=0)</code><br />
参数：</p>
<ul>
<li>pattern : 正则中的模式字符串。</li>
<li>repl : 替换的字符串，也可为一个函数。</li>
<li>string : 要被查找替换的原始字符串。</li>
<li>count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</li>
</ul>
<h4 id="4-recompile-函数"><a class="markdownIt-Anchor" href="#4-recompile-函数"></a> 4. re.compile 函数</h4>
<p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p>
<p>语法格式为：<br />
<code>re.compile(pattern[, flags])</code><br />
参数：</p>
<ul>
<li><code>pattern </code>: 一个字符串形式的正则表达式</li>
<li><code>flags </code>: 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：
<ul>
<li>re.I 忽略大小写</li>
<li>re.L 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</li>
<li>re.M 多行模式</li>
<li>re.S 即为 <code>.</code> 并且包括换行符在内的任意字符（<code>. </code>不包括换行符）</li>
<li>re.U 表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库</li>
<li>re.X 为了增加可读性，忽略空格和<code>#</code>后面的注释</li>
</ul>
</li>
</ul>
<h4 id="5-refinditer"><a class="markdownIt-Anchor" href="#5-refinditer"></a> 5. re.finditer</h4>
<p>和 findall 类似，在字符串中找到正则表达式所匹配的所有子串，并把它们作为一个迭代器返回。<br />
<code>re.finditer(pattern, string, flags=0)</code></p>
<h4 id="6-resplit"><a class="markdownIt-Anchor" href="#6-resplit"></a> 6. re.split</h4>
<p>split 方法按照能够匹配的子串将字符串分割后返回列表，它的使用形式如下：<br />
<code>re.split(pattern, string[, maxsplit=0, flags=0])</code></p>
<h4 id="7-正则表达式对象"><a class="markdownIt-Anchor" href="#7-正则表达式对象"></a> 7. 正则表达式对象</h4>
<ol>
<li>
<p>re.RegexObject<br />
re.compile() 返回 RegexObject 对象。</p>
</li>
<li>
<p>re.MatchObject</p>
<ul>
<li>group() 返回被 RE 匹配的字符串。</li>
<li>start() 返回匹配开始的位置</li>
<li>end() 返回匹配结束的位置</li>
<li>span() 返回一个元组包含匹配 (开始,结束) 的位置</li>
</ul>
</li>
</ol>
<h4 id="8-正则表达式模式"><a class="markdownIt-Anchor" href="#8-正则表达式模式"></a> 8. 正则表达式模式</h4>
<p>模式字符串使用特殊的语法来表示一个正则表达式：<br />
字母和数字表示他们自身。一个正则表达式模式中的字母和数字匹配同样的字符串。<br />
多数字母和数字前加一个反斜杠时会拥有不同的含义。<br />
标点符号只有被转义时才匹配自身，否则它们表示特殊的含义。<br />
反斜杠本身需要使用反斜杠转义。<br />
由于正则表达式通常都包含反斜杠，所以你最好使用原始字符串来表示它们。模式元素(如 r’\t’，等价于 ‘\t’)匹配相应的特殊字符。<br />
下表列出了正则表达式模式语法中的特殊元素。如果你使用模式的同时提供了可选的标志参数，某些模式元素的含义会改变。</p>
<table>
<thead>
<tr>
<th style="text-align:left">模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">^</td>
<td style="text-align:left">匹配字符串的开头</td>
</tr>
<tr>
<td style="text-align:left">$</td>
<td style="text-align:left">匹配字符串的末尾。</td>
</tr>
<tr>
<td style="text-align:left">.</td>
<td style="text-align:left">匹配任意字符，除了换行符，当re.DOTALL标记被指定时，则可以匹配包括换行符的任意字符。</td>
</tr>
<tr>
<td style="text-align:left">[…]</td>
<td style="text-align:left">用来表示一组字符,单独列出：[amk] 匹配 ‘a’，‘m’或’k’</td>
</tr>
<tr>
<td style="text-align:left">[^…]</td>
<td style="text-align:left">不在[]中的字符：[^abc] 匹配除了a,b,c之外的字符。</td>
</tr>
<tr>
<td style="text-align:left">re*</td>
<td style="text-align:left">匹配0个或多个的表达式。</td>
</tr>
<tr>
<td style="text-align:left">re+</td>
<td style="text-align:left">匹配1个或多个的表达式。</td>
</tr>
<tr>
<td style="text-align:left">re?</td>
<td style="text-align:left">匹配0个或1个由前面的正则表达式定义的片段，非贪婪方式</td>
</tr>
<tr>
<td style="text-align:left">re{ n}</td>
<td style="text-align:left">精确匹配 n 个前面表达式。例如， o{2} 不能匹配 “Bob” 中的 “o”，但是能匹配 “food” 中的两个 o。</td>
</tr>
<tr>
<td style="text-align:left">re{ n,}</td>
<td style="text-align:left">匹配 n 个前面表达式。例如， o{2,} 不能匹配&quot;Bob&quot;中的&quot;o&quot;，但能匹配 &quot;foooood&quot;中的所有 o。“o{1,}” 等价于 “o+”。“o{0,}” 则等价于 “o*”。</td>
</tr>
<tr>
<td style="text-align:left">re{ n, m}</td>
<td style="text-align:left">匹配 n 到 m 次由前面的正则表达式定义的片段，贪婪方式</td>
</tr>
<tr>
<td style="text-align:left">a</td>
<td style="text-align:left">b</td>
</tr>
<tr>
<td style="text-align:left">(re)</td>
<td style="text-align:left">对正则表达式分组并记住匹配的文本</td>
</tr>
<tr>
<td style="text-align:left">(?imx)</td>
<td style="text-align:left">正则表达式包含三种可选标志：i, m, 或 x 。只影响括号中的区域。</td>
</tr>
<tr>
<td style="text-align:left">(?-imx)</td>
<td style="text-align:left">正则表达式关闭 i, m, 或 x 可选标志。只影响括号中的区域。</td>
</tr>
<tr>
<td style="text-align:left">(?: re)</td>
<td style="text-align:left">类似 (…), 但是不表示一个组</td>
</tr>
<tr>
<td style="text-align:left">(?imx: re)</td>
<td style="text-align:left">在括号中使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td style="text-align:left">(?-imx: re)</td>
<td style="text-align:left">在括号中不使用i, m, 或 x 可选标志</td>
</tr>
<tr>
<td style="text-align:left">(?#…)</td>
<td style="text-align:left">注释.</td>
</tr>
<tr>
<td style="text-align:left">(?= re)</td>
<td style="text-align:left">前向肯定界定符。如果所含正则表达式，以 … 表示，在当前位置成功匹配时成功，否则失败。但一旦所含表达式已经尝试，匹配引擎根本没有提高；模式的剩余部分还要尝试界定符的右边。</td>
</tr>
<tr>
<td style="text-align:left">(?! re)</td>
<td style="text-align:left">前向否定界定符。与肯定界定符相反；当所含表达式不能在字符串当前位置匹配时成功</td>
</tr>
<tr>
<td style="text-align:left">(?&gt; re)</td>
<td style="text-align:left">匹配的独立模式，省去回溯。</td>
</tr>
<tr>
<td style="text-align:left">\w</td>
<td style="text-align:left">匹配字母数字及下划线</td>
</tr>
<tr>
<td style="text-align:left">\W</td>
<td style="text-align:left">匹配非字母数字及下划线</td>
</tr>
<tr>
<td style="text-align:left">\s</td>
<td style="text-align:left">匹配任意空白字符，等价于 [ \t\n\r\f]。</td>
</tr>
<tr>
<td style="text-align:left">\S</td>
<td style="text-align:left">匹配任意非空字符</td>
</tr>
<tr>
<td style="text-align:left">\d</td>
<td style="text-align:left">匹配任意数字，等价于 [0-9].</td>
</tr>
<tr>
<td style="text-align:left">\D</td>
<td style="text-align:left">匹配任意非数字</td>
</tr>
<tr>
<td style="text-align:left">\A</td>
<td style="text-align:left">匹配字符串开始</td>
</tr>
<tr>
<td style="text-align:left">\Z</td>
<td style="text-align:left">匹配字符串结束，如果是存在换行，只匹配到换行前的结束字符串。</td>
</tr>
<tr>
<td style="text-align:left">\z</td>
<td style="text-align:left">匹配字符串结束</td>
</tr>
<tr>
<td style="text-align:left">\G</td>
<td style="text-align:left">匹配最后匹配完成的位置。</td>
</tr>
<tr>
<td style="text-align:left">\b</td>
<td style="text-align:left">匹配一个单词边界，也就是指单词和空格间的位置。例如， ‘er\b’ 可以匹配&quot;never&quot; 中的 ‘er’，但不能匹配 “verb” 中的 ‘er’。</td>
</tr>
<tr>
<td style="text-align:left">\B</td>
<td style="text-align:left">匹配非单词边界。‘er\B’ 能匹配 “verb” 中的 ‘er’，但不能匹配 “never” 中的 ‘er’。</td>
</tr>
<tr>
<td style="text-align:left">\n, \t, 等.</td>
<td style="text-align:left">匹配一个换行符。匹配一个制表符。等</td>
</tr>
<tr>
<td style="text-align:left">\1…\9</td>
<td style="text-align:left">匹配第n个分组的内容。</td>
</tr>
<tr>
<td style="text-align:left">\10</td>
<td style="text-align:left">匹配第n个分组的内容，如果它经匹配。否则指的是八进制字符码的表达式。</td>
</tr>
</tbody>
</table>
<h5 id="p-分组匹配"><a class="markdownIt-Anchor" href="#p-分组匹配"></a> ‘(?P…)’ 分组匹配</h5>
<p>例：身份证 1102231990xxxxxxxx</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;1102231990xxxxxxxx&#x27;</span></span><br><span class="line">res = re.search(<span class="string">&#x27;(?P&lt;province&gt;\d&#123;3&#125;)(?P&lt;city&gt;\d&#123;3&#125;)(?P&lt;born_year&gt;\d&#123;4&#125;)&#x27;</span>,s)</span><br><span class="line"><span class="built_in">print</span>(res.groupdict())</span><br></pre></td></tr></table></figure>
<p>此分组取出结果为：<br />
<code>&#123;'province': '110', 'city': '223', 'born_year': '1990'&#125;</code><br />
直接将匹配结果直接转为字典模式，方便使用。</p>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>基本优化思想与最小二乘法</title>
    <url>/2021/08/08/%E5%9F%BA%E6%9C%AC%E4%BC%98%E5%8C%96%E6%80%9D%E6%83%B3%E4%B8%8E%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/</url>
    <content><![CDATA[<h2 id="基本优化思想与最小二乘法"><a class="markdownIt-Anchor" href="#基本优化思想与最小二乘法"></a> 基本优化思想与最小二乘法</h2>
<p>在pytorch中最核心的基础数学工具就是梯度计算工具，也就是自动微分模块。<br />
所谓优化思想，指的是利用数学工具求解复杂问题的基本思想，我们往往会先给出待解决问题的数值评估指标，并在此基础之上构建方程，采用数学工具，不断优化评估指标结果，以达到最优结果。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure>
<h3 id="一-简单线性回归的机器学习建模思路"><a class="markdownIt-Anchor" href="#一-简单线性回归的机器学习建模思路"></a> 一、简单线性回归的机器学习建模思路</h3>
<ol>
<li>回顾简单线性回归建模问题</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=torch.arange(<span class="number">1</span>,<span class="number">5</span>).reshape(<span class="number">2</span>,<span class="number">2</span>).<span class="built_in">float</span>()</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2.],
        [3., 4.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(A[:,<span class="number">0</span>],A[:,<span class="number">1</span>],<span class="string">&#x27;o&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>[&lt;matplotlib.lines.Line2D at 0x1f7eff7f160&gt;]
</code></pre>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/output_5_1.png"
                        alt="png" 
                 ></p>
<ol start="2">
<li>转化为优化问题<br />
上述问题除了可以用矩阵方法求解以外，还可以将其转化为最优化问题，然后通过求解最优化问题的方法对其进行求解。最优化问题的转化分为两步。其一是确定优化数值指标，其二是确定优化目标函数。<br />
如果我们希望通过一条直线拟合二维平面空间上分布的点，最核心的目标就是希望方程的预测值和真实值相差较小。假设真实的y值用y表示，预测值用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>y</mi><mo stretchy="true">^</mo></mover></mrow><annotation encoding="application/x-tex">\widehat{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.865em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="width:calc(100% - 0.11112em);margin-left:0.11112em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span>表示，带入a、b参数，择优数值表示如下：</li>
</ol>
<table>
<thead>
<tr>
<th style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">x^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8879999999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></th>
<th style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">y^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></th>
<th style="text-align:left"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mover accent="true"><mi>y</mi><mo stretchy="true">^</mo></mover><mrow><mo stretchy="false">(</mo><mi>i</mi><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">\widehat{y}^{(i)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0824399999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="width:calc(100% - 0.11112em);margin-left:0.11112em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8879999999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathnormal mtight">i</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">2</td>
<td style="text-align:left">a+b</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">4</td>
<td style="text-align:left">3a+b</td>
</tr>
</tbody>
</table>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mover accent="true"><mi>y</mi><mo stretchy="true">^</mo></mover></mrow><annotation encoding="application/x-tex">\widehat{y}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.865em;vertical-align:-0.19444em;"></span><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="width:calc(100% - 0.11112em);margin-left:0.11112em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span></span></span> 表示对应预测值</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mover accent="true"><mi>y</mi><mo stretchy="true">^</mo></mover><mn>1</mn></msub><mo>=</mo><mn>1</mn><mo>∗</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">\widehat{y}_{1} = 1 * a + b = a + b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.865em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="width:calc(100% - 0.11112em);margin-left:0.11112em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mover accent="true"><mi>y</mi><mo stretchy="true">^</mo></mover><mn>2</mn></msub><mo>=</mo><mn>3</mn><mo>∗</mo><mi>a</mi><mo>+</mo><mi>b</mi><mo>=</mo><mn>3</mn><mi>a</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">\widehat{y}_{2} = 3 * a + b = 3a + b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.865em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="width:calc(100% - 0.11112em);margin-left:0.11112em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p>
<p>因此</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mo stretchy="false">(</mo><msub><mi>y</mi><mn>1</mn></msub><mo>−</mo><msub><mover accent="true"><mi>y</mi><mo stretchy="true">^</mo></mover><mn>1</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><msub><mi>y</mi><mn>2</mn></msub><mo>−</mo><msub><mover accent="true"><mi>y</mi><mo stretchy="true">^</mo></mover><mn>2</mn></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mn>2</mn><mo>−</mo><mi>a</mi><mo>−</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy="false">(</mo><mn>4</mn><mo>−</mo><mn>3</mn><mi>a</mi><mo>−</mo><mi>b</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">(y_{1}-\widehat{y}_{1})^{2}+(y_{2}-\widehat{y}_{2})^{2}=(2-a-b)^{2}+(4-3a-b)^{2}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="width:calc(100% - 0.11112em);margin-left:0.11112em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord accent"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.67056em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span class="svg-align" style="width:calc(100% - 0.11112em);margin-left:0.11112em;top:-3.43056em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.24em;"><svg width='100%' height='0.24em' viewBox='0 0 1062 239' preserveAspectRatio='none'><path d='M529 0h5l519 115c5 1 9 5 9 10 0 1-1 2-1 3l-4 22
c-1 5-5 9-11 9h-2L532 67 19 159h-2c-5 0-9-4-11-9l-5-22c-1-6 2-12 8-13z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">3</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>上式就是两个点的预测值和真实值的差值平方和，也就是误差平方和——SSE(Sum of the Squard Errors)</p>
<blockquote>
<p>此处我们只带入(1,2)和(3,4)两个点来计算SSE，也就是带入了两条数据来训练y=ax+b这个模型。</p>
</blockquote>
<p>当a,b取何值时，SSE取值最小?SSE方程就是我们优化的目标方程（求最小值），因此上述方程也被成为目标函数，同时，SSE代表着真实值和预测值之间的差值(误差平方和)，因此也被成为损失函数(预测值距真实值的损失)。</p>
<blockquote>
<p>换而言之，当SSE取值最小时，a,b的取值就是最终线性回归方程的系数取值</p>
</blockquote>
<blockquote>
<p>目标函数和损失函数并不完全等价，但大多数目标函数都由损失函数构成</p>
</blockquote>
<ol start="3">
<li>最优化问题的求解方法<br />
在机器学习领域，大多数优化问题都是围绕目标函数(或者损失函数)进行求解。在上述问题中，我们需要围绕SSE求最小值，SSE是一个关于a和b的二元函数，要求最小值，需要最优化方法，选择优化方法并执行相应计算。</li>
</ol>
<ul>
<li>图形展示目标函数<br />
使用Python中matplotlib包和Axes3D函数进行三维图像绘制</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> mpl_toolkits.mplot3d <span class="keyword">import</span> Axes3D</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=np.arange(-<span class="number">1</span>,<span class="number">3</span>,<span class="number">0.05</span>)</span><br><span class="line">y=np.arange(-<span class="number">1</span>,<span class="number">3</span>,<span class="number">0.05</span>)</span><br><span class="line">a,b=np.meshgrid(x,y)</span><br><span class="line">SSE=(<span class="number">2</span>-a-b)**<span class="number">2</span>+(<span class="number">4</span>-<span class="number">3</span>*a-b)**<span class="number">2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig=plt.figure()</span><br><span class="line">ax=plt.axes(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ax.plot_surface(a,b,SSE,cmap=<span class="string">&#x27;rainbow&#x27;</span>)</span><br><span class="line">ax.contour(a,b,SSE,zdir=<span class="string">&#x27;z&#x27;</span>,offset=<span class="number">0</span>,cmap=<span class="string">&quot;rainbow&quot;</span>) <span class="comment"># 生成z方向的投影，投到x-y平面</span></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/output_9_0.png"
                        alt="png" 
                 ></p>
<ul>
<li>函数的凹凸性<br />
绘制<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">y=x^{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span>图像</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=np.arange(-<span class="number">10</span>,<span class="number">10</span>,<span class="number">0.1</span>)</span><br><span class="line">y=x**<span class="number">2</span></span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/output_11_0.png"
                        alt="png" 
                 ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=np.arange(-<span class="number">5</span>,<span class="number">5</span>,<span class="number">0.5</span>)</span><br><span class="line">y=x**<span class="number">2</span>+<span class="number">2</span>*x+<span class="number">1</span></span><br><span class="line">plt.plot(x,y,<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/output_12_0.png"
                        alt="png" 
                 ></p>
<ul>
<li>SSE最小值<br />
对于简单线性回归的损失函数，SSE是凸函数，因此对于SSE(a,b)=(2-a-b)<sup>2+(4-3a-b)</sup>2而言，最小值点就是a,b两个参数求偏导等于0的点。</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>S</mi><mi>S</mi><mi>E</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>a</mi></mrow></mfrac><mo>=</mo><mn>20</mn><mi>a</mi><mo>+</mo><mn>8</mn><mi>b</mi><mo>−</mo><mn>28</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial SSE(a,b)}{\partial a}=20a+8b-28=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">a</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord">0</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>S</mi><mi>S</mi><mi>E</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>b</mi></mrow></mfrac><mo>=</mo><mn>8</mn><mi>a</mi><mo>+</mo><mn>4</mn><mi>b</mi><mo>−</mo><mn>12</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial SSE(a,b)}{\partial b}=8a+4b-12=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">8</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">4</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p>所以a=1,b=1，因此y=x+1<br />
利用偏导等于0得出的方程组求解线性回归方程参数，就是最小二乘法求解过程。</p>
<ol start="4">
<li>机器学习建模一般流程</li>
</ol>
<ul>
<li>Step 1：提出基本模型<br />
本节中，我们使用的直线(y=ax+b)去拟合二维平面空间中的点，这条直线就是基本模型，不同的模型能够使用不同的场景，在提出模型时，我们往往会预设一些影响模型结构或者实际判别性能的参数，如简单线性回归中a和b；</li>
<li>Step 2：确定损失函数和目标函数<br />
围绕建模的目标，需要设置合理损失函数，并在此基础上设置目标函数，很多情况下，这二者是相同的，这里需要注意，损失函数不是模型，而是模型参数所组成的一个函数。</li>
<li>Step 3：根据目标函数特性，选择优化方法，求解目标函数<br />
目标函数既承载了我们优化的目标(让预测值和真实值尽可能接近)，同时也是包含了模型参数的函数，因此，完成建模需要确定参数、优化结果需要预测值尽可能接近真实值这两方面需求就统一到了求解目标函数最小值的过程中了，也就是说，当我们围绕目标函数求解最小值时，也就完成了模型参数的求解。不同类型、不同性质的函数会影响优化方法的选择。在简单线性回归中，由于目标函数是凸函数，我们选取偏导数取值为0的点就是最小值点，进而使用最小二乘法完成a,b的计算，就是通过函数本身的性质进行最优化方法的选取。</li>
</ul>
<h3 id="二-第一个优化算法最小二乘法"><a class="markdownIt-Anchor" href="#二-第一个优化算法最小二乘法"></a> 二、第一个优化算法：最小二乘法</h3>
<ol>
<li>
<p>最小二乘法的代数表示方法<br />
从更加严格的数学角度出发，最小二乘法有两种表示形式，分别是代数法表示和矩阵表示，我们先看最小二乘法的代数表示方法。首先，假设多元线性方程有如下形式</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>w</mi><mn>1</mn></msub><msub><mi>x</mi><mn>1</mn></msub><mo>+</mo><msub><mi>w</mi><mn>2</mn></msub><msub><mi>x</mi><mn>2</mn></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>w</mi><mi>d</mi></msub><msub><mi>x</mi><mi>d</mi></msub><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">f(x)=w_{1}x_{1}+w_{2}x_{2}+\dots+w_{d}x_{d}+b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p>
</li>
</ol>
<p>令<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>w</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>w</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>w</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><msub><mi>w</mi><mi>d</mi></msub><mo stretchy="false">)</mo><mo separator="true">,</mo><mi>x</mi><mo>=</mo><mo stretchy="false">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>…</mo><msub><mi>x</mi><mi>d</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">w=(w_{1},w_{2},\dots w_{d}),x=(x_{1},x_{2},\dots x_{d})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.02691em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">…</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">d</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>则上式可写为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><msup><mi>w</mi><mi>T</mi></msup><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">f(x)=w^{T}x+b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9746609999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p>
<blockquote>
<p>在机器学习领域，线性回归自变量系数一般命名为w，weight的简写，指自变量的权重</p>
</blockquote>
<p>多元线性回归的最小二乘法的代数表示较为复杂，此处先考虑简单线性回归的最小二乘法表示形式，在简单线性回归中，w只包含一个分量，x也只包含一个分量，我们令此时的$ x_{i} $就是对应的自变量的取值。<br />
优化目标可写为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>S</mi><mi>S</mi><mi>E</mi><mo>=</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mo stretchy="false">(</mo><mi>f</mi><mo stretchy="false">(</mo><msub><mi>x</mi><mi>i</mi></msub><mo>−</mo><msub><mi>y</mi><mi>i</mi></msub><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>=</mo><mi>E</mi><mo stretchy="false">(</mo><mi>w</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">SSE=\sum^{m}_{i=1}(f(x_{i}-y_{i})^{2}=E(w,b)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></span></p>
<p>通过偏导为0求得最终结果的最小二乘法求解过程为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>S</mi><mi>S</mi><mi>E</mi><mo stretchy="false">(</mo><mi>w</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>w</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mo stretchy="false">(</mo><mi>w</mi><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><msubsup><mi>x</mi><mi>i</mi><mn>2</mn></msubsup><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mi>b</mi><mo stretchy="false">)</mo><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial SSE(w,b)}{\partial w}=2(w\sum^{m}_{i=1}x_{i}^{2}-\sum^{m}_{i=1}(y_{i}-b)x_{i})=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-2.4530000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mfrac><mrow><mi mathvariant="normal">∂</mi><mi>S</mi><mi>S</mi><mi>E</mi><mo stretchy="false">(</mo><mi>w</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><mrow><mi mathvariant="normal">∂</mi><mi>b</mi></mrow></mfrac><mo>=</mo><mn>2</mn><mo stretchy="false">(</mo><mi>m</mi><mi>b</mi><mo>−</mo><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>m</mi></munderover><mo stretchy="false">(</mo><msub><mi>y</mi><mi>i</mi></msub><mo>−</mo><mi>w</mi><msub><mi>x</mi><mi>i</mi></msub><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">\frac{\partial SSE(w,b)}{\partial b}=2(mb-\sum^{m}_{i=1}(y_{i}-wx_{i}))=0
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal">b</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord" style="margin-right:0.05556em;">∂</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="mord mathnormal" style="margin-right:0.05764em;">E</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.929066em;vertical-align:-1.277669em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.872331em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.277669em;"><span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02691em;">w</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p>
]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>张量的广播和科学计算</title>
    <url>/2021/07/27/%E5%BC%A0%E9%87%8F%E7%9A%84%E5%B9%BF%E6%92%AD%E5%92%8C%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/</url>
    <content><![CDATA[<h2 id="张量的广播和科学运算"><a class="markdownIt-Anchor" href="#张量的广播和科学运算"></a> 张量的广播和科学运算</h2>
<p>作为pytorch中执行深度学习的基本数据类型，张量也拥有非常多的数学与运算函数和方法，以及对应的一系列计算规则。在pytorch中，能够作用于tensor的运算被统一称作为算子</p>
<ul>
<li>数学运算的分类</li>
</ul>
<ol>
<li>逐点运算（pointwise ops）对tensor中每个元素执行相同的运算操作</li>
<li>规约运算（reduction ops）对某一张两进行操作得出某种总结值</li>
<li>比较运算（comparison ops）对多个张量进行比较运算的相关方法</li>
<li>谱运算（spectral ops）涉及信号处理傅里叶变化的操作</li>
<li>BLAS和LAPACK运算 基础线性代数程序集（Basic Linear Algeria Subprograms）和线性代数包（Linear Algeria Package）中定义的、主要用于现行代数科学计算的函数和方法</li>
<li>其他运算 其他未被归类的数学运算</li>
</ol>
<h3 id="一-张量的广播broadcast特性"><a class="markdownIt-Anchor" href="#一-张量的广播broadcast特性"></a> 一、张量的广播(broadcast)特性</h3>
<p>允许不同形状的张量之间进行计算</p>
<h4 id="1相同形状的张量计算"><a class="markdownIt-Anchor" href="#1相同形状的张量计算"></a> 1.相同形状的张量计算</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.arange(<span class="number">3</span>)</span><br><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([0, 1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1+t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([0, 2, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1*t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([0, 1, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1**t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 1, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1/t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([nan, 1., 1.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]+[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<pre><code>[0, 1, 2, 0, 1, 2]
</code></pre>
<h4 id="2-不同形状的张量计算"><a class="markdownIt-Anchor" href="#2-不同形状的张量计算"></a> 2. 不同形状的张量计算</h4>
<p>广播的特性是在不同形状的张量进行计算时，一个或多个张量通过隐式转化为相同形状的两个张量，但是，并非任何两个不同形状的张量都可以通过广播特性进行计算</p>
<h5 id="21-标量和任意形状的张量"><a class="markdownIt-Anchor" href="#21-标量和任意形状的张量"></a> 2.1 标量和任意形状的张量</h5>
<p>标量可以和任意形状的张量进行计算，计算过程就是标量和张量的每一个元素进行计算</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1*<span class="number">2</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([0, 2, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(t1+<span class="number">1</span>)**<span class="number">2</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 4, 9])
</code></pre>
<h5 id="22-相同维度-不同形状的计算"><a class="markdownIt-Anchor" href="#22-相同维度-不同形状的计算"></a> 2.2 相同维度、不同形状的计算</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.zeros(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">t2.shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([3, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.zeros(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t21=torch.ones(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">t21</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 1., 1., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t21+t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.]])
</code></pre>
<p>此处的广播相当于将t21的形状（1,4）拓展成了t2（3,4）<br />
即复制了第一行三次，然后二者相加<br />
也可理解为 t21的第一行和t2的三行分别进行相加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0., 0., 0., 0.],
        [0., 0., 0., 0.],
        [0., 0., 0., 0.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t22=torch.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">t22</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 1, 2],
        [3, 4, 5],
        [6, 7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t22.size()</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([3, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2.size()</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([3, 4])
</code></pre>
<p>广播规则：</p>
<ol>
<li>两个张量在一个维度一致，另一个维度上其中一个张量为1</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.ones(<span class="number">3</span>,<span class="number">1</span>)</span><br><span class="line">t3.size()</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([3, 1])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2+t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 1., 1., 1.],
        [1., 1., 1., 1.],
        [1., 1., 1., 1.]])
</code></pre>
<ol start="2">
<li>t3的形状为（3,1），t31的形状为（1,3），二者的形状在两个分量上均不同，但都有1存在，因此也可以广播</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t31=torch.ones(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">t31</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 1., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t31+t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[2., 2., 2.],
        [2., 2., 2.],
        [2., 2., 2.]])
</code></pre>
<p>三维张量的广播</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.zeros(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]],

        [[0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.],
         [0., 0., 0., 0., 0.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t31=torch.ones(<span class="number">3</span>,<span class="number">4</span>,<span class="number">1</span>)</span><br><span class="line">t31</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[1.],
         [1.],
         [1.],
         [1.]],

        [[1.],
         [1.],
         [1.],
         [1.]],

        [[1.],
         [1.],
         [1.],
         [1.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3+t31</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.]],

        [[1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.]],

        [[1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t32=torch.ones(<span class="number">3</span>,<span class="number">1</span>,<span class="number">5</span>)</span><br><span class="line">t32</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[1., 1., 1., 1., 1.]],

        [[1., 1., 1., 1., 1.]],

        [[1., 1., 1., 1., 1.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t32+t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.]],

        [[1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.]],

        [[1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.],
         [1., 1., 1., 1., 1.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t32+t31 <span class="comment"># 一维度一致，另两个维度不同，但都有 1</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.]],

        [[2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.]],

        [[2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.],
         [2., 2., 2., 2., 2.]]])
</code></pre>
<h5 id="23不同维度的张量计算过程中的广播"><a class="markdownIt-Anchor" href="#23不同维度的张量计算过程中的广播"></a> 2.3不同维度的张量计算过程中的广播</h5>
<p>低维张量升维，只需要将更高维度上填充1即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.arange(<span class="number">4</span>).reshape(<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 1],
        [2, 3]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2.reshape(<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[0, 1],
         [2, 3]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2.reshape(<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[[0, 1],
          [2, 3]]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.zeros(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">t3+t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[0., 1.],
         [2., 3.]],

        [[0., 1.],
         [2., 3.]],

        [[0., 1.],
         [2., 3.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.ones(<span class="number">2</span>,<span class="number">1</span>)</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1.],
        [1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.zeros(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">t3+t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[1., 1., 1.],
         [1., 1., 1.]],

        [[1., 1., 1.],
         [1., 1., 1.]],

        [[1., 1., 1.],
         [1., 1., 1.]]])
</code></pre>
<h3 id="二-逐点运算"><a class="markdownIt-Anchor" href="#二-逐点运算"></a> 二、逐点运算</h3>
<h4 id="tensor基本数学运算"><a class="markdownIt-Anchor" href="#tensor基本数学运算"></a> tensor基本数学运算</h4>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">torch.add(t1,t2)</td>
<td style="text-align:left">t1+t2</td>
</tr>
<tr>
<td style="text-align:left">torch.subtract(t1,t2)</td>
<td style="text-align:left">t1-t2</td>
</tr>
<tr>
<td style="text-align:left">torch.multiply(t1,t2)</td>
<td style="text-align:left">t1*t2</td>
</tr>
<tr>
<td style="text-align:left">torch.divide(t1,t2)</td>
<td style="text-align:left">t1/t2</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.tensor([<span class="number">1</span>,<span class="number">2</span>])</span><br><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.tensor([<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([3, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.add(t1,t2)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([4, 6])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.multiply(t1,t2)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([3, 8])
</code></pre>
<h4 id="tensor数值调整函数"><a class="markdownIt-Anchor" href="#tensor数值调整函数"></a> tensor数值调整函数</h4>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">torch.abs()</td>
<td style="text-align:left">返回绝对值</td>
</tr>
<tr>
<td style="text-align:left">torch.ceil()</td>
<td style="text-align:left">向上取整</td>
</tr>
<tr>
<td style="text-align:left">torch.floor()</td>
<td style="text-align:left">向下取整</td>
</tr>
<tr>
<td style="text-align:left">torch.round()</td>
<td style="text-align:left">四舍五入</td>
</tr>
<tr>
<td style="text-align:left">torch.neg()</td>
<td style="text-align:left">取反</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=torch.randn(<span class="number">5</span>)</span><br><span class="line">t</span><br></pre></td></tr></table></figure>
<pre><code>tensor([-0.4222, -2.3513, -2.0652, -0.3838, -0.2116])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">round</span>(t)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([-0., -2., -2., -0., -0.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.abs_()</span><br></pre></td></tr></table></figure>
<pre><code>tensor([0.4222, 2.3513, 2.0652, 0.3838, 0.2116])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.neg_()</span><br></pre></td></tr></table></figure>
<pre><code>tensor([-0.4222, -2.3513, -2.0652, -0.3838, -0.2116])
</code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">数学运算函数</th>
<th style="text-align:left">数学公式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">幂运算</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">torch.exp(t)</td>
<td style="text-align:left">$ y_{i} = e^{x_{i}} $</td>
<td style="text-align:left">返回以e为底、t中元素为幂的张量</td>
</tr>
<tr>
<td style="text-align:left">torch.expm1(t)</td>
<td style="text-align:left">$ y_{i} = e^{x_{i}} $ - 1</td>
<td style="text-align:left">对张量中的所有元素计算exp（x） - 1</td>
</tr>
<tr>
<td style="text-align:left">torch.exp2(t)</td>
<td style="text-align:left">$ y_{i} = 2^{x_{i}} $</td>
<td style="text-align:left">逐个元素计算2的t次方。</td>
</tr>
<tr>
<td style="text-align:left">torch.pow(t,n)</td>
<td style="text-align:left">$\text{out}_i = x_i ^ \text{exponent} $</td>
<td style="text-align:left">返回t的n次幂</td>
</tr>
<tr>
<td style="text-align:left">torch.sqrt(t)</td>
<td style="text-align:left">$ \text{out}{i} = \sqrt{\text{input}{i}} $</td>
<td style="text-align:left">返回t的平方根</td>
</tr>
<tr>
<td style="text-align:left">torch.square(t)</td>
<td style="text-align:left">$ \text{out}_i = x_i ^ \text{2} $</td>
<td style="text-align:left">返回输入的元素平方。</td>
</tr>
<tr>
<td style="text-align:left">对数运算</td>
<td style="text-align:left"></td>
<td style="text-align:left"></td>
</tr>
<tr>
<td style="text-align:left">torch.log10(t)</td>
<td style="text-align:left">$ y_{i} = \log_{10} (x_{i}) $</td>
<td style="text-align:left">返回以10为底的t的对数</td>
</tr>
<tr>
<td style="text-align:left">torch.log(t)</td>
<td style="text-align:left">$ y_{i} = \log_{e} (x_{i}) $</td>
<td style="text-align:left">返回以e为底的t的对数</td>
</tr>
<tr>
<td style="text-align:left">torch.log2(t)</td>
<td style="text-align:left">$ y_{i} = \log_{2} (x_{i}) $</td>
<td style="text-align:left">返回以2为底的t的对数</td>
</tr>
<tr>
<td style="text-align:left">torch.log1p(t)</td>
<td style="text-align:left">$ y_i = \log_{e} (x_i $ + 1)</td>
<td style="text-align:left">返回一个加自然对数的输入数组。</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">pow</span>(torch.tensor(<span class="number">2</span>),<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor(4)
</code></pre>
<ul>
<li>tensor的大多数科学运算具有一定的静态性<br />
静态性就是对输入的张量类型有明确的要求，例如部分函数只能输入浮点型张量，而不能输入整形张量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=torch.arange(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">t.dtype</span><br></pre></td></tr></table></figure>
<pre><code>torch.int64
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.exp(t)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 2.7183,  7.3891, 20.0855])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=t.<span class="built_in">float</span>()</span><br><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1., 2., 3.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.exp(t1)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 2.7183,  7.3891, 20.0855])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.expm1(t1)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 1.7183,  6.3891, 19.0855])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">pow</span>(t,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 4, 9])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">pow</span>(t,<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1.0000, 1.4142, 1.7321])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.exp(torch.log(t1))</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1., 2., 3.])
</code></pre>
<ul>
<li>排序运算：sort<br />
在pytorch中，sort函数将同时返回排序结果和对应的索引值的排列</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=torch.tensor([<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>])</span><br><span class="line">t</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 3, 2, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.sort(t)</span><br></pre></td></tr></table></figure>
<pre><code>torch.return_types.sort(
values=tensor([1, 2, 3, 4]),
indices=tensor([0, 2, 1, 3]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.sort(t,descending=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<pre><code>torch.return_types.sort(
values=tensor([4, 3, 2, 1]),
indices=tensor([3, 1, 2, 0]))
</code></pre>
<h3 id="三-规约运算"><a class="markdownIt-Anchor" href="#三-规约运算"></a> 三、规约运算</h3>
<p>规约运算指针对某张量进行某种总结，最后得出一个具体总结值的函数。主要包含数据科学领域内的诸多统计分析函数，如均值、极值、方差、中位数函数等等。</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">torch.mean(t)</td>
<td style="text-align:left">返回张量均值</td>
</tr>
<tr>
<td style="text-align:left">torch.var(t)</td>
<td style="text-align:left">返回张量方差</td>
</tr>
<tr>
<td style="text-align:left">torch.std(t)</td>
<td style="text-align:left">返回张量标准差</td>
</tr>
<tr>
<td style="text-align:left">torch.var_mean(t)</td>
<td style="text-align:left">返回张量方差和均值</td>
</tr>
<tr>
<td style="text-align:left">torch.std_mean(t)</td>
<td style="text-align:left">返回张量标准差和均值</td>
</tr>
<tr>
<td style="text-align:left">torch.max(t)</td>
<td style="text-align:left">返回张量最大值</td>
</tr>
<tr>
<td style="text-align:left">torch.argmax(t)</td>
<td style="text-align:left">返回张量最大值索引</td>
</tr>
<tr>
<td style="text-align:left">torch.min(t)</td>
<td style="text-align:left">返回张量最小值</td>
</tr>
<tr>
<td style="text-align:left">torch.argmin(t)</td>
<td style="text-align:left">返回张量最小值索引</td>
</tr>
<tr>
<td style="text-align:left">torch.median(t)</td>
<td style="text-align:left">返回张量中位数</td>
</tr>
<tr>
<td style="text-align:left">torch.sum(t)</td>
<td style="text-align:left">返回张量求和结果</td>
</tr>
<tr>
<td style="text-align:left">torch.logsumexp(t)</td>
<td style="text-align:left">返回张量各元素求和结果，适用于数据量较小的情况</td>
</tr>
<tr>
<td style="text-align:left">torch.prod(t)</td>
<td style="text-align:left">返回张量累乘结果</td>
</tr>
<tr>
<td style="text-align:left">torch.dist(t1, t2)</td>
<td style="text-align:left">计算两个张量的闵式距离，可使用不同范式</td>
</tr>
<tr>
<td style="text-align:left">torch.topk(t)</td>
<td style="text-align:left">返回t中最大的k个值对应的指标</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=torch.arange(<span class="number">10</span>).<span class="built_in">float</span>()</span><br><span class="line">t</span><br></pre></td></tr></table></figure>
<pre><code>tensor([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.std_mean(t)</span><br></pre></td></tr></table></figure>
<pre><code>(tensor(3.0277), tensor(4.5000))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.prod(torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>tensor(24)
</code></pre>
<ul>
<li>dist计算距离<br />
dist函数可计算闵式距离(闵可夫斯基距离)，通过输入不同的p值，可以计算多种类型的距离，如欧式距离，街道距离等。闵可夫斯基距离公式表示如下：</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><munderover><mo>∑</mo><mrow><mi>u</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></munderover><msup><mrow><mi mathvariant="normal">∣</mi><msub><mi>x</mi><mi>u</mi></msub><mo>−</mo><msub><mi>y</mi><mi>u</mi></msub><mi mathvariant="normal">∣</mi></mrow><mi>p</mi></msup><msup><mo stretchy="false">)</mo><mrow><mn>1</mn><mi mathvariant="normal">/</mi><mi>p</mi></mrow></msup></mrow><annotation encoding="application/x-tex">D(x,y)=(\sum_{u=1}^{n}{|x_{u}-y_{u}|}^{p} )^{1/p}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.9185100000000004em;vertical-align:-1.267113em;"></span><span class="mopen">(</span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.6513970000000002em;"><span style="top:-1.882887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span><span class="mrel mtight">=</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span><span style="top:-4.3000050000000005em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.267113em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord">∣</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">u</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord">∣</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.804292em;"><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span></span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">/</span><span class="mord mathnormal mtight">p</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>p取值为2时，计算欧式距离</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.tensor([<span class="number">1.0</span>,<span class="number">2</span>])</span><br><span class="line">t2=torch.tensor([<span class="number">3.0</span>,<span class="number">4</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.dist(t1,t2,<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor(2.8284)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.sqrt(torch.tensor(<span class="number">8.0</span>))</span><br></pre></td></tr></table></figure>
<pre><code>tensor(2.8284)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.dist(t1,t2,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor(4.)
</code></pre>
<ul>
<li>规约运算的维度<br />
由于规约运算是一个序列返回一个结果，因此若是针对高维张良，则可能指定某维度进行计算。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.arange(<span class="number">12</span>).<span class="built_in">float</span>().reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[ 0.,  1.,  2.,  3.],
        [ 4.,  5.,  6.,  7.],
        [ 8.,  9., 10., 11.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2.shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([3, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">sum</span>(t2,dim=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([12., 15., 18., 21.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">sum</span>(t2,dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ 6., 22., 38.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.arange(<span class="number">24</span>).<span class="built_in">float</span>().reshape(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[ 0.,  1.,  2.,  3.],
         [ 4.,  5.,  6.,  7.],
         [ 8.,  9., 10., 11.]],

        [[12., 13., 14., 15.],
         [16., 17., 18., 19.],
         [20., 21., 22., 23.]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3.shape</span><br></pre></td></tr></table></figure>
<pre><code>torch.Size([2, 3, 4])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">sum</span>(t3,dim=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[12., 14., 16., 18.],
        [20., 22., 24., 26.],
        [28., 30., 32., 34.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">sum</span>(t3,dim=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[12., 15., 18., 21.],
        [48., 51., 54., 57.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.<span class="built_in">sum</span>(t3,dim=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[ 6., 22., 38.],
        [54., 70., 86.]])
</code></pre>
<ul>
<li>二维张量的排序</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t22=torch.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">t22</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[-0.1265,  0.2807,  0.7180,  0.8772],
        [ 1.9022,  0.3509, -0.4520, -2.3835],
        [-0.5028, -0.8871, -2.2325,  0.7211]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.sort(t22) <span class="comment"># 默认情况下，按照行进行升序排序</span></span><br></pre></td></tr></table></figure>
<pre><code>torch.return_types.sort(
values=tensor([[-0.1265,  0.2807,  0.7180,  0.8772],
        [-2.3835, -0.4520,  0.3509,  1.9022],
        [-2.2325, -0.8871, -0.5028,  0.7211]]),
indices=tensor([[0, 1, 2, 3],
        [3, 2, 1, 0],
        [2, 1, 0, 3]]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.sort(t22,dim=<span class="number">1</span>,descending=<span class="literal">True</span>) <span class="comment"># 按列降序排序</span></span><br></pre></td></tr></table></figure>
<pre><code>torch.return_types.sort(
values=tensor([[ 0.8772,  0.7180,  0.2807, -0.1265],
        [ 1.9022,  0.3509, -0.4520, -2.3835],
        [ 0.7211, -0.5028, -0.8871, -2.2325]]),
indices=tensor([[3, 2, 1, 0],
        [0, 1, 2, 3],
        [3, 0, 1, 2]]))
</code></pre>
<h3 id="四-比较运算"><a class="markdownIt-Anchor" href="#四-比较运算"></a> 四、比较运算</h3>
<p>比较运算是一类较为简单的运算类型，和python原生的布尔运算类似，常用于不同张量之间的逻辑运算，最终返回逻辑运算结果（逻辑类型张量）基本比较运算函数如下所示：</p>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">torch.eq(t1,t2)</td>
<td style="text-align:left">等效==</td>
</tr>
<tr>
<td style="text-align:left">torch.equal(t1,t2)</td>
<td style="text-align:left">判断两个张量是否是相同的张量</td>
</tr>
<tr>
<td style="text-align:left"><a class="link"   href="http://torch.gt" >torch.gt<i class="fas fa-external-link-alt"></i></a>(t1,t2)</td>
<td style="text-align:left">等效&gt;</td>
</tr>
<tr>
<td style="text-align:left"><a class="link"   href="http://torch.lt" >torch.lt<i class="fas fa-external-link-alt"></i></a>(t1,t2)</td>
<td style="text-align:left">等效于&lt;</td>
</tr>
<tr>
<td style="text-align:left"><a class="link"   href="http://torch.ge" >torch.ge<i class="fas fa-external-link-alt"></i></a>(t1,t2)</td>
<td style="text-align:left">等效&gt;=</td>
</tr>
<tr>
<td style="text-align:left">torch.le(t1,t2)</td>
<td style="text-align:left">等效&lt;=</td>
</tr>
<tr>
<td style="text-align:left"><a class="link"   href="http://torch.ne" >torch.ne<i class="fas fa-external-link-alt"></i></a>(t1,t2)</td>
<td style="text-align:left">等效!=</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.tensor([<span class="number">1.0</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">t2=torch.tensor([<span class="number">1.0</span>,<span class="number">2</span>,<span class="number">5</span>])</span><br><span class="line">t1==t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ True, False, False])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.equal(t1,t2)</span><br></pre></td></tr></table></figure>
<pre><code>False
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.eq(t1,t2)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([ True, False, False])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.lt(t1,t2)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([False, False,  True])
</code></pre>
]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>张量的线性代数运算</title>
    <url>/2021/07/31/%E5%BC%A0%E9%87%8F%E7%9A%84%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<h2 id="张量的线性代数运算"><a class="markdownIt-Anchor" href="#张量的线性代数运算"></a> 张量的线性代数运算</h2>
<ul>
<li>pytorch中BLAS和LAPACK模块的相关运算</li>
<li>pytorch中没有设置单独的矩阵对象类型，因此，在pytorch中二维张量就相当于矩阵对象，并且拥有一系列线性代数相关函数和方法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>
<h3 id="一-blas和lapack概览"><a class="markdownIt-Anchor" href="#一-blas和lapack概览"></a> 一、BLAS和LAPACK概览</h3>
<ul>
<li>矩阵的新编及特殊矩阵的构造方法：包括矩阵的转置、对角矩阵的创建、单位矩阵的创建、上/下三角矩阵的创建等;</li>
<li>矩阵的基本运算:矩阵乘法、向量內积、矩阵和向量的乘法等</li>
<li>矩阵的线性代数运算:包括矩阵的迹、矩阵的秩、逆矩阵的求解、伴随矩阵和广义逆矩阵等</li>
<li>矩阵分解运算:特征分解、奇异值分解和SVD分解等</li>
</ul>
<h3 id="二-矩阵的形态及特殊矩阵构造方法"><a class="markdownIt-Anchor" href="#二-矩阵的形态及特殊矩阵构造方法"></a> 二、矩阵的形态及特殊矩阵构造方法</h3>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">torch.t(t)</td>
<td style="text-align:left">t转置</td>
</tr>
<tr>
<td style="text-align:left">torch.eye(n)</td>
<td style="text-align:left">创建包含n个分量的单位矩阵</td>
</tr>
<tr>
<td style="text-align:left">torch.diag(t1)</td>
<td style="text-align:left">以t1中各元素创建对角矩阵</td>
</tr>
<tr>
<td style="text-align:left">torch.triu(t)</td>
<td style="text-align:left">去矩阵t中上三角矩阵</td>
</tr>
<tr>
<td style="text-align:left">torch.tril(t)</td>
<td style="text-align:left">去矩阵t中下三角矩阵</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.arange(<span class="number">1</span>,<span class="number">7</span>).reshape(<span class="number">2</span>,<span class="number">3</span>).<span class="built_in">float</span>()</span><br><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2., 3.],
        [4., 5., 6.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.t(t1)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 4.],
        [2., 5.],
        [3., 6.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1.t()</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 4.],
        [2., 5.],
        [3., 6.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.eye(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=torch.arange(<span class="number">5</span>)</span><br><span class="line">torch.diag(t)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 0, 0, 0, 0],
        [0, 1, 0, 0, 0],
        [0, 0, 2, 0, 0],
        [0, 0, 0, 3, 0],
        [0, 0, 0, 0, 4]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">torch.triu(t1) <span class="comment"># 上三角矩阵</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 1, 2],
        [0, 4, 5],
        [0, 0, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.tril(t1) <span class="comment"># 下三角矩阵</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 0, 0],
        [3, 4, 0],
        [6, 7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.triu(t1,-<span class="number">1</span>) <span class="comment"># 上三角矩阵向左下偏移一位</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 1, 2],
        [3, 4, 5],
        [0, 7, 8]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.triu(t1,<span class="number">1</span>) <span class="comment"># 上三角矩阵向上偏移一位</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[0, 1, 2],
        [0, 0, 5],
        [0, 0, 0]])
</code></pre>
<h3 id="三-矩阵的基本运算"><a class="markdownIt-Anchor" href="#三-矩阵的基本运算"></a> 三、矩阵的基本运算</h3>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">torch.dot(t1,t2)</td>
<td style="text-align:left">计算t1、t2张量內积</td>
</tr>
<tr>
<td style="text-align:left"><a class="link"   href="http://torch.mm" >torch.mm<i class="fas fa-external-link-alt"></i></a>(t1,t2)</td>
<td style="text-align:left">矩阵乘法</td>
</tr>
<tr>
<td style="text-align:left"><a class="link"   href="http://torch.mv" >torch.mv<i class="fas fa-external-link-alt"></i></a>(t1,t2)</td>
<td style="text-align:left">矩阵乘向量</td>
</tr>
<tr>
<td style="text-align:left">torch.bmm(t1,t2)</td>
<td style="text-align:left">批量矩阵乘法</td>
</tr>
<tr>
<td style="text-align:left">torch.addmm(t,t1,t2)</td>
<td style="text-align:left">矩阵相乘后相加</td>
</tr>
<tr>
<td style="text-align:left">torch.addbmm(t,t1,t2)</td>
<td style="text-align:left">批量矩阵相乘后相加</td>
</tr>
</tbody>
</table>
<ul>
<li>dot\vdot:点积计算<br />
在pytorch中，dot和vdot只能作用于一维张量，对于数值型对象，二者计算结果没有区别，在复数运算时有区别</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=torch.arange(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">t</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.dot(t,t)</span><br></pre></td></tr></table></figure>
<pre><code>tensor(14)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.vdot(t,t)</span><br></pre></td></tr></table></figure>
<pre><code>tensor(14)
</code></pre>
<ul>
<li>mm:矩阵乘法</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1=torch.arange(<span class="number">1</span>,<span class="number">7</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3],
        [4, 5, 6]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2=torch.arange(<span class="number">1</span>,<span class="number">10</span>).reshape(<span class="number">3</span>,<span class="number">3</span>)</span><br><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1*t1 <span class="comment"># 对应元素位置相乘</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[ 1,  4,  9],
        [16, 25, 36]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mm(t1,t2) <span class="comment"># 矩阵乘法 ab bc -&gt; ac</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[30, 36, 42],
        [66, 81, 96]])
</code></pre>
<ul>
<li>mv:矩阵和向量相乘<br />
先将向量转为列向量然后再相乘</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">met=torch.arange(<span class="number">1</span>,<span class="number">7</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">met</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3],
        [4, 5, 6]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vec=torch.arange(<span class="number">1</span>,<span class="number">4</span>)</span><br><span class="line">vec</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1, 2, 3])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mv(met,vec) <span class="comment"># 矩阵的列数和向量的元素个数相同</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([14, 32])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">vec.reshape(<span class="number">3</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1],
        [2],
        [3]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mm(met,vec.reshape(<span class="number">3</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[14],
        [32]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mm(met,vec.reshape(<span class="number">3</span>,<span class="number">1</span>)).flatten()</span><br></pre></td></tr></table></figure>
<pre><code>tensor([14, 32])
</code></pre>
<p>mv函数本质上提供了一种二维张量和一维张量相乘的方法，再线性代数运算过程中，有很多矩阵乘向量的场景，典型的如线性回归的求解过程，通常情况下我们需要将向量转化位列向量然后进行计算，但pytorch中单独设置了一个矩阵和向量相乘的方法，从而简化了行/列向量的理解过程和将向量转为列向量的转化过程</p>
<ul>
<li>bmm:批量矩阵相乘<br />
指三维张量的矩阵乘法，三维张量内各对应位置的矩阵相乘</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t3=torch.arange(<span class="number">1</span>,<span class="number">13</span>).reshape(<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>)</span><br><span class="line">t3</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[ 1,  2],
         [ 3,  4]],

        [[ 5,  6],
         [ 7,  8]],

        [[ 9, 10],
         [11, 12]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t4=torch.arange(<span class="number">1</span>,<span class="number">19</span>).reshape(<span class="number">3</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">t4</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[ 1,  2,  3],
         [ 4,  5,  6]],

        [[ 7,  8,  9],
         [10, 11, 12]],

        [[13, 14, 15],
         [16, 17, 18]]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.bmm(t3,t4)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[[  9,  12,  15],
         [ 19,  26,  33]],

        [[ 95, 106, 117],
         [129, 144, 159]],

        [[277, 296, 315],
         [335, 358, 381]]])
</code></pre>
<p>point:</p>
<ol>
<li>三维张量包含的矩阵个数需要相同</li>
<li>每个内部矩阵，需要满足矩阵乘法的条件，ab bc -&gt; ac</li>
</ol>
<ul>
<li>addmm:矩阵相乘后相加<br />
addmm函数结构：addmm(input,mat1,mat2,beta=1,alpha=1)<br />
输出结果：beta*input+alpha*(mat1*mat2)</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3],
        [4, 5, 6]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t2</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3],
        [4, 5, 6],
        [7, 8, 9]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=torch.arange(<span class="number">3</span>)</span><br><span class="line">t</span><br></pre></td></tr></table></figure>
<pre><code>tensor([0, 1, 2])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mm(t1,t2)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[30, 36, 42],
        [66, 81, 96]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.addmm(t,t1,t2) <span class="comment"># t1*t2 + t</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[30, 37, 44],
        [66, 82, 98]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.addmm(t,t1,t2,beta=<span class="number">0</span>,alpha=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[300, 360, 420],
        [660, 810, 960]])
</code></pre>
<h3 id="四-矩阵的线性代数运算"><a class="markdownIt-Anchor" href="#四-矩阵的线性代数运算"></a> 四、矩阵的线性代数运算</h3>
<table>
<thead>
<tr>
<th style="text-align:left">函数</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">torch.trace(A)</td>
<td style="text-align:left">矩阵的迹</td>
</tr>
<tr>
<td style="text-align:left">matrix_rank(A)</td>
<td style="text-align:left">矩阵的秩</td>
</tr>
<tr>
<td style="text-align:left">torch.det(A)</td>
<td style="text-align:left">计算矩阵A的行列式</td>
</tr>
<tr>
<td style="text-align:left">torch.inverse(A)</td>
<td style="text-align:left">矩阵求逆</td>
</tr>
<tr>
<td style="text-align:left">torch.lstsq(A,B)</td>
<td style="text-align:left">最小二乘法</td>
</tr>
</tbody>
</table>
<ol>
<li>矩阵的迹（trace）<br />
矩阵的迹就是计算矩阵对角线元素之和</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=torch.tensor([<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>]).reshape(<span class="number">2</span>,<span class="number">2</span>).<span class="built_in">float</span>()</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2.],
        [4., 5.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.trace(A)</span><br></pre></td></tr></table></figure>
<pre><code>tensor(6.)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B=torch.arange(<span class="number">1</span>,<span class="number">7</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line">B</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1, 2, 3],
        [4, 5, 6]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.trace(B) <span class="comment"># 对于矩阵的迹来说，计算过程不需要是方阵</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor(6)
</code></pre>
<ol start="2">
<li>矩阵的秩（rank）<br />
矩阵的秩是指矩阵中行或列的极大线性无关组个数，矩阵的秩唯一</li>
</ol>
<ul>
<li>matrix_rank计算矩阵的秩</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=torch.arange(<span class="number">1</span>,<span class="number">5</span>).reshape(<span class="number">2</span>,<span class="number">2</span>).<span class="built_in">float</span>()</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2.],
        [3., 4.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.matrix_rank(A)</span><br></pre></td></tr></table></figure>
<pre><code>tensor(2)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B=torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">2</span>,<span class="number">4</span>]]).<span class="built_in">float</span>()</span><br><span class="line">B</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2.],
        [2., 4.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.matrix_rank(B)</span><br></pre></td></tr></table></figure>
<pre><code>tensor(1)
</code></pre>
<ol start="3">
<li>矩阵的行列式（det)</li>
</ol>
<p>行列式作为一个基本数学工具，实际上就是进行线性变换的伸缩因子<br />
对于任何一个n维方阵，行列式的计算过程如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo>=</mo><mrow><mo fence="true">∣</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>11</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>12</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>1</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>21</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mn>22</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mn>2</mn><mi>n</mi></mrow></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>1</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mn>2</mn></mrow></msub></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mo lspace="0em" rspace="0em">⋯</mo></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><msub><mi>a</mi><mrow><mi>n</mi><mi>n</mi></mrow></msub></mstyle></mtd></mtr></mtable><mo fence="true">∣</mo></mrow></mrow><annotation encoding="application/x-tex">D=\begin{vmatrix}a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n} \\ a_{21} &amp; a_{22} &amp; \cdots &amp; a_{2n}\\ \cdots &amp; \cdots &amp; \cdots &amp; \cdots\\ a_{n1} &amp; a_{n2} &amp; \cdots &amp; a_{nn}\end{vmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:4.85399em;vertical-align:-2.1500399999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.70395em;"><span style="top:-0.45596000000000014em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0569600000000001em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.65796em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.25896em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.85996em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.46096em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.06196em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.10295em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.70395em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500399999999997em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.6500000000000004em;"><span style="top:-4.8100000000000005em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-3.61em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.4099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span style="top:-1.2099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.70395em;"><span style="top:-0.45596000000000014em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.0569600000000001em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-1.65796em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.25896em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-2.85996em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-3.46096em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.06196em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.10295em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span><span style="top:-4.70395em;"><span class="pstrut" style="height:2.606em;"></span><span class="delimsizinginner delim-size1"><span>∣</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.1500399999999997em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>D</mi><mo>=</mo><mo>∑</mo><mo stretchy="false">(</mo><mo>−</mo><mn>1</mn><msup><mo stretchy="false">)</mo><mi>k</mi></msup><msub><mi>a</mi><mrow><mn>1</mn><msub><mi>k</mi><mn>1</mn></msub></mrow></msub><msub><mi>a</mi><mrow><mn>2</mn><msub><mi>k</mi><mn>2</mn></msub></mrow></msub><mo>⋯</mo><msub><mi>a</mi><mrow><mi>n</mi><msub><mi>k</mi><mi>n</mi></msub></mrow></msub></mrow><annotation encoding="application/x-tex">D=\sum (-1)^ka_{1k_1}a_{2k_2}\cdots a_{nk_n}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mopen">(</span><span class="mord">−</span><span class="mord">1</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.16454285714285719em;"><span style="top:-2.357em;margin-left:-0.03148em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2501em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>对于一个2*2的矩阵，行列式的计算就是主对角线元素之积减去另外两个元素之积</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=torch.tensor([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">4</span>,<span class="number">5</span>]]).<span class="built_in">float</span>()</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2.],
        [4., 5.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.det(A)   <span class="comment"># ad-bc</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor(-3.)
</code></pre>
<ol start="4">
<li>线性方程组的矩阵表达形式</li>
</ol>
<p>矩阵-》由向量组组成的矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=torch.arange(<span class="number">1</span>,<span class="number">5</span>).reshape(<span class="number">2</span>,<span class="number">2</span>).<span class="built_in">float</span>()</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2.],
        [3., 4.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(A[:,<span class="number">0</span>],A[:,<span class="number">1</span>],<span class="string">&#x27;o&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>[&lt;matplotlib.lines.Line2D at 0x22856f5ae80&gt;]
</code></pre>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/output_55_1.png"
                        alt="png" 
                 ></p>
<p>如果更进一步，我们希望在二维空间中找到一条直线，来拟合这两个点，也就是构建一个线性回归模型，我们可以设置线性回归方程如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>y</mi><mo>=</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi></mrow><annotation encoding="application/x-tex">y=ax+b
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">a</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal">b</span></span></span></span></span></p>
<p>带入(1,2)和(3,4)两个点后，我们还可以进一步将表达式改写成矩阵表示形式。<br />
A*x=B</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="/images/Snipaste_2021-08-01_20-03-43.png"
                        alt="&quot;矩阵表示形式&quot;" 
                 ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=torch.tensor([[<span class="number">1.0</span>,<span class="number">1</span>],[<span class="number">3</span>,<span class="number">1</span>]])</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 1.],
        [3., 1.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">B=torch.tensor([<span class="number">2.0</span>,<span class="number">4</span>])</span><br><span class="line">B</span><br></pre></td></tr></table></figure>
<pre><code>tensor([2., 4.])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.inverse(A) <span class="comment"># 求逆矩阵</span></span><br></pre></td></tr></table></figure>
<pre><code>tensor([[-0.5000,  0.5000],
        [ 1.5000, -0.5000]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mm(torch.inverse(A),A)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[ 1.0000e+00, -5.9605e-08],
        [-1.1921e-07,  1.0000e+00]])
</code></pre>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>A</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">x=A^{-1}*B
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05017em;">B</span></span></span></span></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mv(torch.inverse(A),B)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([1.0000, 1.0000])
</code></pre>
<p>a=1,b=1<br />
最终得到线性方程为<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><mi>x</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">y=x+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></p>
<h3 id="五-矩阵的分解"><a class="markdownIt-Anchor" href="#五-矩阵的分解"></a> 五、矩阵的分解</h3>
<p>矩阵的分解也是矩阵运算中常规计算，矩阵分解有很多种类，常见的例如QR分解、LU分解、特征分解和SVD分解，虽然大多数情况下，矩阵分解都是在形式上将矩阵拆分成几种特殊矩阵的乘积。分解之后的等式如下：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>=</mo><mi>V</mi><mo>∪</mo><mi>D</mi></mrow><annotation encoding="application/x-tex">A=V \cup D
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">D</span></span></span></span></span></p>
<ol>
<li>特征分解<br />
特征分解中，矩阵分解形式为：</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>=</mo><mi>Q</mi><mi mathvariant="normal">Λ</mi><msup><mi>Q</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">A = Q \Lambda Q^{-1}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.058548em;vertical-align:-0.19444em;"></span><span class="mord mathnormal">Q</span><span class="mord">Λ</span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中Q和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>Q</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">Q^{-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.008548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathnormal">Q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span>互为逆矩阵，Q的列就是A的特征值对应的特征向量，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">Λ</mi></mrow><annotation encoding="application/x-tex">\Lambda</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">Λ</span></span></span></span>就是特征值组成的对角矩阵</p>
<ul>
<li>torch.eig函数: 特征分解</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A=torch.arange(<span class="number">1</span>,<span class="number">10</span>).reshape(<span class="number">3</span>,<span class="number">3</span>).<span class="built_in">float</span>()</span><br><span class="line">A</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2., 3.],
        [4., 5., 6.],
        [7., 8., 9.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.eig(A,eigenvectors=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<pre><code>torch.return_types.eig(
eigenvalues=tensor([[ 1.6117e+01,  0.0000e+00],
        [-1.1168e+00,  0.0000e+00],
        [ 2.9486e-07,  0.0000e+00]]),
eigenvectors=tensor([[-0.2320, -0.7858,  0.4082],
        [-0.5253, -0.0868, -0.8165],
        [-0.8187,  0.6123,  0.4082]]))
</code></pre>
<ol start="2">
<li>奇异值分解(SVD)<br />
奇异值分解是特征值分解在奇异矩阵上的推广形式，它将一个维度为mxn的奇异矩阵A分解为三个部分：</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mi>A</mi><mo>=</mo><mi>U</mi><mo>∑</mo><msup><mi>V</mi><mi>T</mi></msup></mrow><annotation encoding="application/x-tex">A = U \sum V^{T}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.6000100000000002em;vertical-align:-0.55001em;"></span><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-symbol large-op" style="position:relative;top:-0.000004999999999977245em;">∑</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中U、V是两个正交矩阵，其中的每一行(列)分别被称为左奇异向量和右奇异向量，他们和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span></span></span></span>中对角线上的奇异值相对应，通常情况下我们只保留前k和奇异向量和奇异值。其中U是mxk矩阵，V是nxk矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∑</mo></mrow><annotation encoding="application/x-tex">\sum</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.00001em;vertical-align:-0.25001em;"></span><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span></span></span></span>是kxk的方阵，从而减少存储空间的效果</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>A</mi><mrow><mi>m</mi><mo>∗</mo><mi>n</mi></mrow></msub><mo>=</mo><msub><mi>U</mi><mrow><mi>m</mi><mo>∗</mo><mi>n</mi></mrow></msub><munder><mo>∑</mo><mrow><mi>m</mi><mo>∗</mo><mi>n</mi></mrow></munder><msubsup><mi>V</mi><mrow><mi>n</mi><mo>∗</mo><mi>n</mi></mrow><mi>T</mi></msubsup><mo>≈</mo><msub><mi>U</mi><mrow><mi>m</mi><mo>∗</mo><mi>k</mi></mrow></msub><munder><mo>∑</mo><mrow><mi>k</mi><mo>∗</mo><mi>k</mi></mrow></munder><msubsup><mi>V</mi><mrow><mi>k</mi><mo>∗</mo><mi>n</mi></mrow><mi>T</mi></msubsup></mrow><annotation encoding="application/x-tex">A_{m*n} = U_{m*n} \sum _{m*n} V_{n*n}^T \approx U_{m*k} \sum _{k*k}V_{k*n}^T
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">A</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3000100000000003em;vertical-align:-1.250005em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.175696em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.050005em;"><span style="top:-1.8999949999999999em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.0500049999999996em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.250005em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.3521180000000004em;vertical-align:-1.3021129999999999em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10903em;">U</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.0500050000000005em;"><span style="top:-1.847887em;margin-left:0em;"><span class="pstrut" style="height:3.05em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.050005em;"><span class="pstrut" style="height:3.05em;"></span><span><span class="mop op-symbol large-op">∑</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.3021129999999999em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.22222em;">V</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913309999999999em;"><span style="top:-2.4530000000000003em;margin-left:-0.22222em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">∗</span><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C=torch.tensor([[<span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],[<span class="number">2.</span>, <span class="number">4.</span>, <span class="number">6.</span>],[<span class="number">3.</span>, <span class="number">6.</span>, <span class="number">9.</span>]])</span><br><span class="line">C</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1., 2., 3.],
        [2., 4., 6.],
        [3., 6., 9.]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.svd(C)</span><br></pre></td></tr></table></figure>
<pre><code>torch.return_types.svd(
U=tensor([[-2.6726e-01,  9.6362e-01, -3.7767e-08],
        [-5.3452e-01, -1.4825e-01, -8.3205e-01],
        [-8.0178e-01, -2.2237e-01,  5.5470e-01]]),
S=tensor([1.4000e+01, 4.2751e-08, 1.6397e-15]),
V=tensor([[-0.2673, -0.9636,  0.0000],
        [-0.5345,  0.1482, -0.8321],
        [-0.8018,  0.2224,  0.5547]]))
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CU,CS,CV=torch.svd(C)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.diag(CS)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1.4000e+01, 0.0000e+00, 0.0000e+00],
        [0.0000e+00, 4.2751e-08, 0.0000e+00],
        [0.0000e+00, 0.0000e+00, 1.6397e-15]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mm(torch.mm(CU,torch.diag(CS)),CV.t())</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1.0000, 2.0000, 3.0000],
        [2.0000, 4.0000, 6.0000],
        [3.0000, 6.0000, 9.0000]])
</code></pre>
<p>能够看出，上述输出完成还原了C矩阵，此时我们可根据svd输出结果对C进行降维，此时C可只保留第一列，即k=1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">U1=CU[:,<span class="number">0</span>].reshape(<span class="number">3</span>,<span class="number">1</span>) <span class="comment"># U的第一列</span></span><br><span class="line">U1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[-0.2673],
        [-0.5345],
        [-0.8018]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C1=CS[<span class="number">0</span>] <span class="comment"># C的第一个值</span></span><br><span class="line">C1</span><br></pre></td></tr></table></figure>
<pre><code>tensor(14.0000)
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">V1=CV[:,<span class="number">0</span>].reshape(<span class="number">1</span>,<span class="number">3</span>) <span class="comment"># V 的第一行</span></span><br><span class="line">V1</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[-0.2673, -0.5345, -0.8018]])
</code></pre>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.mm((U1*C1),V1)</span><br></pre></td></tr></table></figure>
<pre><code>tensor([[1.0000, 2.0000, 3.0000],
        [2.0000, 4.0000, 6.0000],
        [3.0000, 6.0000, 9.0000]])
</code></pre>
<p>此时输出的Cd矩阵以及和原矩阵高度相似了，损失信息在R的计算中基本可以忽略不计，经过SVD分解，矩阵的信息能够被压缩至更小的空间内进行存储，从而为PCA（主成分分析）、LSI（潜在语义索引）等算法做好了数学工具层面的铺垫</p>
]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>矩阵变换</title>
    <url>/2024/10/29/%E7%9F%A9%E9%98%B5%E5%8F%98%E6%8D%A2/</url>
    <content><![CDATA[<h2 id="三维坐标系的矩阵变换"><a class="markdownIt-Anchor" href="#三维坐标系的矩阵变换"></a> 三维坐标系的矩阵变换</h2>
<p>在三维坐标系中，绕<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>轴的旋转可以通过旋转矩阵来表示。旋转矩阵的形式依赖于旋转的角度。对于一个角度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>，绕<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>轴的旋转矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R_x(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span>是：</p>
<p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">R_x(\theta)=\begin{bmatrix}1&amp;0&amp;0\\0&amp;\cos(\theta)&amp;-\sin(\theta)\\0&amp;\sin(\theta)&amp;\cos(\theta)\end{bmatrix}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="详细解释"><a class="markdownIt-Anchor" href="#详细解释"></a> 详细解释</h3>
<ul>
<li><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R_x(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></strong> 是绕<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>轴旋转<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>角度的旋转矩阵。</li>
<li><strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\cos(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></strong> 和 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\sin(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></strong> 是角度<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>θ</mi></mrow><annotation encoding="application/x-tex">\theta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span></span></span></span>的余弦和正弦值。</li>
<li>旋转矩阵的结构表明，旋转只会影响<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>坐标，而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>坐标保持不变。</li>
</ul>
<h3 id="旋转的几何意义"><a class="markdownIt-Anchor" href="#旋转的几何意义"></a> 旋转的几何意义</h3>
<p>假设你有一个点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo separator="true">,</mo><mi>z</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(x, y, z)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mclose">)</span></span></span></span>在三维空间，使用这个旋转矩阵旋转后得到的新点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">(</mo><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo separator="true">,</mo><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P&#x27;(x&#x27;, y&#x27;, z&#x27;)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.001892em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>的坐标可以通过以下公式计算：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>⋅</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
x&#x27; \\
y&#x27; \\
z&#x27;
\end{bmatrix} = R_x(\theta) \cdot \begin{bmatrix}
x \\
y \\
z
\end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<p>具体的计算为：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo>−</mo><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>0</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>⋅</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>y</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>z</mi></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
x&#x27; \\
y&#x27; \\
z&#x27;
\end{bmatrix} = \begin{bmatrix}
1 &amp; 0 &amp; 0 \\
0 &amp; \cos(\theta) &amp; -\sin(\theta) \\
0 &amp; \sin(\theta) &amp; \cos(\theta)
\end{bmatrix} \cdot \begin{bmatrix}
x \\
y \\
z
\end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:0.5em;"></span><span class="arraycolsep" style="width:0.5em;"></span><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">0</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">−</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="计算结果"><a class="markdownIt-Anchor" href="#计算结果"></a> 计算结果</h3>
<p>通过矩阵乘法可以得到新坐标<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mrow><annotation encoding="application/x-tex">P&#x27;</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.751892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span>：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>x</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>y</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><msup><mi>z</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow><mo>=</mo><mrow><mo fence="true">[</mo><mtable rowspacing="0.15999999999999992em" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mi>x</mi></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>−</mo><mi>z</mi><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mi>sin</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo><mo>+</mo><mi>z</mi><mi>cos</mi><mo>⁡</mo><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">\begin{bmatrix}
x&#x27; \\
y&#x27; \\
z&#x27;
\end{bmatrix} = \begin{bmatrix}
x \\
y \cos(\theta) - z \sin(\theta) \\
y \sin(\theta) + z \cos(\theta)
\end{bmatrix}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.751892em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.6010299999999997em;vertical-align:-1.55002em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎣</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎢</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎡</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-c"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.05em;"><span style="top:-4.21em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal">x</span></span></span><span style="top:-3.0099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span><span style="top:-1.8099999999999994em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">sin</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mop">cos</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.5500000000000007em;"><span></span></span></span></span></span></span></span><span class="mclose"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.0510099999999998em;"><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎦</span></span></span><span style="top:-2.8099900000000004em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎥</span></span></span><span style="top:-4.05101em;"><span class="pstrut" style="height:3.1550000000000002em;"></span><span class="delimsizinginner delim-size4"><span>⎤</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.55002em;"><span></span></span></span></span></span></span></span></span></span></span></span></p>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<ul>
<li>绕<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>轴的旋转矩阵是 <strong><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>R</mi><mi>x</mi></msub><mo stretchy="false">(</mo><mi>θ</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">R_x(\theta)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.02778em;">θ</span><span class="mclose">)</span></span></span></span></strong>。</li>
<li>该矩阵影响<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathnormal" style="margin-right:0.03588em;">y</span></span></span></span>和<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>z</mi></mrow><annotation encoding="application/x-tex">z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.04398em;">z</span></span></span></span>坐标，而<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>x</mi></mrow><annotation encoding="application/x-tex">x</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathnormal">x</span></span></span></span>坐标保持不变。</li>
<li>通过矩阵乘法可以快速计算旋转后的新坐标。</li>
</ul>
<h2 id="旋转和平移先后顺序的区别"><a class="markdownIt-Anchor" href="#旋转和平移先后顺序的区别"></a> 旋转和平移先后顺序的区别</h2>
<p>在使用 <code>Eigen</code> 库中的 <code>Eigen::Isometry3d</code> 进行三维变换时，变换的顺序非常重要，特别是在进行平移（pretranslate）和旋转（rotate）时。为了更好地理解这一点，我们可以将其分解为几个部分。</p>
<h3 id="eigenisometry3d-的构造"><a class="markdownIt-Anchor" href="#eigenisometry3d-的构造"></a> <code>Eigen::Isometry3d</code> 的构造</h3>
<p><code>Eigen::Isometry3d</code> 是一个表示三维刚体变换（包括平移和旋转）的类。它可以看作是一个 4x4 的齐次变换矩阵。使用 <code>Eigen</code> 可以方便地对三维向量进行变换。</p>
<h3 id="平移和旋转的顺序"><a class="markdownIt-Anchor" href="#平移和旋转的顺序"></a> 平移和旋转的顺序</h3>
<p>在使用 <code>Eigen::Isometry3d</code> 时，<strong>平移和旋转的顺序将决定最终的变换结果</strong>。具体来说：</p>
<ol>
<li>
<p><strong>Pretranslate（预平移）</strong>：</p>
<ul>
<li>先进行平移操作。</li>
<li>对于输入的点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>，首先进行平移变换，然后再进行旋转。</li>
</ul>
</li>
<li>
<p><strong>Rotate（旋转）</strong>：</p>
<ul>
<li>在平移后进行旋转。</li>
</ul>
</li>
</ol>
<p>因此，如果你想先平移再旋转，可以用以下方式进行操作：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个 Isometry3d 对象</span></span><br><span class="line">    Eigen::Isometry3d transform = Eigen::Isometry3d::<span class="built_in">Identity</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个平移向量</span></span><br><span class="line">    <span class="function">Eigen::Vector3d <span class="title">translation</span><span class="params">(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)</span></span>;</span><br><span class="line">    transform.<span class="built_in">pretranslate</span>(translation); <span class="comment">// 先平移</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个旋转角度（例如，绕 Z 轴旋转 90 度）</span></span><br><span class="line">    <span class="type">double</span> angle = M_PI / <span class="number">2</span>; <span class="comment">// 90 degrees in radians</span></span><br><span class="line">    transform.<span class="built_in">rotate</span>(Eigen::<span class="built_in">AngleAxisd</span>(angle, Eigen::Vector3d::<span class="built_in">UnitZ</span>())); <span class="comment">// 然后旋转</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变换一个点</span></span><br><span class="line">    <span class="function">Eigen::Vector3d <span class="title">point</span><span class="params">(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    Eigen::Vector3d transformed_point = transform * point;</span><br><span class="line"></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Transformed point: &quot;</span> &lt;&lt; transformed_point.<span class="built_in">transpose</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="变换顺序的影响"><a class="markdownIt-Anchor" href="#变换顺序的影响"></a> 变换顺序的影响</h3>
<ul>
<li><strong>平移后旋转</strong>的效果是：首先将点移动到新的位置，然后在新位置上进行旋转。</li>
<li><strong>旋转后平移</strong>的效果是：首先在原点旋转点，然后将旋转后的点平移。</li>
</ul>
<h3 id="例子分析"><a class="markdownIt-Anchor" href="#例子分析"></a> 例子分析</h3>
<p>假设你有一个点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>0</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P(0, 0, 0)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span></span>，如果你先进行平移<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">(1, 2, 3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span>然后旋转<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>9</mn><msup><mn>0</mn><mo>∘</mo></msup></mrow><annotation encoding="application/x-tex">90^\circ</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.674115em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.674115em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mbin mtight">∘</span></span></span></span></span></span></span></span></span></span></span>（绕<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>Z</mi></mrow><annotation encoding="application/x-tex">Z</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">Z</span></span></span></span>轴）：</p>
<ol>
<li><strong>预平移</strong>：</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>P</mi><mo>+</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> P&#x27; = P + (1, 2, 3) = (1, 2, 3)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span></span></p>
<ol start="2">
<li><strong>旋转</strong>：<br />
旋转$(1, 2, 3)<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>90</mn><mtext>度绕</mtext></mrow><annotation encoding="application/x-tex">90 度绕</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">0</span><span class="mord cjk_fallback">度</span><span class="mord cjk_fallback">绕</span></span></span></span>Z$轴的结果为：</li>
</ol>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>P</mi><mrow><mo mathvariant="normal">′</mo><mo mathvariant="normal">′</mo></mrow></msup><mo>=</mo><mo stretchy="false">(</mo><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo><mo>→</mo><mo stretchy="false">(</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex"> P&#x27;&#x27; = (1, 2, 3) \rightarrow (-2, 1, 3)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">→</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mclose">)</span></span></span></span></span></p>
<p>如果你先旋转后平移，结果会不同。</p>
<h3 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例</h3>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Eigen/Dense&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个 Isometry3d 对象</span></span><br><span class="line">    Eigen::Isometry3d transform1 = Eigen::Isometry3d::<span class="built_in">Identity</span>(); <span class="comment">// 用于先旋转后平移</span></span><br><span class="line">    Eigen::Isometry3d transform2 = Eigen::Isometry3d::<span class="built_in">Identity</span>(); <span class="comment">// 用于先平移后旋转</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个旋转角度（例如，绕 Z 轴旋转 90 度）</span></span><br><span class="line">    <span class="type">double</span> angle = M_PI / <span class="number">2</span>; <span class="comment">// 90 degrees in radians</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先旋转后平移</span></span><br><span class="line">    transform1.<span class="built_in">rotate</span>(Eigen::<span class="built_in">AngleAxisd</span>(angle, Eigen::Vector3d::<span class="built_in">UnitZ</span>())); <span class="comment">// 旋转</span></span><br><span class="line">    transform1.<span class="built_in">pretranslate</span>(Eigen::<span class="built_in">Vector3d</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)); <span class="comment">// 平移</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先平移后旋转</span></span><br><span class="line">    transform2.<span class="built_in">pretranslate</span>(Eigen::<span class="built_in">Vector3d</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)); <span class="comment">// 平移</span></span><br><span class="line">    transform2.<span class="built_in">rotate</span>(Eigen::<span class="built_in">AngleAxisd</span>(angle, Eigen::Vector3d::<span class="built_in">UnitZ</span>())); <span class="comment">// 旋转</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个点</span></span><br><span class="line">    <span class="function">Eigen::Vector3d <span class="title">point</span><span class="params">(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变换点</span></span><br><span class="line">    Eigen::Vector3d transformed_point1 = transform1 * point; <span class="comment">// 先旋转后平移</span></span><br><span class="line">    Eigen::Vector3d transformed_point2 = transform2 * point; <span class="comment">// 先平移后旋转</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出结果</span></span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Transformed point (rotate then translate): &quot;</span> &lt;&lt; transformed_point1.<span class="built_in">transpose</span>() &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Transformed point (translate then rotate): &quot;</span> &lt;&lt; transformed_point2.<span class="built_in">transpose</span>() &lt;&lt; std::endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="总结-2"><a class="markdownIt-Anchor" href="#总结-2"></a> 总结</h3>
<ul>
<li>在 <code>Eigen::Isometry3d</code> 中，<strong><code>pretranslate</code></strong> 和 <strong><code>rotate</code></strong> 的顺序是重要的。</li>
<li>如果你希望先平移再旋转，使用 <code>pretranslate</code> 后再调用 <code>rotate</code>。</li>
<li>变换的顺序会影响最终的结果，须根据具体需求选择顺序。</li>
</ul>
<h2 id="自体坐标系下变换和世界坐标系下变换的区别"><a class="markdownIt-Anchor" href="#自体坐标系下变换和世界坐标系下变换的区别"></a> 自体坐标系下变换和世界坐标系下变换的区别</h2>
<p>在三维图形学和计算机图形学中，自体坐标系（Local Coordinate System）和世界坐标系（World Coordinate System）是两个非常重要的概念。它们在对象变换、场景建模和图形渲染中起着关键作用。下面将详细解释这两个坐标系的区别以及它们在变换中的作用。</p>
<h3 id="自体坐标系local-coordinate-system"><a class="markdownIt-Anchor" href="#自体坐标系local-coordinate-system"></a> 自体坐标系（Local Coordinate System）</h3>
<ul>
<li><strong>定义</strong>：自体坐标系是指一个对象自身的坐标系。每个对象都有自己的自体坐标系，通常以对象的中心点或坐标原点为中心。</li>
<li><strong>变换作用</strong>：在自体坐标系下进行的变换（如旋转、平移、缩放）是相对于对象自身的。
<ul>
<li><strong>旋转</strong>：绕对象自身的轴旋转。例如，旋转一个车轮时，它会围绕自己的中心旋转。</li>
<li><strong>平移</strong>：移动物体的中心点。例如，将一个模型向上移动时，是相对于模型的自身坐标系进行的。</li>
</ul>
</li>
<li><strong>优势</strong>：使用自体坐标系进行变换可以更直观地控制对象的行为，尤其是在动画和物理模拟中。</li>
</ul>
<h3 id="世界坐标系world-coordinate-system"><a class="markdownIt-Anchor" href="#世界坐标系world-coordinate-system"></a> 世界坐标系（World Coordinate System）</h3>
<ul>
<li><strong>定义</strong>：世界坐标系是整个场景的统一坐标系统。在这个坐标系中，所有对象的位置和方向都是相对于场景的固定坐标系来定义的。</li>
<li><strong>变换作用</strong>：在世界坐标系下进行的变换是相对于场景的原点进行的。
<ul>
<li><strong>旋转</strong>：绕世界坐标系的轴旋转。例如，一个行星绕太阳旋转时，它是相对于整个世界坐标系来定义的。</li>
<li><strong>平移</strong>：在整个场景中移动对象。例如，将一个建筑模型从一个位置移动到另一个位置时，是相对于世界坐标系的。</li>
</ul>
</li>
<li><strong>优势</strong>：使用世界坐标系能方便地处理整个场景中的对象的相对位置和方向，特别是在多个对象之间的关系和碰撞检测中。</li>
</ul>
<h3 id="变换的区别"><a class="markdownIt-Anchor" href="#变换的区别"></a> 变换的区别</h3>
<ul>
<li>
<p><strong>自体坐标系下的变换</strong>：</p>
<ul>
<li>变换操作（如旋转、缩放、平移）是相对于对象自身的坐标系进行的。</li>
<li>典型的应用：在动画中，角色的手臂可能需要围绕肩膀旋转，而肩膀的位置是相对于角色自身的坐标系。</li>
</ul>
</li>
<li>
<p><strong>世界坐标系下的变换</strong>：</p>
<ul>
<li>变换操作是相对于整个场景的坐标系进行的。</li>
<li>典型的应用：在虚拟场景中，移动一个物体的坐标是基于场景的原点，例如将一个桌子从一个房间移动到另一个房间。</li>
</ul>
</li>
</ul>
<h3 id="示例"><a class="markdownIt-Anchor" href="#示例"></a> 示例</h3>
<p>考虑一个简单的场景，其中有一个物体（例如，一个方块）：</p>
<ol>
<li>
<p><strong>自体坐标系下的操作</strong>：</p>
<ul>
<li>如果你对方块进行 90 度的旋转，方块会围绕自己的中心旋转，结果与方块的初始朝向有关。</li>
</ul>
</li>
<li>
<p><strong>世界坐标系下的操作</strong>：</p>
<ul>
<li>如果你将方块沿 X 轴平移 5 个单位，它将从其当前位置向 X 轴正方向移动 5 个单位，而不考虑方块当前的朝向。</li>
</ul>
</li>
</ol>
<h3 id="变换矩阵"><a class="markdownIt-Anchor" href="#变换矩阵"></a> 变换矩阵</h3>
<ul>
<li><strong>自体变换矩阵</strong>：通常用于描述对象的局部变换，例如：</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>T</mi><mtext>local</mtext></msub><mo>=</mo><msub><mi>R</mi><mtext>local</mtext></msub><mo>⋅</mo><msub><mi>S</mi><mtext>local</mtext></msub><mo>⋅</mo><msub><mi>P</mi><mtext>local</mtext></msub></mrow><annotation encoding="application/x-tex"> T_{\text{local}} = R_{\text{local}} \cdot S_{\text{local}} \cdot P_{\text{local}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">local</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.00773em;">R</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">local</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">local</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">local</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>其中<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>R</mi></mrow><annotation encoding="application/x-tex">R</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.00773em;">R</span></span></span></span>是旋转矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.05764em;">S</span></span></span></span>是缩放矩阵，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>是平移矩阵。</p>
<ul>
<li><strong>世界变换矩阵</strong>：描述对象在世界坐标系中的变换，通常需要将对象的自体变换与世界变换结合起来，例如：</li>
</ul>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msub><mi>T</mi><mtext>world</mtext></msub><mo>=</mo><msub><mi>T</mi><mtext>world</mtext></msub><mo>⋅</mo><msub><mi>T</mi><mtext>local</mtext></msub></mrow><annotation encoding="application/x-tex"> T_{\text{world}} = T_{\text{world}} \cdot T_{\text{local}}
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">world</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">world</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">local</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></p>
<p>在三维图形学中，进行变换时自体坐标系和世界坐标系的变换处理确实涉及到变换矩阵的左乘（或右乘），但具体的操作会有所不同。下面我们来讨论如何在这两种坐标系中进行变换，并解释矩阵乘法的顺序。</p>
<h3 id="1-自体坐标系下的变换"><a class="markdownIt-Anchor" href="#1-自体坐标系下的变换"></a> 1. 自体坐标系下的变换</h3>
<p>在自体坐标系下，变换是相对于对象自身的坐标系进行的。通常，我们会构建一个变换矩阵来描述这个对象的状态（位置、旋转、缩放等），并在自体坐标系下进行变换。</p>
<p><strong>变换矩阵的构造</strong>：</p>
<ul>
<li>自体变换通常是通过将旋转、缩放和平移矩阵结合在一起形成一个复合变换矩阵。这个变换矩阵是相对于对象自身的。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Eigen::Isometry3d localTransform = Eigen::Isometry3d::<span class="built_in">Identity</span>();</span><br><span class="line">localTransform.<span class="built_in">pretranslate</span>(Eigen::<span class="built_in">Vector3d</span>(<span class="number">1.0</span>, <span class="number">2.0</span>, <span class="number">3.0</span>)); <span class="comment">// 平移</span></span><br><span class="line">localTransform.<span class="built_in">rotate</span>(Eigen::<span class="built_in">AngleAxisd</span>(M_PI / <span class="number">4</span>, Eigen::Vector3d::<span class="built_in">UnitZ</span>())); <span class="comment">// 旋转</span></span><br></pre></td></tr></table></figure>
<h3 id="2-世界坐标系下的变换"><a class="markdownIt-Anchor" href="#2-世界坐标系下的变换"></a> 2. 世界坐标系下的变换</h3>
<p>在世界坐标系下，变换是相对于场景的固定坐标系进行的。对象的自体变换会被应用到世界坐标系中的对象。</p>
<p><strong>变换矩阵的构造</strong>：</p>
<ul>
<li>在构建世界坐标系下的变换时，我们需要将对象的自体变换与世界变换结合起来。通常我们会使用左乘的方式将自体变换矩阵应用到世界变换矩阵上。</li>
</ul>
<p><strong>示例</strong>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Eigen::Isometry3d worldTransform = Eigen::Isometry3d::<span class="built_in">Identity</span>(); <span class="comment">// 世界变换矩阵</span></span><br><span class="line">worldTransform.<span class="built_in">pretranslate</span>(Eigen::<span class="built_in">Vector3d</span>(<span class="number">5.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)); <span class="comment">// 世界坐标系下的平移</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将对象的自体变换应用于世界变换</span></span><br><span class="line">Eigen::Isometry3d finalTransform = worldTransform * localTransform; <span class="comment">// 左乘</span></span><br></pre></td></tr></table></figure>
<p>在这里，<code>finalTransform</code> 是结合了世界变换和自体变换的最终变换矩阵。</p>
<h3 id="矩阵乘法顺序"><a class="markdownIt-Anchor" href="#矩阵乘法顺序"></a> 矩阵乘法顺序</h3>
<ul>
<li>
<p><strong>左乘</strong>：在这种情况下，左乘是将新变换应用到已有变换的前面。也就是说，最后的变换是先进行左侧的变换，然后再进行右侧的变换。</p>
<ul>
<li><strong>例如</strong>：<code>finalTransform = worldTransform * localTransform</code> 表示先应用 <code>localTransform</code>（自体变换）然后应用 <code>worldTransform</code>（世界变换）。</li>
</ul>
</li>
<li>
<p><strong>右乘</strong>：如果我们使用右乘，变换的顺序会相反，通常不常见于对象的变换。</p>
<ul>
<li><strong>例如</strong>：<code>finalTransform = localTransform * worldTransform</code> 表示先应用 <code>worldTransform</code>，后应用 <code>localTransform</code>，这通常不是我们希望的顺序。</li>
</ul>
</li>
</ul>
<h3 id="3-变换的总结"><a class="markdownIt-Anchor" href="#3-变换的总结"></a> 3. 变换的总结</h3>
<ul>
<li><strong>自体坐标系变换</strong>：是对象相对于自身的变换，通常使用左乘自体变换矩阵。</li>
<li><strong>世界坐标系变换</strong>：是对象相对于整个场景的变换，通常是将自体变换矩阵左乘到世界变换矩阵上。</li>
<li><strong>左乘与右乘</strong>：在进行组合变换时，使用左乘可以使得新变换在前，保持变换的逻辑顺序，确保先应用某个变换。</li>
</ul>
<h3 id="变换示意图"><a class="markdownIt-Anchor" href="#变换示意图"></a> 变换示意图</h3>
<p>假设我们有一个点<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span></span></span></span>，我们可以用变换矩阵<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mtext>local</mtext></msub></mrow><annotation encoding="application/x-tex">T_{\text{local}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">local</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>来表示对象的自体变换，然后用<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>T</mi><mtext>world</mtext></msub></mrow><annotation encoding="application/x-tex">T_{\text{world}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">world</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>来表示世界坐标系的变换：</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msup><mi>P</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><msub><mi>T</mi><mtext>world</mtext></msub><mo>⋅</mo><mo stretchy="false">(</mo><msub><mi>T</mi><mtext>local</mtext></msub><mo>⋅</mo><mi>P</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">P&#x27; = T_{\text{world}} \cdot (T_{\text{local}} \cdot P)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">world</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">T</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord mtight">local</span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">P</span><span class="mclose">)</span></span></span></span></span></p>
<p>在这里，首先应用自体变换，然后应用世界变换。</p>
<h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3>
<p>在自体坐标系和世界坐标系下增加变换时，通常都使用左乘变换矩阵。左乘的顺序决定了变换的应用顺序，确保变换的逻辑符合预期。如果你有其他问题或需要更详细的解释，请告诉我！</p>
<h2 id="左乘变换矩阵和变换矩阵的逆矩阵"><a class="markdownIt-Anchor" href="#左乘变换矩阵和变换矩阵的逆矩阵"></a> 左乘变换矩阵和变换矩阵的逆矩阵</h2>
<p>在三维图形学和计算机图形学中，变换矩阵的使用和乘法顺序对于场景中对象的操作至关重要。左乘变换矩阵和左乘其逆矩阵的选择依赖于你要实现的变换操作的性质。以下是一些常见场景的解释：</p>
<h3 id="1-左乘变换矩阵"><a class="markdownIt-Anchor" href="#1-左乘变换矩阵"></a> 1. 左乘变换矩阵</h3>
<p><strong>左乘变换矩阵</strong>通常用于将新变换应用于当前坐标系或当前状态。这种操作会在变换应用之前改变对象的状态。</p>
<h4 id="何时左乘变换矩阵"><a class="markdownIt-Anchor" href="#何时左乘变换矩阵"></a> 何时左乘变换矩阵：</h4>
<ul>
<li>
<p><strong>应用新的变换</strong>：当你希望将一个新的变换（如平移、旋转或缩放）应用到对象时，使用左乘变换矩阵。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Eigen::Isometry3d currentTransform = Eigen::Isometry3d::<span class="built_in">Identity</span>();</span><br><span class="line">Eigen::Isometry3d newTransform;</span><br><span class="line">newTransform.<span class="built_in">pretranslate</span>(Eigen::<span class="built_in">Vector3d</span>(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)); <span class="comment">// 定义一个新的平移变换</span></span><br><span class="line"></span><br><span class="line">currentTransform = newTransform * currentTransform; <span class="comment">// 左乘新的变换</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>组合变换</strong>：在处理多个变换时，左乘可以确保变换的顺序是自上而下的，即应用新变换后再应用已有的变换。</p>
</li>
</ul>
<h3 id="2-左乘逆变换矩阵"><a class="markdownIt-Anchor" href="#2-左乘逆变换矩阵"></a> 2. 左乘逆变换矩阵</h3>
<p><strong>左乘逆变换矩阵</strong>通常用于“撤销”先前的变换，或者将一个点从一个变换后的坐标系转换回原始坐标系。</p>
<h4 id="何时左乘逆变换矩阵"><a class="markdownIt-Anchor" href="#何时左乘逆变换矩阵"></a> 何时左乘逆变换矩阵：</h4>
<ul>
<li>
<p><strong>撤销变换</strong>：如果你想要从经过变换的状态回到原始状态，可以使用逆变换矩阵。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Eigen::Isometry3d transform; <span class="comment">// 已定义的变换</span></span><br><span class="line">Eigen::Isometry3d inverseTransform = transform.<span class="built_in">inverse</span>(); <span class="comment">// 计算逆变换</span></span><br><span class="line"></span><br><span class="line">Eigen::Vector3d transformedPoint; <span class="comment">// 已经变换后的点</span></span><br><span class="line">Eigen::Vector3d originalPoint = inverseTransform * transformedPoint; <span class="comment">// 撤销变换</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>坐标系转换</strong>：当你需要将一个点从一个坐标系转换到另一个坐标系（例如，从世界坐标系转换到对象的自体坐标系）时，可以使用逆变换矩阵。</p>
</li>
</ul>
<h3 id="3-实际应用示例"><a class="markdownIt-Anchor" href="#3-实际应用示例"></a> 3. 实际应用示例</h3>
<h4 id="示例-1应用变换"><a class="markdownIt-Anchor" href="#示例-1应用变换"></a> 示例 1：应用变换</h4>
<p>假设你有一个对象需要进行平移和旋转：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Eigen::Isometry3d transform = Eigen::Isometry3d::<span class="built_in">Identity</span>();</span><br><span class="line">transform.<span class="built_in">pretranslate</span>(Eigen::<span class="built_in">Vector3d</span>(<span class="number">1.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)); <span class="comment">// 平移</span></span><br><span class="line">transform.<span class="built_in">rotate</span>(Eigen::<span class="built_in">AngleAxisd</span>(M_PI / <span class="number">4</span>, Eigen::Vector3d::<span class="built_in">UnitZ</span>())); <span class="comment">// 旋转</span></span><br><span class="line"></span><br><span class="line"><span class="function">Eigen::Vector3d <span class="title">point</span><span class="params">(<span class="number">0.0</span>, <span class="number">0.0</span>, <span class="number">0.0</span>)</span></span>;</span><br><span class="line">Eigen::Vector3d transformedPoint = transform * point; <span class="comment">// 应用变换</span></span><br></pre></td></tr></table></figure>
<h4 id="示例-2撤销变换"><a class="markdownIt-Anchor" href="#示例-2撤销变换"></a> 示例 2：撤销变换</h4>
<p>如果你想要回到原始坐标：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Eigen::Isometry3d inverseTransform = transform.<span class="built_in">inverse</span>(); <span class="comment">// 计算逆变换</span></span><br><span class="line">Eigen::Vector3d originalPoint = inverseTransform * transformedPoint; <span class="comment">// 撤销变换</span></span><br></pre></td></tr></table></figure>
<h3 id="4-总结"><a class="markdownIt-Anchor" href="#4-总结"></a> 4. 总结</h3>
<ul>
<li>
<p><strong>左乘变换矩阵</strong>：</p>
<ul>
<li>用于应用新的变换。</li>
<li>组合多个变换时，确保顺序。</li>
</ul>
</li>
<li>
<p><strong>左乘逆变换矩阵</strong>：</p>
<ul>
<li>用于撤销变换或将坐标从一个坐标系转换到另一个坐标系。</li>
<li>常用于坐标系变换和还原到原始状态。</li>
</ul>
</li>
</ul>
<h3 id="5-变换的顺序"><a class="markdownIt-Anchor" href="#5-变换的顺序"></a> 5. 变换的顺序</h3>
<p>变换的顺序在图形学中非常重要，左乘的方式通常意味着“先应用新变换”，而逆变换则用于“返回原状态”。这种逻辑对于实现复杂的动画、物理模拟和变换处理至关重要。</p>
]]></content>
      <tags>
        <tag>矩阵变换</tag>
        <tag>Eigen</tag>
      </tags>
  </entry>
  <entry>
    <title>自动求导</title>
    <url>/2021/07/20/%E8%87%AA%E5%8A%A8%E6%B1%82%E5%AF%BC/</url>
    <content><![CDATA[<h2 id="自动求导"><a class="markdownIt-Anchor" href="#自动求导"></a> 自动求导</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  torch</span><br><span class="line"><span class="keyword">from</span>    torch <span class="keyword">import</span> autograd</span><br><span class="line"></span><br><span class="line">x = torch.tensor(<span class="number">1.</span>)</span><br><span class="line">a = torch.tensor(<span class="number">1.</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">b = torch.tensor(<span class="number">2.</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line">c = torch.tensor(<span class="number">3.</span>, requires_grad=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">y = a**<span class="number">2</span> * x + b * x + c</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;before:&#x27;</span>, a.grad, b.grad, c.grad)</span><br><span class="line">grads = autograd.grad(y, [a, b, c])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;after :&#x27;</span>, grads[<span class="number">0</span>], grads[<span class="number">1</span>], grads[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<p>1、TENSOR</p>
<p>torch.Tensor 是包的核心类。如果将其属性 .requires_grad 设置为 True，则会开始跟踪针对 tensor 的所有操作。完成计算后，您可以调用 .backward() 来自动计算所有梯度。该张量的梯度将累积到 .grad 属性中。</p>
<p>要停止 tensor 历史记录的跟踪，您可以调用 .detach()，它将其与计算历史记录分离，并防止将来的计算被跟踪。</p>
<p>要停止跟踪历史记录（和使用内存），您还可以将代码块使用 with torch.no_grad(): 包装起来。在评估模型时，这是特别有用，因为模型在训练阶段具有 requires_grad = True 的可训练参数有利于调参，但在评估阶段我们不需要梯度。</p>
<p>还有一个类对于 autograd 实现非常重要那就是 Function。Tensor 和 Function 互相连接并构建一个非循环图，它保存整个完整的计算过程的历史信息。每个张量都有一个 .grad_fn 属性保存着创建了张量的 Function 的引用，（如果用户自己创建张量，则g rad_fn 是 None ）。</p>
<p>如果你想计算导数，你可以调用 Tensor.backward()。如果 Tensor 是标量（即它包含一个元素数据），则不需要指定任何参数backward()，但是如果它有更多元素，则需要指定一个gradient 参数来指定张量的形状。</p>
]]></content>
      <tags>
        <tag>pytorch</tag>
      </tags>
  </entry>
  <entry>
    <title>钢铁雄心4 No Step Back</title>
    <url>/2021/12/26/%E9%92%A2%E9%93%81%E9%9B%84%E5%BF%834-No-Step-Back/</url>
    <content><![CDATA[<h3 id="钢铁雄心4-no-step-back-dlc备份"><a class="markdownIt-Anchor" href="#钢铁雄心4-no-step-back-dlc备份"></a> 钢铁雄心4 No Step Back dlc备份</h3>
<p>图片，音乐：Paradox Interactive</p>
<div id="mplayer6003"></div>
<script src="https://cdn.jsdelivr.net/gh/MoePlayer/cPlayer/dist/cplayer.js"></script>
<script>
    new cplayer({
      element: document.getElementById('mplayer6003'),
      
playlist: [
    {
        name: 'Army-of-the-Braves(无畏之军)',
        artist: 'Paradox Interactive',
        src: '/No Step Back/Army-of-the-Braves.flac',
        poster: '/No Step Back/No Step Back.png'
    },
    {
        name: 'Bravery-of-the-Minority(少数人的勇敢)',
        artist: 'Paradox Interactive',
        src: '/No Step Back/Bravery-of-the-Minority.flac',
        poster: '/No Step Back/No Step Back.png'
    },
    {
        name: 'Katyusha(喀秋莎)',
        artist: 'Paradox Interactive',
        src: '/No Step Back/Katyusha.flac',
        poster: '/No Step Back/No Step Back.png'
    },
    {
        name: 'March-of-the-Defenders(莫斯科保卫者之歌)',
        artist: 'Paradox Interactive',
        src: '/No Step Back/March-of-the-Defenders.flac',
        poster: '/No Step Back/No Step Back.png'
    },
    {
        name: 'Sacred-War(神圣的战争)',
        artist: 'Paradox Interactive',
        src: '/No Step Back/Sacred-War.flac',
        poster: '/No Step Back/No Step Back.png'
    }
    
],
autoplay: false,
volume: 0.75,
playmode: "listloop",
big: true,
dark: false,
size:'20px'
    })
</script>
]]></content>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
</search>
